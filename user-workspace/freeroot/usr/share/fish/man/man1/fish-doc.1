.\" Man page generated from reStructuredText.
.
.TH "FISH-DOC" "1" "Feb 12, 2020" "3.1" "fish-shell"
.SH NAME
fish-doc \- fish-shell Documentation
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
This is the documentation for \fIfish\fP, the \fBf\fPriendly \fBi\fPnteractive \fBsh\fPell.
.sp
A shell is a program which helps you operate your computer by starting other programs. fish offers a command\-line interface focused on usability and interactive use.
.sp
Unlike other shells, fish does not follow the POSIX standard, but still roughly belongs to the same family.
.sp
Some of the special features of fish are:
.INDENT 0.0
.IP \(bu 2
\fBExtensive UI\fP: \fI\%syntax highlighting\fP, \fI\%autosuggestions\fP, \fI\%tab completion\fP and selection lists that can be navigated and filtered.
.IP \(bu 2
\fBNo configuration needed\fP: fish is designed to be ready to use immediately, without requiring extensive configuration.
.IP \(bu 2
\fBEasy scripting\fP: new \fI\%functions\fP can be added on the fly. The syntax is easy to learn and use.
.UNINDENT
.sp
This bit of the documentation is a quick guide on how to get going. If you are new to this, see the tutorial\&.
.sp
This section is on how to install, uninstall, start and exit a fish shell and on how to make fish the default shell:
.INDENT 0.0
.IP \(bu 2
\fI\%Installation\fP: How to install fish
.IP \(bu 2
\fI\%Starting and Exiting\fP How to start and exit a fish shell
.IP \(bu 2
\fI\%Executing Bash\fP: How to execute bash commands in fish
.IP \(bu 2
\fI\%Default Shell\fP: How to switch to fish as the default shell
.IP \(bu 2
\fI\%Uninstalling\fP: How to uninstall fish
.UNINDENT
.SH INSTALLATION
.sp
Up\-to\-date instructions for installing the latest version of fish are on the \fI\%fish homepage\fP\&.
.sp
To install the development version of fish see the instructions at the \fI\%project\(aqs GitHub page\fP\&.
.SH STARTING AND EXITING
.sp
Once fish has been installed, open a terminal. If fish is not the default shell:
.INDENT 0.0
.IP \(bu 2
Enter \fBfish\fP to start a fish shell:
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
> fish
.ft P
.fi
.UNINDENT
.UNINDENT
.IP \(bu 2
Enter \fBexit\fP to exit a fish shell:
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
> exit
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.SH EXECUTING BASH
.sp
If fish is your default shell and you want to copy commands from the internet that are written in a different shell language, bash for example, you can proceed in the following way:
.sp
Consider, that \fBbash\fP is also a command. With \fBman bash\fP you can see that there are two ways to do this:
.INDENT 0.0
.IP \(bu 2
\fBbash\fP has a switch \fB\-c\fP to read from a string:
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
> bash \-c SomeBashCommand
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.sp
or \fBbash\fP without a switch, opens a bash shell that you can use and \fBexit\fP afterwards.
.SH DEFAULT SHELL
.sp
You can make fish your default shell by adding fish\(aqs  executable in two places:
\- add \fB/usr/local/bin/fish\fP  to  \fB/etc/shells\fP
\- change your default shell with \fBchsh \-s\fP to \fB/usr/local/bin/fish\fP
.sp
For for detailed instructions see Switching to fish\&.
.SH UNINSTALLING
.sp
For uninstalling fish: see FAQ: Uninstalling fish\&.
.SH SHEBANG LINE
.sp
Since scripts for shell commands can be written in many different languages, they need to carry information about what interpreter is needed to execute them: For this they are expected to have a first line, the shebang line, which names an executable for this purpose:
.sp
Example:
.sp
A scripts written in \fBbash\fP it would need a first line like this:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#!/bin/bash
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This line tells the shell to execute the file with the bash interpreter, that is located at the path \fB/bin/bash\fP\&.
.sp
For a script, written in another language, just replace the interpreter \fB/bin/bash\fP with the language interpreter of that other language (for example \fB/bin/python\fP for a \fBpython\fP script)
.sp
This line is only needed when scripts are executed without specifying the interpreter. For functions inside fish or when executing a script with \fB\(gafish /path/to/script\fP they aren\(aqt required (but don\(aqt hurt either!).
.sp
Shells like fish are used by giving them commands. Every \fBfish\fP command follows the same basic syntax.
.sp
A command is executed by writing the name of the command followed by any arguments.
.sp
Example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
echo hello world
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This calls the \fBecho\fP command. \fBecho\fP is a command which will write its arguments to the screen. In the example above, the output will be \(aqhello world\(aq. Everything in fish is done with commands. There are commands for performing a set of commands multiple times, commands for assigning variables, commands for treating a group of commands as a single command, etc.. And every single command follows the same basic syntax.
.sp
If you want to find out more about the echo command used above, read the manual page for the echo command by writing: \fBman echo\fP
.sp
\fBman\fP is a command for displaying a manual page on a given topic. The man command takes the name of the manual page to display as an argument. There are manual pages for almost every command on most computers. There are also manual pages for many other things, such as system libraries and important files.
.sp
Every program on your computer can be used as a command in \fBfish\fP\&. If the program file is located in one of the directories in the \fI\%PATH\fP, you can just use the name of the program to use it. Otherwise the whole filename, including the directory (like \fB/home/me/code/checkers/checkers\fP or \fB\&../checkers\fP) has to be used.
.sp
Here is a list of some useful commands:
.INDENT 0.0
.IP \(bu 2
\fBcd\fP, change the current directory
.IP \(bu 2
\fBls\fP, list files and directories
.IP \(bu 2
\fBman\fP, display a manual page on the screen
.IP \(bu 2
\fBmv\fP, move (rename) files
.IP \(bu 2
\fBcp\fP, copy files
.IP \(bu 2
\fBopen\fP, open files with the default application associated with each filetype
.IP \(bu 2
\fBless\fP, list the contents of files
.UNINDENT
.sp
Commands and parameters are separated by the space character \fI\(aq \(aq\fP\&. Every command ends with either a newline (i.e. by pressing the return key) or a semicolon \(aq\fB;\fP\(aq. More than one command can be written on the same line by separating them with semicolons.
.sp
A switch is a very common special type of argument. Switches almost always start with one or more hyphens \(aq\fB\-\fP\(aq and alter the way a command operates. For example, the \(aq\fBls\fP\(aq command usually lists all the files and directories in the current working directory, but by using the \(aq\fB\-l\fP\(aq switch, the behavior of \(aq\fBls\fP\(aq is changed to not only display the filename, but also the size, permissions, owner and modification time of each file.
.sp
Switches differ between commands and are documented in the manual page for each command. Some switches are common to most command though, for example \(aq\fB\-\-help\fP\(aq will usually display a help text, \(aq\fB\-i\fP\(aq will often turn on interactive prompting before taking action, while \(aq\fB\-f\fP\(aq will turn it off.
.SH SOME COMMON WORDS
.sp
This is a short explanation of some of the commonly used words in fish.
.INDENT 0.0
.IP \(bu 2
\fBargument\fP a parameter given to a command
.IP \(bu 2
\fBbuiltin\fP a command that is implemented in the shell. Builtins are commands that are so closely tied to the shell that it is impossible to implement them as external commands.
.IP \(bu 2
\fBcommand\fP a program that the shell can run. In another sense also specifically an external command (i.e. neither a function or builtin).
.IP \(bu 2
\fBfunction\fP a block of commands that can be called as if they were a single command. By using functions, it is possible to string together multiple smaller commands into one more advanced command.
.IP \(bu 2
\fBjob\fP a running pipeline or command
.IP \(bu 2
\fBpipeline\fP a set of commands stringed together so that the output of one command is the input of the next command
.IP \(bu 2
\fBredirection\fP an operation that changes one of the input/output streams associated with a job
.IP \(bu 2
\fBswitch\fP a special flag sent as an argument to a command that will alter the behavior of the command. A switch almost always begins with one or two hyphens.
.UNINDENT
.SH QUOTES
.sp
Sometimes features such as \fI\%parameter expansion\fP and \fI\%character escapes\fP get in the way. When that happens, the user can write a parameter within quotes, either \fB\(aq\fP (single quote) or \fB"\fP (double quote). There is one important difference between single quoted and double quoted strings: When using double quoted string, \fI\%variable expansion\fP still takes place. Other than that, no other kind of expansion (including \fI\%brace expansion\fP and parameter expansion) will take place, the parameter may contain spaces, and escape sequences are ignored.
.sp
The only backslash escape accepted within single quotes is \fB\e\(aq\fP, which escapes a single quote and \fB\e\e\fP, which escapes the backslash symbol. The only backslash escapes accepted within double quotes are \fB\e"\fP, which escapes a double quote, \fB\e$\fP, which escapes a dollar character, \fB\e\fP followed by a newline, which deletes the backslash and the newline, and lastly \fB\e\e\fP, which escapes the backslash symbol. Single quotes have no special meaning within double quotes and vice versa.
.sp
Example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
rm "cumbersome filename.txt"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Will remove the file \(aqcumbersome filename.txt\(aq, while
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
rm cumbersome filename.txt
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
would remove the two files \(aqcumbersome\(aq and \(aqfilename.txt\(aq.
.SH ESCAPING CHARACTERS
.sp
Some characters can not be written directly on the command line. For these characters, so called escape sequences are provided. These are:
.INDENT 0.0
.IP \(bu 2
\fB\ea\fP represents the alert character
.IP \(bu 2
\fB\eb\fP represents the backspace character
.IP \(bu 2
\fB\ee\fP represents the escape character
.IP \(bu 2
\fB\ef\fP represents the form feed character
.IP \(bu 2
\fB\en\fP represents a newline character
.IP \(bu 2
\fB\er\fP represents the carriage return character
.IP \(bu 2
\fB\et\fP represents the tab character
.IP \(bu 2
\fB\ev\fP represents the vertical tab character
.IP \(bu 2
\fB\e \fP \ escapes the space character
.IP \(bu 2
\fB\e$\fP escapes the dollar character
.IP \(bu 2
\fB\e\e\fP escapes the backslash character
.IP \(bu 2
\fB\e*\fP escapes the star character
.IP \(bu 2
\fB\e?\fP escapes the question mark character (this is not necessary if the \fIqmark\-noglob\fP \fI\%feature flag\fP is enabled)
.IP \(bu 2
\fB\e~\fP escapes the tilde character
.IP \(bu 2
\fB\e#\fP escapes the hash character
.IP \(bu 2
\fB\e(\fP escapes the left parenthesis character
.IP \(bu 2
\fB\e)\fP escapes the right parenthesis character
.IP \(bu 2
\fB\e{\fP escapes the left curly bracket character
.IP \(bu 2
\fB\e}\fP escapes the right curly bracket character
.IP \(bu 2
\fB\e[\fP escapes the left bracket character
.IP \(bu 2
\fB\e]\fP escapes the right bracket character
.IP \(bu 2
\fB\e\e<\fP escapes the less than character
.IP \(bu 2
\fB\e\e>\fP escapes the more than character
.IP \(bu 2
\fB\e^\fP escapes the circumflex character
.IP \(bu 2
\fB\e&\fP escapes the ampersand character
.IP \(bu 2
\fB\e|\fP escapes the vertical bar character
.IP \(bu 2
\fB\e;\fP escapes the semicolon character
.IP \(bu 2
\fB\e"\fP escapes the quote character
.IP \(bu 2
\fB\e\(aq\fP escapes the apostrophe character
.IP \(bu 2
\fB\exHH\fP, where \fIHH\fP is a hexadecimal number, represents the ascii character with the specified value. For example, \fB\ex9\fP is the tab character.
.IP \(bu 2
\fB\eXHH\fP, where \fIHH\fP is a hexadecimal number, represents a byte of data with the specified value. If you are using a multibyte encoding, this can be used to enter invalid strings. Only use this if you know what you are doing.
.IP \(bu 2
\fB\eooo\fP, where \fIooo\fP is an octal number, represents the ascii character with the specified value. For example, \fB\e011\fP is the tab character.
.IP \(bu 2
\fB\euXXXX\fP, where \fIXXXX\fP is a hexadecimal number, represents the 16\-bit Unicode character with the specified value. For example, \fB\eu9\fP is the tab character.
.IP \(bu 2
\fB\eUXXXXXXXX\fP, where \fIXXXXXXXX\fP is a hexadecimal number, represents the 32\-bit Unicode character with the specified value. For example, \fB\eU9\fP is the tab character.
.IP \(bu 2
\fB\ecX\fP, where \fIX\fP is a letter of the alphabet, represents the control sequence generated by pressing the control key and the specified letter. For example, \fB\eci\fP is the tab character
.UNINDENT
.SH INPUT/OUTPUT REDIRECTION
.sp
Most programs use three input/output [1] streams, each represented by a number called a file descriptor (FD). These are:
.INDENT 0.0
.IP \(bu 2
Standard input, FD 0, for reading, defaults to reading from the keyboard.
.IP \(bu 2
Standard output, FD 1, for writing, defaults to writing to the screen.
.IP \(bu 2
Standard error, FD 2, for writing errors and warnings, defaults to writing to the screen.
.UNINDENT
.sp
Any file descriptor can be directed to a different output than its default through a mechanism called a redirection.
.sp
An example of a file redirection is \fBecho hello > output.txt\fP, which directs the output of the echo command to the file output.txt.
.INDENT 0.0
.IP \(bu 2
To read standard input from a file, write \fB<SOURCE_FILE\fP
.IP \(bu 2
To write standard output to a file, write \fB>DESTINATION\fP
.IP \(bu 2
To write standard error to a file, write \fB2>DESTINATION\fP [2]
.IP \(bu 2
To append standard output to a file, write \fB>>DESTINATION_FILE\fP
.IP \(bu 2
To append standard error to a file, write \fB2>>DESTINATION_FILE\fP
.IP \(bu 2
To not overwrite ("clobber") an existing file, write \fB>?DESTINATION\fP or \fB2>?DESTINATION\fP (this is also known as the "noclobber" redirection)
.UNINDENT
.sp
\fBDESTINATION\fP can be one of the following:
.INDENT 0.0
.IP \(bu 2
A filename. The output will be written to the specified file.
.IP \(bu 2
An ampersand (\fB&\fP) followed by the number of another file descriptor. The output will be written to that file descriptor instead.
.IP \(bu 2
An ampersand followed by a minus sign (\fB&\-\fP). The file descriptor will be closed.
.UNINDENT
.sp
As a convenience, the redirection \fB&>\fP can be used to direct both stdout and stderr to the same file.
.sp
Example:
.sp
To redirect both standard output and standard error to the file \(aqall_output.txt\(aq, you can write \fBecho Hello &> all_output.txt\fP, which is a convenience for \fBecho Hello > all_output.txt 2>&1\fP\&.
.sp
Any file descriptor can be redirected in an arbitrary way by prefixing the redirection with the file descriptor.
.INDENT 0.0
.IP \(bu 2
To redirect input of FD N, write \fBN<DESTINATION\fP
.IP \(bu 2
To redirect output of FD N, write \fBN>DESTINATION\fP
.IP \(bu 2
To append the output of FD N to a file, write \fBN>>DESTINATION_FILE\fP
.UNINDENT
.sp
Example: \fBecho Hello 2>output.stderr\fP writes the standard error (file descriptor 2) of the target program to \fBoutput.stderr\fP\&.
.IP [1] 5
Also shortened as "I/O" or "IO".
.IP [2] 5
Previous versions of fish also allowed spelling this as \fB^DESTINATION\fP, but that made another character special so it was deprecated and will be removed in future.
.SH PIPING
.sp
The user can string together multiple commands into a \fIpipeline\fP\&. This means that the standard output of one command will be read in as standard input into the next command. This is done by separating the commands by the pipe character \(aq\fB|\fP\(aq. For example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
cat foo.txt | head
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
will call the \fBcat\fP program with the parameter \(aqfoo.txt\(aq, which will print the contents of the file \(aqfoo.txt\(aq. The contents of foo.txt will then be filtered through the program \(aqhead\(aq, which will pass on the first ten lines of the file to the screen. For more information on how to combine commands through pipes, read the manual pages of the commands you want to use using the \fBman\fP command. If you want to find out more about the \fBcat\fP program, type \fBman cat\fP\&.
.sp
Pipes usually connect file descriptor 1 (standard output) of the first process to file descriptor 0 (standard input) of the second process. It is possible to use a different output file descriptor by prepending the desired FD number and then output redirect symbol to the pipe. For example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
make fish 2>| less
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
will attempt to build the fish program, and any errors will be shown using the less pager.
.sp
As a convenience, the pipe \fB&|\fP may be used to redirect both stdout and stderr to the same process. (Note this is different from bash, which uses \fB|&\fP).
.SH BACKGROUND JOBS
.sp
When you start a job in \fBfish\fP, \fBfish\fP itself will pause, and give control of the terminal to the program just started. Sometimes, you want to continue using the commandline, and have the job run in the background. To create a background job, append an & (ampersand) to your command. This will tell fish to run the job in the background. Background jobs are very useful when running programs that have a graphical user interface.
.sp
Example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
emacs &
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
will start the emacs text editor in the background.
.SH JOB CONTROL
.sp
Most programs allow you to suspend the program\(aqs execution and return control to \fBfish\fP by pressing \fBControl+Z\fP (also referred to as \fB^Z\fP). Once back at the \fBfish\fP commandline, you can start other programs and do anything you want. If you then want you can go back to the suspended command by using the fg (foreground) command.
.sp
If you instead want to put a suspended job into the background, use the bg command.
.sp
To get a listing of all currently started jobs, use the jobs command.
These listed jobs can be removed with the disown command.
.SH FUNCTIONS
.sp
Functions are programs written in the fish syntax. They group together one or more commands and their arguments using a single name. It can also be used to start a specific command with additional arguments.
.sp
For example, the following is a function definition that calls the command \fBls\fP with the argument \(aq\fB\-l\fP\(aq to print a detailed listing of the contents of the current directory:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function ll
    ls \-l $argv
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The first line tells fish that a function by the name of \fBll\fP is to be defined. To use it, simply write \fBll\fP on the commandline. The second line tells fish that the command \fBls \-l $argv\fP should be called when \fBll\fP is invoked. \(aq\fB$argv\fP\(aq is a list variable, which always contains all arguments sent to the function. In the example above, these are simply passed on to the \fBls\fP command. For more information on functions, see the documentation for the function builtin.
.SH DEFINING ALIASES
.sp
One of the most common uses for functions is to slightly alter the behavior of an already existing command. For example, one might want to redefine the \fBls\fP command to display colors. The switch for turning on colors on GNU systems is \(aq\fB\-\-color=auto\fP\(aq. An alias, or wrapper, around \fBls\fP might look like this:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function ls
    command ls \-\-color=auto $argv
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
There are a few important things that need to be noted about aliases:
.INDENT 0.0
.IP \(bu 2
Always take care to add the \fB$argv\fP variable to the list of parameters to the wrapped command. This makes sure that if the user specifies any additional parameters to the function, they are passed on to the underlying command.
.IP \(bu 2
If the alias has the same name as the aliased command, you need to prefix the call to the program with \fBcommand\fP to tell fish that the function should not call itself, but rather a command with the same name. If you forget to do so, the function would call itself until the end of time. Usually fish is smart enough to figure this out and will refrain from doing so (which is hopefully in your interest).
.IP \(bu 2
Autoloading isn\(aqt applicable to aliases. Since, by definition, the function is created at the time the alias command is executed. You cannot autoload aliases.
.UNINDENT
.sp
To easily create a function of this form, you can use the alias command.
.SH AUTOLOADING FUNCTIONS
.sp
Functions can be defined on the commandline or in a configuration file, but they can also be automatically loaded. This has some advantages:
.INDENT 0.0
.IP \(bu 2
An autoloaded function becomes available automatically to all running shells.
.IP \(bu 2
If the function definition is changed, all running shells will automatically reload the altered version.
.IP \(bu 2
Startup time and memory usage is improved, etc.
.UNINDENT
.sp
When fish needs to load a function, it searches through any directories in the list variable \fB$fish_function_path\fP for a file with a name consisting of the name of the function plus the suffix \(aq\fB\&.fish\fP\(aq and loads the first it finds.
.sp
By default \fB$fish_function_path\fP contains the following:
.INDENT 0.0
.IP \(bu 2
A directory for end\-users to keep their own functions, usually \fB~/.config/fish/functions\fP (controlled by the \fBXDG_CONFIG_HOME\fP environment variable).
.IP \(bu 2
A directory for systems administrators to install functions for all users on the system, usually \fB/etc/fish/functions\fP (really \fB$__fish_sysconfdir/functions\fP).
.IP \(bu 2
Directories for third\-party software vendors to ship their own functions for their software. Fish searches the directories in the \fBXDG_DATA_DIRS\fP environment variable for a \fBfish/vendor_functions.d\fP directory; if this variable is not defined, the default is usually to search \fB/usr/share/fish/vendor_functions.d\fP and \fB/usr/local/share/fish/vendor_functions.d\fP\&.
.IP \(bu 2
The functions shipped with fish, usually installed in \fB/usr/share/fish/functions\fP (really \fB$__fish_data_dir/functions\fP).
.UNINDENT
.sp
These paths are controlled by parameters set at build, install, or run time, and may vary from the defaults listed above.
.sp
This wide search may be confusing. If you are unsure, your functions probably belong in \fB~/.config/fish/functions\fP\&.
.sp
It is very important that function definition files only contain the definition for the specified function and nothing else. Otherwise, it is possible that autoloading a function files requires that the function already be loaded, which creates a circular dependency.
.sp
Autoloading also won\(aqt work for \fI\%event handlers\fP, since fish cannot know that a function is supposed to be executed when an event occurs when it hasn\(aqt yet loaded the function. See the \fI\%event handlers\fP section for more information.
.sp
Autoloading is not applicable to functions created by the \fBalias\fP command. For functions simple enough that you prefer to use the \fBalias\fP command to define them you\(aqll need to put those commands in your \fB~/.config/fish/config.fish\fP script or some other script run when the shell starts.
.sp
If you are developing another program, you may wish to install functions which are available for all users of the fish shell on a system. They can be installed to the "vendor" functions directory. As this path may vary from system to system, the \fBpkgconfig\fP framework should be used to discover this path with the output of \fBpkg\-config \-\-variable functionsdir fish\fP\&. Your installation system should support a custom path to override the pkgconfig path, as other distributors may need to alter it easily.
.SH CONDITIONAL EXECUTION OF CODE AND FLOW CONTROL
.sp
There are four fish builtins that let you execute commands only if a specific criterion is met. These builtins are if, switch, and and or\&.
.sp
The \fBswitch\fP command is used to execute one of possibly many blocks of commands depending on the value of a string. See the documentation for switch for more information.
.sp
The other conditionals use the \fI\%exit status\fP of a command to decide if a command or a block of commands should be executed. See their documentation for more information.
.SH PARAMETER EXPANSION (GLOBBING)
.sp
When an argument for a program is given on the commandline, it undergoes the process of parameter expansion before it is sent on to the command. Parameter expansion is a powerful mechanism that allows you to expand the parameter in various ways, including performing wildcard matching on files, inserting the value of a shell variable into the parameter or even using the output of another command as a parameter list.
.SH WILDCARDS
.sp
If a star (\fB*\fP) or a question mark (\fB?\fP) is present in the parameter, \fBfish\fP attempts to match the given parameter to any files in such a way that:
.INDENT 0.0
.IP \(bu 2
\fB*\fP can match any string of characters not containing \(aq/\(aq. This includes matching an empty string.
.IP \(bu 2
\fB**\fP matches any string of characters. This includes matching an empty string. The matched string may include the \fB/\fP character; that is, it recurses into subdirectories. Note that augmenting this wildcard with other strings will not match files in the current working directory (\fB$PWD\fP) if you separate the strings with a slash ("/"). This is unlike other shells such as zsh. For example, \fB**\e/*.fish\fP in zsh will match \fB\&.fish\fP files in the PWD but in fish will only match such files in a subdirectory. In fish you should type \fB**.fish\fP to match files in the PWD as well as subdirectories.
.IP \(bu 2
\fB?\fP can match any single character except \(aq/\(aq. This is deprecated and can be disabled via the \fIqmark\-noglob\fP \fI\%feature flag\fP, so \fI?\fP will just be an ordinary character.
.UNINDENT
.sp
Other shells, such as zsh, provide a rich glob syntax for restricting the files matched by globs. For example, \fB**(.)\fP, to only match regular files. Fish prefers to defer such features to programs, such as \fBfind\fP, rather than reinventing the wheel. Thus, if you want to limit the wildcard expansion to just regular files the fish approach is to define and use a function. For example,
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function ff \-\-description \(aqLike ** but only returns plain files.\(aq
    # This also ignores .git directories.
    find . \e( \-name .git \-type d \-prune \e) \-o \-type f | \e
        sed \-n \-e \(aq/^\e.\e/\e.git$/n\(aq \-e \(aqs/^\e.\e///p\(aq
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
You would then use it in place of \fB**\fP like this, \fBmy_prog (ff)\fP, to pass only regular files in or below $PWD to \fBmy_prog\fP\&.
.sp
Wildcard matches are sorted case insensitively. When sorting matches containing numbers, consecutive digits are considered to be one element, so that the strings \(aq1\(aq \(aq5\(aq and \(aq12\(aq would be sorted in the order given.
.sp
File names beginning with a dot are not considered when wildcarding unless a dot is specifically given as the first character of the file name.
.sp
Examples:
.INDENT 0.0
.IP \(bu 2
\fBa*\fP matches any files beginning with an \(aqa\(aq in the current directory.
.IP \(bu 2
\fB???\fP matches any file in the current directory whose name is exactly three characters long.
.IP \(bu 2
\fB**\fP matches any files and directories in the current directory and all of its subdirectories.
.UNINDENT
.sp
Note that for most commands, if any wildcard fails to expand, the command is not executed, \fI\%$status\fP is set to nonzero, and a warning is printed. This behavior is consistent with setting \fBshopt \-s failglob\fP in bash. There are exactly 4 exceptions, namely set, overriding variables in \fI\%overrides\fP, count and for\&. Their globs are permitted to expand to zero arguments, as with \fBshopt \-s nullglob\fP in bash.
.sp
Examples:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ls *.foo
# Lists the .foo files, or warns if there aren\(aqt any.

set foos *.foo
if count $foos >/dev/null
    ls $foos
end
# Lists the .foo files, if any.
.ft P
.fi
.UNINDENT
.UNINDENT
.SH COMMAND SUBSTITUTION
.sp
The output of a series of commands can be used as the parameters to another command. If a parameter contains a set of parenthesis, the text enclosed by the parenthesis will be interpreted as a list of commands. On expansion, this list is executed, and substituted by the output. If the output is more than one line long, each line will be expanded to a new parameter. Setting \fBIFS\fP to the empty string will disable line splitting.
.sp
If the output is piped to string split or string split0 as the last step, those splits are used as they appear and no additional splitting on newlines takes place.
.sp
The exit status of the last run command substitution is available in the \fI\%status\fP variable if the substitution occurs in the context of a \fBset\fP command.
.sp
Only part of the output can be used, see \fI\%index range expansion\fP for details.
.sp
Fish has a default limit of 100 MiB on the amount of data a command substitution can output. If the limit is exceeded the entire command, not just the substitution, is failed and \fB$status\fP is set to 122. You can modify the limit by setting the \fBfish_read_limit\fP variable at any time including in the environment before fish starts running. If you set it to zero then no limit is imposed. This is a safety mechanism to keep the shell from consuming too much memory if a command outputs an unreasonable amount of data, typically your operating system also has a limit, and it\(aqs often much lower. Note that this limit also affects how much data the \fBread\fP command will process.
.sp
Examples:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
echo (basename image.jpg .jpg).png
# Outputs \(aqimage.png\(aq.

for i in *.jpg; convert $i (basename $i .jpg).png; end
# Convert all JPEG files in the current directory to the
# PNG format using the \(aqconvert\(aq program.

begin; set \-l IFS; set data (cat data.txt); end
# Set the \(ga\(gadata\(ga\(ga variable to the contents of \(aqdata.txt\(aq
# without splitting it into a list.

set data (cat data | string split0)
# Set \(ga\(ga$data\(ga\(ga to the contents of data, splitting on NUL\-bytes.
.ft P
.fi
.UNINDENT
.UNINDENT
.SH BRACE EXPANSION
.sp
A comma separated list of characters enclosed in curly braces will be expanded so each element of the list becomes a new parameter. This is useful to save on typing, and to separate a variable name from surrounding text.
.sp
Examples:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> echo input.{c,h,txt}
input.c input.h input.txt

> mv *.{c,h} src/
# Moves all files with the suffix \(aq.c\(aq or \(aq.h\(aq to the subdirectory src.

> cp file{,.bak}
# Make a copy of \(gafile\(ga at \(gafile.bak\(ga.

> set \-l dogs hot cool cute
> echo {$dogs}dog
hotdog cooldog cutedog
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If two braces do not contain a "," or a variable expansion, they will not be expanded in this manner:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> echo foo\-{}
foo\-{}
> git reset \-\-hard HEAD@{2}
# passes "HEAD@{2}" to git
> echo {{a,b}}
{a} {b} # because the inner brace pair is expanded, but the outer isn\(aqt.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If after expansion there is nothing between the braces, the argument will be removed (see \fI\%the cartesian product section\fP):
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> echo foo\-{$undefinedvar}
# Output is an empty line, just like a bare \(gaecho\(ga.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If there is nothing between a brace and a comma or two commas, it\(aqs interpreted as an empty element:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> echo {,,/usr}/bin
/bin /bin /usr/bin
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
To use a "," as an element, \fI\%quote\fP or \fI\%escape\fP it.
.SH VARIABLE EXPANSION
.sp
A dollar sign followed by a string of characters is expanded into the value of the shell variable with the same name. For more on shell variables, read the \fI\%Shell variables\fP section.
.sp
Examples:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
echo $HOME
# Prints the home directory of the current user.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Undefined and empty variables expand to nothing:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
echo $nonexistentvariable
# Prints no output.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
To separate a variable name from text encase the variable within double\-quotes or braces:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
echo The plural of $WORD is "$WORD"s
# Prints "The plural of cat is cats" when $WORD is set to cat.
echo The plural of $WORD is {$WORD}s
# ditto
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Note that without the quotes or braces, fish will try to expand a variable called \fB$WORDs\fP, which may not exist.
.sp
The latter syntax \fB{$WORD}\fP works by exploiting \fI\%brace expansion\fP\&.
.sp
In these cases, the expansion eliminates the string, as a result of the implicit \fI\%cartesian product\fP\&.
.sp
If, in the example above, $WORD is undefined or an empty list, the "s" is not printed. However, it is printed if $WORD is the empty string (like after \fBset WORD ""\fP).
.sp
Unlike all the other expansions, variable expansion also happens in double quoted strings. Inside double quotes (\fB"these"\fP), variables will always expand to exactly one argument. If they are empty or undefined, it will result in an empty string. If they have one element, they\(aqll expand to that element. If they have more than that, the elements will be joined with spaces [3]\&.
.sp
Outside of double quotes, variables will expand to as many arguments as they have elements. That means an empty list will expand to nothing, a variable with one element will expand to that element, and a variable with multiple elements will expand to each of those elements separately.
.sp
When two unquoted expansions directly follow each other, you need to watch out for expansions that expand to nothing. This includes undefined variables and empty lists, but also command substitutions with no output. See the \fI\%cartesian product\fP section for more information.
.sp
The \fB$\fP symbol can also be used multiple times, as a kind of "dereference" operator (the \fB*\fP in C or C++), like in the following code:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
set foo a b c
set a 10; set b 20; set c 30
for i in (seq (count $$foo))
    echo $$foo[$i]
end

# Output is:
# 10
# 20
# 30
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
When using this feature together with list brackets, the brackets will always match the innermost \fB$\fP dereference. Thus, \fB$$foo[5]\fP will always mean the fifth element of the \fBfoo\fP variable should be dereferenced, not the fifth element of the doubly dereferenced variable \fBfoo\fP\&. The latter can instead be expressed as \fB$$foo[1][5]\fP\&.
.IP [3] 5
Unlike bash or zsh, which will join with the first character of $IFS (which usually is space).
.SH CARTESIAN PRODUCTS
.sp
Lists adjacent to other lists or strings are expanded as cartesian products:
.sp
Examples:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ echo {good,bad}" apples"
good apples bad apples

>_ set \-l a x y z
>_ set \-l b 1 2 3

>_ echo $a$b
x1 y1 z1 x2 y2 z2 x3 y3 z3

>_ echo $a"\-"$b
x\-1 y\-1 z\-1 x\-2 y\-2 z\-2 x\-3 y\-3 z\-3

>_ echo {x,y,z}$b
x1 y1 z1 x2 y2 z2 x3 y3 z3

>_ echo {$b}word
1word 2word 3word

>_ echo {$c}word
# Output is an empty line
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Be careful when you try to use braces to separate variable names from text. The problem shown above can be avoided by wrapping the variable in double quotes instead of braces (\fBecho "$c"word\fP).
.sp
This also happens after \fI\%command substitution\fP\&. Therefore strings might be eliminated. This can be avoided by making the inner command return a trailing newline.
.sp
E.g.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ echo (printf \(aq%s\(aq \(aq\(aq)banana # the printf prints literally nothing
>_ echo (printf \(aq%s\en\(aq \(aq\(aq)banana # the printf prints just a newline, so the command substitution expands to an empty string
banana
# After command substitution, the previous line looks like:
>_ echo ""banana
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Examples:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ set b 1 2 3
>_ echo (echo x)$b
x1 x2 x3
.ft P
.fi
.UNINDENT
.UNINDENT
.SH INDEX RANGE EXPANSION
.sp
Sometimes it\(aqs necessary to access only some of the elements of a list, or some of the lines a command substitution outputs. Both allow this by providing a set of indices in square brackets.
.sp
Sequences of elements can be written with the range operator \(aq\fB\&..\fP\(aq. A range \(aq\fBa..b\fP\(aq (\(aqa\(aq and \(aqb\(aq being integers) is expanded into a sequence of indices \(aq\fBa a+1 a+2 ... b\fP\(aq or \(aq\fBa a\-1 a\-2 ... b\fP\(aq depending on which of \(aqa\(aq or \(aqb\(aq is higher. Negative range limits are calculated from the end of the list. If an index is too large or small it\(aqs silently clamped to one or the size of the list as appropriate.
.sp
If the end is smaller than the start, or the start is larger than the end, range expansion will go in reverse. This is unless exactly one of the given indices is negative, so the direction doesn\(aqt change if the list has fewer elements than expected.
.sp
Some examples:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
echo (seq 10)[1 2 3]
# Prints: 1 2 3

# Limit the command substitution output
echo (seq 10)[2..5]
# Uses elements from 2 to 5
# Output is: 2 3 4 5

# Use overlapping ranges:
echo (seq 10)[2..5 1..3]
# Takes elements from 2 to 5 and then elements from 1 to 3
# Output is: 2 3 4 5 1 2 3

# Reverse output
echo (seq 10)[\-1..1]
# Uses elements from the last output line to
# the first one in reverse direction
# Output is: 10 9 8 7 6 5 4 3 2 1

# The command substitution has only one line,
# so these will result in empty output:
echo (echo one)[2..\-1]
echo (echo one)[\-3..1]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The same works when setting or expanding variables:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# Reverse path variable
set PATH $PATH[\-1..1]
# or
set PATH[\-1..1] $PATH

# Use only n last items of the PATH
set n \-3
echo $PATH[$n..\-1]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Variables can be used as indices for expansion of variables, like so:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
set index 2
set letters a b c d
echo $letters[$index] # returns \(aqb\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
However using variables as indices for command substitution is currently not supported, so:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
echo (seq 5)[$index] # This won\(aqt work

set sequence (seq 5) # It needs to be written on two lines like this.
echo $sequence[$index] # returns \(aq2\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
When using indirect variable expansion with multiple \fI$\fP (\fB$$name\fP), you have to give all indices up to the variable you want to slice:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> set \-l list 1 2 3 4 5
> set \-l name list
> echo $$name[1]
1 2 3 4 5
> echo $$name[1..\-1][1..3] # or $$name[1][1..3], since $name only has one element.
1 2 3
.ft P
.fi
.UNINDENT
.UNINDENT
.SH HOME DIRECTORY EXPANSION
.sp
The \fB~\fP (tilde) character at the beginning of a parameter, followed by a username, is expanded into the home directory of the specified user. A lone \fB~\fP, or a \fB~\fP followed by a slash, is expanded into the home directory of the process owner.
.SH COMBINING DIFFERENT EXPANSIONS
.sp
All of the above expansions can be combined. If several expansions result in more than one parameter, all possible combinations are created.
.sp
When combining multiple parameter expansions, expansions are performed in the following order:
.INDENT 0.0
.IP \(bu 2
Command substitutions
.IP \(bu 2
Variable expansions
.IP \(bu 2
Bracket expansion
.IP \(bu 2
Wildcard expansion
.UNINDENT
.sp
Expansions are performed from right to left, nested bracket expansions are performed from the inside and out.
.sp
Example:
.sp
If the current directory contains the files \(aqfoo\(aq and \(aqbar\(aq, the command \fBecho a(ls){1,2,3}\fP will output \fBabar1 abar2 abar3 afoo1 afoo2 afoo3\fP\&.
.SH SHELL VARIABLE AND FUNCTION NAMES
.sp
The names given to shell objects like variables and function names are known as "identifiers". Each type of identifier has rules that define what sequences of characters are valid to use.
.sp
A variable name cannot be empty. It can contain only letters, digits, and underscores. It may begin and end with any of those characters.
.sp
A function name cannot be empty. It may not begin with a hyphen ("\-") and may not contain a slash ("/"). All other characters, including a space, are valid.
.sp
A bind mode name (e.g., \fBbind \-m abc ...\fP) is restricted to the rules for valid variable names.
.SH SHELL VARIABLES
.sp
Shell variables are named pieces of data, which can be created, deleted and their values changed and used by the user.  Variables may optionally be "exported", so that a copy of the variable is available to any subprocesses the shell creates. An exported variable is referred to as an "environment variable".
.sp
To set a variable value, use the set command. A variable name can not be empty and can contain only letters, digits, and underscores. It may begin and end with any of those characters.
.sp
Example:
.sp
To set the variable \fBsmurf_color\fP to the value \fBblue\fP, use the command \fBset smurf_color blue\fP\&.
.sp
After a variable has been set, you can use the value of a variable in the shell through \fI\%variable expansion\fP\&.
.sp
Example:
.sp
To use the value of the variable \fBsmurf_color\fP, write \fB$\fP (dollar symbol) followed by the name of the variable, like \fBecho Smurfs are usually $smurf_color\fP, which would print the result \(aqSmurfs are usually blue\(aq.
.SH VARIABLE SCOPE
.sp
There are three kinds of variables in fish: universal, global and local variables.
.INDENT 0.0
.IP \(bu 2
Universal variables are shared between all fish sessions a user is running on one computer.
.IP \(bu 2
Global variables are specific to the current fish session, but are not associated with any specific block scope, and will never be erased unless the user explicitly requests it using \fBset \-e\fP\&.
.IP \(bu 2
Local variables are specific to the current fish session, and associated with a specific block of commands, and is automatically erased when a specific block goes out of scope. A block of commands is a series of commands that begins with one of the commands \fBfor\fP, \fBwhile\fP , \fBif\fP, \fBfunction\fP, \fBbegin\fP or \fBswitch\fP, and ends with the command \fBend\fP\&.
.UNINDENT
.sp
Variables can be explicitly set to be universal with the \fB\-U\fP or \fB\-\-universal\fP switch, global with the \fB\-g\fP or \fB\-\-global\fP switch, or local with the \fB\-l\fP or \fB\-\-local\fP switch.  The scoping rules when creating or updating a variable are:
.INDENT 0.0
.IP \(bu 2
If a variable is explicitly set to a scope (universal, global or local), that setting will be honored. If a variable of the same name exists in a different scope, that variable will not be changed.
.IP \(bu 2
If a variable is not explicitly set to a scope, but has been previously defined, the variable scope is not changed.
.IP \(bu 2
If a variable is not explicitly set to a scope and has not been defined, the variable will be local to the currently executing function. Note that this is different from using the \fB\-l\fP or \fB\-\-local\fP flag. If one of those flags is used, the variable will be local to the most inner currently executing block, while without these the variable will be local to the function. If no function is executing, the variable will be global.
.UNINDENT
.sp
There may be many variables with the same name, but different scopes. When using a variable, the variable scope will be searched from the inside out, i.e. a local variable will be used rather than a global variable with the same name, a global variable will be used rather than a universal variable with the same name.
.sp
Example:
.sp
The following code will not output anything:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
begin
    # This is a nice local scope where all variables will die
    set \-l pirate \(aqThere be treasure in them thar hills\(aq
end

echo $pirate
# This will not output anything, since the pirate was local
.ft P
.fi
.UNINDENT
.UNINDENT
.SH OVERRIDING VARIABLES FOR A SINGLE COMMAND
.sp
If you want to override a variable for a single command, you can use "var=val" statements before the command:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# Call git status on another directory (can also be done via \(gagit \-C somerepo status\(ga)
GIT_DIR=somerepo git status
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Note that, unlike other shells, fish will first set the variable and then perform other expansions on the line, so:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
set foo banana
foo=gagaga echo $foo # prints gagaga, while in other shells it might print "banana"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Multiple elements can be given in a \fI\%brace expansion\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# Call bash with a reasonable default path.
PATH={/usr,}/{s,}bin bash
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This syntax is supported since fish 3.1.
.SH MORE ON UNIVERSAL VARIABLES
.sp
Universal variables are variables that are shared between all the users\(aq fish sessions on the computer. Fish stores many of its configuration options as universal variables. This means that in order to change fish settings, all you have to do is change the variable value once, and it will be automatically updated for all sessions, and preserved across computer reboots and login/logout.
.sp
To see universal variables in action, start two fish sessions side by side, and issue the following command in one of them \fBset fish_color_cwd blue\fP\&. Since \fBfish_color_cwd\fP is a universal variable, the color of the current working directory listing in the prompt will instantly change to blue on both terminals.
.sp
\fI\%Universal variables\fP are stored in the file \fB\&.config/fish/fish_variables\fP\&. Do not edit this file directly, as your edits may be overwritten. Edit the variables through fish scripts or by using fish interactively instead.
.sp
Do not append to universal variables in \fI\%config.fish\fP, because these variables will then get longer with each new shell instance. Instead, simply set them once at the command line.
.SH VARIABLE SCOPE FOR FUNCTIONS
.sp
When calling a function, all current local variables temporarily disappear. This shadowing of the local scope is needed since the variable namespace would become cluttered, making it very easy to accidentally overwrite variables from another function.
.sp
For example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function shiver
    set phrase \(aqShiver me timbers\(aq
end

function avast
    set \-\-local phrase \(aqAvast, mateys\(aq
    # Calling the shiver function here can not
    # change any variables in the local scope
    shiver
    echo $phrase
end
avast

# Outputs "Avast, mateys"
.ft P
.fi
.UNINDENT
.UNINDENT
.SH EXPORTING VARIABLES
.sp
Variables in fish can be "exported", so they will be inherited by any commands started by fish. In particular, this is necessary for variables used to configure external commands like $LESS or $GOPATH, but also for variables that contain general system settings like $PATH or $LANGUAGE. If an external command needs to know a variable, it needs to be exported.
.sp
Variables can be explicitly set to be exported with the \fB\-x\fP or \fB\-\-export\fP switch, or not exported with the \fB\-u\fP or \fB\-\-unexport\fP switch.  The exporting rules when setting a variable are identical to the scoping rules for variables:
.INDENT 0.0
.IP \(bu 2
If a variable is explicitly set to either be exported or not exported, that setting will be honored.
.IP \(bu 2
If a variable is not explicitly set to be exported or not exported, but has been previously defined, the previous exporting rule for the variable is kept.
.IP \(bu 2
Otherwise, by default, the variable will not be exported.
.IP \(bu 2
If a variable has local scope and is exported, any function called receives a _copy_ of it, so any changes it makes to the variable disappear once the function returns.
.IP \(bu 2
Global variables are accessible to functions whether they are exported or not.
.UNINDENT
.sp
As a naming convention, exported variables are in uppercase and unexported variables are in lowercase.
.SH LISTS
.sp
\fBfish\fP can store a list (or an "array" if you wish) of multiple strings inside of a variable. To access one element of a list, use the index of the element inside of square brackets, like this:
.sp
\fBecho $PATH[3]\fP
.sp
Note that list indices start at 1 in \fBfish\fP, not 0, as is more common in other languages. This is because many common Unix tools like \fBseq\fP are more suited to such use. An invalid index is silently ignored resulting in no value being substituted (not an empty string).
.sp
If you do not use any brackets, all the elements of the list will be written as separate items. This means you can easily iterate over a list using this syntax:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
for i in $PATH; echo $i is in the path; end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
To create a variable \fBsmurf\fP, containing the items \fBblue\fP and \fBsmall\fP, simply write:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
set smurf blue small
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
It is also possible to set or erase individual elements of a list:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# Set smurf to be a list with the elements \(aqblue\(aq and \(aqsmall\(aq
set smurf blue small

# Change the second element of smurf to \(aqevil\(aq
set smurf[2] evil

# Erase the first element
set \-e smurf[1]

# Output \(aqevil\(aq
echo $smurf
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If you specify a negative index when expanding or assigning to a list variable, the index will be calculated from the end of the list. For example, the index \-1 means the last index of a list.
.sp
A range of indices can be specified, see \fI\%index range expansion\fP for details.
.sp
All lists are one\-dimensional and cannot contain other lists, although it is possible to fake nested lists using the dereferencing rules of \fI\%variable expansion\fP\&.
.sp
When a list is exported as an environment variable, it is either space or colon delimited, depending on whether it is a path variable:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
set \-x smurf blue small
set \-x smurf_PATH forest mushroom
env | grep smurf

# smurf=blue small
# smurf_PATH=forest:mushroom
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBfish\fP automatically creates lists from all environment variables whose name ends in PATH, by splitting them on colons. Other variables are not automatically split.
.SH PATH VARIABLES
.sp
Path variables are a special kind of variable used to support colon\-delimited path lists including PATH, CDPATH, MANPATH, PYTHONPATH, etc. All variables that end in \fBPATH\fP (case\-sensitive) become PATH variables.
.sp
PATH variables act as normal lists, except they are are implicitly joined and split on colons.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
set MYPATH 1 2 3
echo "$MYPATH"
# 1:2:3
set MYPATH "$MYPATH:4:5"
echo $MYPATH
# 1 2 3 4 5
echo "$MYPATH"
# 1:2:3:4:5
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Variables can be marked or unmarked as PATH variables via the \fB\-\-path\fP and \fB\-\-unpath\fP options to \fBset\fP\&.
.SH SPECIAL VARIABLES
.sp
The user can change the settings of \fBfish\fP by changing the values of certain variables.
.INDENT 0.0
.IP \(bu 2
\fBPATH\fP, a list of directories in which to search for commands
.IP \(bu 2
\fBCDPATH\fP, a list of directories in which to search for the new directory for the \fBcd\fP builtin.
.IP \(bu 2
\fBLANG\fP, \fBLC_ALL\fP, \fBLC_COLLATE\fP, \fBLC_CTYPE\fP, \fBLC_MESSAGES\fP, \fBLC_MONETARY\fP, \fBLC_NUMERIC\fP and \fBLC_TIME\fP set the language option for the shell and subprograms. See the section \fI\%Locale variables\fP for more information.
.IP \(bu 2
A large number of variable starting with the prefixes \fBfish_color\fP and \fBfish_pager_color\fP\&. See \fI\%Variables for changing highlighting colors\fP for more information.
.IP \(bu 2
\fBfish_emoji_width\fP controls the computed width of certain characters, in particular emoji, whose rendered width changed in Unicode 9 and hence varies across terminal emulators. This should be set to 2 if your terminal emulator supports Unicode >= 9 and renders them double\-width, and 1 otherwise. Set this only if you see graphical glitching when printing emoji, typically it will be automatically detected.
.IP \(bu 2
\fBfish_ambiguous_width\fP controls the computed width of ambiguous\-width characters. This should be set to 1 if your terminal emulator renders these characters as single\-width (typical), or 2 if double\-width.
.IP \(bu 2
\fBfish_escape_delay_ms\fP overrides the default timeout of 30ms after seeing an escape character before giving up on matching a key binding. This is explained in the documentation for the bind builtin command. This delay facilitates using escape as a meta key.
.IP \(bu 2
\fBfish_greeting\fP, the greeting message printed on startup.
.IP \(bu 2
\fBfish_history\fP, the current history session name. If set, all subsequent commands within an
interactive fish session will be logged to a separate file identified by the value of the
variable. If unset, or set to \fBdefault\fP, the default session name "fish" is used. If set to an
empty string, history is not saved to disk (but is still available within the interactive
session).
.IP \(bu 2
\fBfish_trace\fP, if set and not empty, will cause fish to print commands before they execute, similar to \fIset \-x\fP in bash. The trace is printed to the path given by the \-\-debug\-output option to fish (stderr by default).
.IP \(bu 2
\fBfish_user_paths\fP, a list of directories that are prepended to \fBPATH\fP\&. This can be a universal variable.
.IP \(bu 2
\fBumask\fP, the current file creation mask. The preferred way to change the umask variable is through the umask function. An attempt to set umask to an invalid value will always fail.
.IP \(bu 2
\fBBROWSER\fP, the user\(aqs preferred web browser. If this variable is set, fish will use the specified browser instead of the system default browser to display the fish documentation.
.UNINDENT
.sp
\fBfish\fP also sends additional information to the user through the values of certain environment variables. The user cannot change the values of most of these variables.
.INDENT 0.0
.IP \(bu 2
\fB_\fP, the name of the currently running command (though this is deprecated, and the use of \fBstatus current\-command\fP is preferred).
.IP \(bu 2
\fBargv\fP, a list of arguments to the shell or function. \fBargv\fP is only defined when inside a function call, or if fish was invoked with a list of arguments, like \fBfish myscript.fish foo bar\fP\&. This variable can be changed by the user.
.IP \(bu 2
\fBhistory\fP, a list containing the last commands that were entered.
.IP \(bu 2
\fBHOME\fP, the user\(aqs home directory. This variable can be changed by the user.
.IP \(bu 2
\fBhostname\fP, the machine\(aqs hostname.
.IP \(bu 2
\fBIFS\fP, the internal field separator that is used for word splitting with the read builtin. Setting this to the empty string will also disable line splitting in \fI\%command substitution\fP\&. This variable can be changed by the user.
.IP \(bu 2
\fBPWD\fP, the current working directory.
.IP \(bu 2
\fBstatus\fP, the \fI\%exit status\fP of the last foreground job to exit. If the job was terminated through a signal, the exit status will be 128 plus the signal number.
.IP \(bu 2
\fBpipestatus\fP, a list of exit statuses of all processes that made up the last executed pipe.
.IP \(bu 2
\fBUSER\fP, the current username. This variable can be changed by the user.
.IP \(bu 2
\fBCMD_DURATION\fP, the runtime of the last command in milliseconds.
.IP \(bu 2
\fBversion\fP, the version of the currently running fish (also available as \fBFISH_VERSION\fP for backward compatibility).
.IP \(bu 2
\fBSHLVL\fP, the level of nesting of shells
.IP \(bu 2
\fBCOLUMNS\fP and \fBLINES\fP, the current size of the terminal in height and width. These values are only used by fish if the operating system does not report the size of the terminal. Both variables must be set in that case otherwise a default of 80x24 will be used. They are updated when the window size changes.
.UNINDENT
.sp
The names of these variables are mostly derived from the csh family of shells and differ from the ones used by Bourne style shells such as bash.
.sp
Variables whose name are in uppercase are generally exported to the commands started by fish, while those in lowercase are not exported (\fBCMD_DURATION\fP is an exception, for historical reasons). This rule is not enforced by fish, but it is good coding practice to use casing to distinguish between exported and unexported variables. \fBfish\fP also uses several variables internally. Such variables are prefixed with the string \fB__FISH\fP or \fB__fish.\fP These should never be used by the user. Changing their value may break fish.
.SH THE STATUS VARIABLE
.sp
Whenever a process exits, an exit status is returned to the program that started it (usually the shell). This exit status is an integer number, which tells the calling application how the execution of the command went. In general, a zero exit status means that the command executed without problem, but a non\-zero exit status means there was some form of problem.
.sp
Fish stores the exit status of the last process in the last job to exit in the \fBstatus\fP variable.
.sp
If \fBfish\fP encounters a problem while executing a command, the status variable may also be set to a specific value:
.INDENT 0.0
.IP \(bu 2
0 is generally the exit status of fish commands if they successfully performed the requested operation.
.IP \(bu 2
1 is generally the exit status of fish commands if they failed to perform the requested operation.
.IP \(bu 2
121 is generally the exit status of fish commands if they were supplied with invalid arguments.
.IP \(bu 2
123 means that the command was not executed because the command name contained invalid characters.
.IP \(bu 2
124 means that the command was not executed because none of the wildcards in the command produced any matches.
.IP \(bu 2
125 means that while an executable with the specified name was located, the operating system could not actually execute the command.
.IP \(bu 2
126 means that while a file with the specified name was located, it was not executable.
.IP \(bu 2
127 means that no function, builtin or command with the given name could be located.
.UNINDENT
.sp
If a process exits through a signal, the exit status will be 128 plus the number of the signal.
.SH VARIABLES FOR CHANGING HIGHLIGHTING COLORS
.sp
The colors used by fish for syntax highlighting can be configured by changing the values of a various variables. The value of these variables can be one of the colors accepted by the \fI\%set_color\fP command. The \fB\-\-bold\fP or \fB\-b\fP switches accepted by \fBset_color\fP are also accepted.
.sp
The following variables are available to change the highlighting colors in fish:
.INDENT 0.0
.IP \(bu 2
\fBfish_color_normal\fP, the default color
.IP \(bu 2
\fBfish_color_command\fP, the color for commands
.IP \(bu 2
\fBfish_color_quote\fP, the color for quoted blocks of text
.IP \(bu 2
\fBfish_color_redirection\fP, the color for IO redirections
.IP \(bu 2
\fBfish_color_end\fP, the color for process separators like \(aq;\(aq and \(aq&\(aq
.IP \(bu 2
\fBfish_color_error\fP, the color used to highlight potential errors
.IP \(bu 2
\fBfish_color_param\fP, the color for regular command parameters
.IP \(bu 2
\fBfish_color_comment\fP, the color used for code comments
.IP \(bu 2
\fBfish_color_match\fP, the color used to highlight matching parenthesis
.IP \(bu 2
\fBfish_color_selection\fP, the color used when selecting text (in vi visual mode)
.IP \(bu 2
\fBfish_color_search_match\fP, used to highlight history search matches and the selected pager item (must be a background)
.IP \(bu 2
\fBfish_color_operator\fP, the color for parameter expansion operators like \(aq*\(aq and \(aq~\(aq
.IP \(bu 2
\fBfish_color_escape\fP, the color used to highlight character escapes like \(aq\en\(aq and \(aq\ex70\(aq
.IP \(bu 2
\fBfish_color_cwd\fP, the color used for the current working directory in the default prompt
.IP \(bu 2
\fBfish_color_autosuggestion\fP, the color used for autosuggestions
.IP \(bu 2
\fBfish_color_user\fP, the color used to print the current username in some of fish default prompts
.IP \(bu 2
\fBfish_color_host\fP, the color used to print the current host system in some of fish default prompts
.IP \(bu 2
\fBfish_color_host_remote\fP, the color used to print the current host system in some of fish default prompts, if fish is running remotely (via ssh or similar)
.IP \(bu 2
\fBfish_color_cancel\fP, the color for the \(aq^C\(aq indicator on a canceled command
.UNINDENT
.sp
Additionally, the following variables are available to change the highlighting in the completion pager:
.INDENT 0.0
.IP \(bu 2
\fBfish_pager_color_progress\fP, the color of the progress bar at the bottom left corner
.IP \(bu 2
\fBfish_pager_color_background\fP, the background color of a line
.IP \(bu 2
\fBfish_pager_color_prefix\fP, the color of the prefix string, i.e. the string that is to be completed
.IP \(bu 2
\fBfish_pager_color_completion\fP, the color of the completion itself
.IP \(bu 2
\fBfish_pager_color_description\fP, the color of the completion description
.IP \(bu 2
\fBfish_pager_color_secondary_background\fP, \fBfish_pager_color_background\fP of every second unselected completion. Defaults to \fBfish_pager_color_background\fP
.IP \(bu 2
\fBfish_pager_color_secondary_ prefix\fP, \fBfish_pager_color_prefix\fP of every second unselected completion. Defaults to \fBfish_pager_color_prefix\fP
.IP \(bu 2
\fBfish_pager_color_secondary_completion\fP, \fBfish_pager_color_completion\fP of every second unselected completion. Defaults to \fBfish_pager_color_completion\fP
.IP \(bu 2
\fBfish_pager_color_secondary_description\fP, \fBfish_pager_color_description\fP of every second unselected completion. Defaults to \fBfish_pager_color_description\fP
.IP \(bu 2
\fBfish_pager_color_selected_background\fP, \fBfish_pager_color_background\fP of the selected completion. Defaults to \fBfish_color_search_match\fP
.IP \(bu 2
\fBfish_pager_color_selected_prefix\fP, \fBfish_pager_color_prefix\fP of the selected completion. Defaults to \fBfish_pager_color_prefix\fP
.IP \(bu 2
\fBfish_pager_color_selected_completion\fP, \fBfish_pager_color_completion\fP of the selected completion. Defaults to \fBfish_pager_color_completion\fP
.IP \(bu 2
\fBfish_pager_color_selected_description\fP, \fBfish_pager_color_description\fP of the selected completion. Defaults to \fBfish_pager_color_description\fP
.UNINDENT
.sp
Example:
.sp
To make errors highlighted and red, use:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
set fish_color_error red \-\-bold
.ft P
.fi
.UNINDENT
.UNINDENT
.SH LOCALE VARIABLES
.sp
The most common way to set the locale to use a command like \(aqset \-x LANG en_GB.utf8\(aq, which sets the current locale to be the English language, as used in Great Britain, using the UTF\-8 character set. For a list of available locales, use \(aqlocale \-a\(aq.
.sp
\fBLANG\fP, \fBLC_ALL\fP, \fBLC_COLLATE\fP, \fBLC_CTYPE\fP, \fBLC_MESSAGES\fP,  \fBLC_MONETARY\fP, \fBLC_NUMERIC\fP and \fBLC_TIME\fP set the language option for the shell and subprograms. These variables work as follows: \fBLC_ALL\fP forces all the aspects of the locale to the specified value. If \fBLC_ALL\fP is set, all other locale variables will be ignored. The other \fBLC_\fP variables set the specified aspect of the locale information. \fBLANG\fP is a fallback value, it will be used if none of the \fBLC_\fP variables are specified.
.SH BUILTIN COMMANDS
.sp
Many other shells have a large library of builtin commands. Most of these commands are also available as standalone commands, but have been implemented in the shell anyway. To avoid code duplication, and to avoid the confusion of subtly differing versions of the same command, \fBfish\fP generally only implements builtins for actions which cannot be performed by a regular command.
.sp
For a list of all builtins, functions and commands shipped with fish, see the list of commands\&. The documentation is also available by using the \fB\-\-help\fP switch of the command.
.sp
Fish prides itself on being really nice to use interactively. That\(aqs down to a few features we\(aqll explain in the next few sections.
.SH HELP
.sp
\fBfish\fP has an extensive help system. Use the help command to obtain help on a specific subject or command. For instance, writing \fBhelp syntax\fP displays the \fI\%syntax section\fP of this documentation.
.sp
\fBfish\fP also has man pages for its commands. For example, \fBman set\fP will show the documentation for \fBset\fP as a man page.
.sp
Help on a specific builtin can also be obtained with the \fB\-h\fP parameter. For instance, to obtain help on the \fBfg\fP builtin, either type \fBfg \-h\fP or \fBhelp fg\fP\&.
.SH AUTOSUGGESTIONS
.sp
fish suggests commands as you type, based on \fI\%command history\fP, completions, and valid file paths. As you type commands, you will see a suggestion offered after the cursor, in a muted gray color (which can be changed with the \fBfish_color_autosuggestion\fP variable).
.sp
To accept the autosuggestion (replacing the command line contents), press right arrow or \fBControl+F\fP\&. To accept the first suggested word, press \fBAlt+→,Right\fP or \fBAlt+F\fP\&. If the autosuggestion is not what you want, just ignore it: it won\(aqt execute unless you accept it.
.sp
Autosuggestions are a powerful way to quickly summon frequently entered commands, by typing the first few characters. They are also an efficient technique for navigating through directory hierarchies.
.SH TAB COMPLETION
.sp
Tab completion is one of the most time saving features of any modern shell. By tapping the tab key, the user asks \fBfish\fP to guess the rest of the command or parameter that the user is currently typing. If  \fBfish\fP can only find one possible completion, \fBfish\fP will write it out. If there is more than one completion, \fBfish\fP will write out the longest prefix that all completions have in common. If the completions differ on the first character, a list of all possible completions is printed. The list features descriptions of the completions and if the list doesn\(aqt fit the screen, it is scrollable by using the arrow keys, the page up/page down keys, the tab key or the space bar.
.sp
If the list is visible, pressing control\-S (or the \fBpager\-toggle\-search\fP binding) will allow filtering the list. Shift\-tab (or the \fBcomplete\-and\-search\fP binding) will trigger completion with the search field immediately visible.
These are the general purpose tab completions that \fBfish\fP provides:
.INDENT 0.0
.IP \(bu 2
Completion of commands (builtins, functions and regular programs).
.IP \(bu 2
Completion of shell variable names.
.IP \(bu 2
Completion of usernames for tilde expansion.
.IP \(bu 2
Completion of filenames, even on strings with wildcards such as \(aq\fB*\fP\(aq and \(aq\fB**\fP\(aq.
.UNINDENT
.sp
\fBfish\fP provides a large number of program specific completions. Most of these completions are simple options like the \fB\-l\fP option for \fBls\fP, but some are more advanced. The latter include:
.INDENT 0.0
.IP \(bu 2
The programs \fBman\fP and \fBwhatis\fP show all installed manual pages as completions.
.IP \(bu 2
The \fBmake\fP program uses all targets in the Makefile in the current directory as completions.
.IP \(bu 2
The \fBmount\fP command uses all mount points specified in fstab as completions.
.IP \(bu 2
The \fBssh\fP command uses all hosts that are stored in the known_hosts file as completions. (See the ssh documentation for more information)
.IP \(bu 2
The \fBsu\fP command uses all users on the system as completions.
.IP \(bu 2
The \fBapt\-get\fP, \fBrpm\fP and \fByum\fP commands use all installed packages as completions.
.UNINDENT
.SH WRITING YOUR OWN COMPLETIONS
.sp
To specify a completion, use the \fBcomplete\fP command. \fBcomplete\fP takes as a parameter the name of the command to specify a completion for. For example, to add a completion for the program \fBmyprog\fP, one would start the completion command with \fBcomplete \-c myprog ...\fP
.sp
To provide a list of possible completions for myprog, use the \fB\-a\fP switch. If \fBmyprog\fP accepts the arguments start and stop, this can be specified as \fBcomplete \-c myprog \-a \(aqstart stop\(aq\fP\&. The argument to the \fB\-a\fP switch is always a single string. At completion time, it will be tokenized on spaces and tabs, and variable expansion, command substitution and other forms of parameter expansion will take place.
.sp
\fBfish\fP has a special syntax to support specifying switches accepted by a command. The switches \fB\-s\fP, \fB\-l\fP and \fB\-o\fP are used to specify a short switch (single character, such as \fB\-l\fP), a gnu style long switch (such as \(aq\fB\-\-color\fP\(aq) and an old\-style long switch (like \(aq\fB\-shuffle\fP\(aq), respectively. If the command \(aqmyprog\(aq has an option \(aq\-o\(aq which can also be written as \(aq\fB\-\-output\fP\(aq, and which can take an additional value of either \(aqyes\(aq or \(aqno\(aq, this can be specified by writing:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
complete \-c myprog \-s o \-l output \-a "yes no"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
There are also special switches for specifying that a switch requires an argument, to disable filename completion, to create completions that are only available in some combinations, etc..  For a complete description of the various switches accepted by the \fBcomplete\fP command, see the documentation for the complete builtin, or write \fBcomplete \-\-help\fP inside the \fBfish\fP shell.
.sp
As a more comprehensive example, here\(aqs a commented excerpt of the completions for systemd\(aqs \fBtimedatectl\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# All subcommands that timedatectl knows \- this is useful for later.
set \-l commands status set\-time set\-timezone list\-timezones set\-local\-rtc set\-ntp

# Disable file completions for the entire command
# because it does not take files anywhere
# Note that this can be undone by using "\-F".
#
# File completions also need to be disabled
# if you want to have more control over what files are offered (e.g. just directories, or just files ending in ".mp3").
complete \-c timedatectl \-f

# This line offers the subcommands
# \-"status",
# \-"set\-timezone",
# \-"set\-time"
# \-"list\-timezones"
# if no subcommand has been given so far.
#
# The \(ga\-n\(ga/\(ga\-\-condition\(ga option takes script as a string, which it executes.
# If it returns true, the completion is offered.
# Here the condition is the \(ga__fish_seen_subcommands_from\(ga helper function.
# If returns true if any of the given commands is used on the commandline,
# as determined by a simple heuristic.
# For more complex uses, you can write your own function.
# See e.g. the git completions for an example.
#
complete \-c timedatectl \-n "not __fish_seen_subcommand_from $commands" \-a "status set\-time set\-timezone list\-timezones"

# If the "set\-timezone" subcommand is used,
# offer the output of \(gatimedatectl list\-timezones\(ga as completions.
# Each line of output is used as a separate candidate,
# and anything after a tab is taken as the description.
# It\(aqs often useful to transform command output with \(gastring\(ga into that form.
complete \-c timedatectl \-n "__fish_seen_subcommand_from set\-timezone" \-a "(timedatectl list\-timezones)"

# Completion candidates can also be described via \(ga\-d\(ga,
# which is useful if the description is constant.
# Try to keep these short, because that means the user gets to see more at once.
complete \-c timedatectl \-n "not __fish_seen_subcommand_from $commands" \-a "set\-local\-rtc" \-d "Maintain RTC in local time"

# We can also limit options to certain subcommands by using conditions.
complete \-c timedatectl \-n "__fish_seen_subcommand_from set\-local\-rtc" \-l adjust\-system\-clock \-d \(aqSynchronize system clock from the RTC\(aq

# These are simple options that can be used everywhere.
complete \-c timedatectl \-s h \-l help \-d \(aqPrint a short help text and exit\(aq
complete \-c timedatectl \-l version \-d \(aqPrint a short version string and exit\(aq
complete \-c timedatectl \-l no\-pager \-d \(aqDo not pipe output into a pager\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
For examples of how to write your own complex completions, study the completions in \fB/usr/share/fish/completions\fP\&. (The exact path depends on your chosen installation prefix and may be slightly different)
.SH USEFUL FUNCTIONS FOR WRITING COMPLETIONS
.sp
\fBfish\fP ships with several functions that are very useful when writing command specific completions. Most of these functions name begins with the string \(aq\fB__fish_\fP\(aq. Such functions are internal to \fBfish\fP and their name and interface may change in future fish versions. Still, some of them may be very useful when writing completions. A few of these functions are described here. Be aware that they may be removed or changed in future versions of fish.
.sp
Functions beginning with the string \fB__fish_print_\fP print a newline separated list of strings. For example, \fB__fish_print_filesystems\fP prints a list of all known file systems. Functions beginning with \fB__fish_complete_\fP print out a newline separated list of completions with descriptions. The description is separated from the completion by a tab character.
.INDENT 0.0
.IP \(bu 2
\fB__fish_complete_directories STRING DESCRIPTION\fP performs path completion on STRING, allowing only directories, and giving them the description DESCRIPTION.
.IP \(bu 2
\fB__fish_complete_path STRING DESCRIPTION\fP performs path completion on STRING, giving them the description DESCRIPTION.
.IP \(bu 2
\fB__fish_complete_groups\fP prints a list of all user groups with the groups members as description.
.IP \(bu 2
\fB__fish_complete_pids\fP prints a list of all processes IDs with the command name as description.
.IP \(bu 2
\fB__fish_complete_suffix SUFFIX\fP performs file completion allowing only files ending in SUFFIX, with an optional description.
.IP \(bu 2
\fB__fish_complete_users\fP prints a list of all users with their full name as description.
.IP \(bu 2
\fB__fish_print_filesystems\fP prints a list of all known file systems. Currently, this is a static list, and not dependent on what file systems the host operating system actually understands.
.IP \(bu 2
\fB__fish_print_hostnames\fP prints a list of all known hostnames. This functions searches the fstab for nfs servers, ssh for known hosts and checks the \fB/etc/hosts\fP file.
.IP \(bu 2
\fB__fish_print_interfaces\fP prints a list of all known network interfaces.
.IP \(bu 2
\fB__fish_print_packages\fP prints a list of all installed packages. This function currently handles Debian, rpm and Gentoo packages.
.UNINDENT
.SH WHERE TO PUT COMPLETIONS
.sp
Completions can be defined on the commandline or in a configuration file, but they can also be automatically loaded. Fish automatically searches through any directories in the list variable \fB$fish_complete_path\fP, and any completions defined are automatically loaded when needed. A completion file must have a filename consisting of the name of the command to complete and the suffix \(aq\fB\&.fish\fP\(aq.
.sp
By default, Fish searches the following for completions, using the first available file that it finds:
.INDENT 0.0
.IP \(bu 2
A directory for end\-users to keep their own completions, usually \fB~/.config/fish/completions\fP (controlled by the \fBXDG_CONFIG_HOME\fP environment variable);
.IP \(bu 2
A directory for systems administrators to install completions for all users on the system, usually \fB/etc/fish/completions\fP;
.IP \(bu 2
Directories for third\-party software vendors to ship their own completions for their software. Fish searches the directories in the \fBXDG_DATA_DIRS\fP environment variable for a \fBfish/vendor_completions.d\fP directory; if this variable is not defined, the default is usually to search \fB/usr/share/fish/vendor_completions.d\fP and \fB/usr/local/share/fish/vendor_completions.d\fP;
.IP \(bu 2
The completions shipped with fish, usually installed in \fB/usr/share/fish/completions\fP; and
.IP \(bu 2
Completions automatically generated from the operating system\(aqs manuals, usually stored in \fB~/.local/share/fish/generated_completions\fP\&.
.UNINDENT
.sp
These paths are controlled by parameters set at build, install, or run time, and may vary from the defaults listed above.
.sp
This wide search may be confusing. If you are unsure, your completions probably belong in \fB~/.config/fish/completions\fP\&.
.sp
If you have written new completions for a common Unix command, please consider sharing your work by submitting it via the instructions in \fI\%Further help and development\fP\&.
.sp
If you are developing another program and would like to ship completions with your program, install them to the "vendor" completions directory. As this path may vary from system to system, the pkgconfig framework should be used to discover this path with the output of \fBpkg\-config \-\-variable completionsdir fish\fP\&. Your installation system should support a custom path to override the pkgconfig path, as other distributors may need to alter it easily.
.sp
The \fBfish\fP editor features copy and paste, a \fI\%searchable history\fP and many editor functions that can be bound to special keyboard shortcuts.
.sp
Similar to bash, fish has Emacs and Vi editing modes. The default editing mode is Emacs. You can switch to Vi mode with \fBfish_vi_key_bindings\fP and switch back with \fBfish_default_key_bindings\fP\&. You can also make your own key bindings by creating a function and setting $fish_key_bindings to its name. For example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function hybrid_bindings \-\-description "Vi\-style bindings that inherit emacs\-style bindings in all modes"
    for mode in default insert visual
        fish_default_key_bindings \-M $mode
    end
    fish_vi_key_bindings \-\-no\-erase
end
set \-g fish_key_bindings hybrid_bindings
.ft P
.fi
.UNINDENT
.UNINDENT
.SH SHARED BINDINGS
.sp
Some bindings are shared between emacs\- and vi\-mode because they aren\(aqt text editing bindings or because what Vi/Vim does for a particular key doesn\(aqt make sense for a shell.
.INDENT 0.0
.IP \(bu 2
\fBTab\fP \fI\%completes\fP the current token. \fBShift, Tab\fP completes the current token and starts the pager\(aqs search mode.
.IP \(bu 2
\fBAlt+←,Left\fP and \fBAlt+→,Right\fP move the cursor one word left or right (to the next space or punctuation mark), or moves forward/backward in the directory history if the command line is empty. If the cursor is already at the end of the line, and an autosuggestion is available, \fBAlt+→,Right\fP (or \fBAlt+F\fP) accepts the first word in the suggestion.
.IP \(bu 2
\fBShift,←,Left\fP and \fBShift,→,Right\fP move the cursor one word left or right, without stopping on punctuation.
.IP \(bu 2
\fB↑\fP (Up) and \fB↓\fP (Down) (or \fBControl+P\fP and \fBControl+N\fP for emacs aficionados) search the command history for the previous/next command containing the string that was specified on the commandline before the search was started. If the commandline was empty when the search started, all commands match. See the \fI\%history\fP section for more information on history searching.
.IP \(bu 2
\fBAlt+↑,Up\fP and \fBAlt+↓,Down\fP search the command history for the previous/next token containing the token under the cursor before the search was started. If the commandline was not on a token when the search started, all tokens match. See the \fI\%history\fP section for more information on history searching.
.IP \(bu 2
\fBControl+C\fP cancels the entire line.
.IP \(bu 2
\fBControl+D\fP delete one character to the right of the cursor. If the command line is empty, \fBControl+D\fP will exit fish.
.IP \(bu 2
\fBControl+U\fP moves contents from the beginning of line to the cursor to the \fI\%killring\fP\&.
.IP \(bu 2
\fBControl+L\fP clears and repaints the screen.
.IP \(bu 2
\fBControl+W\fP moves the previous path component (everything up to the previous "/", ":" or "@") to the \fI\%killring\fP\&.
.IP \(bu 2
\fBControl+X\fP copies the current buffer to the system\(aqs clipboard, \fBControl+V\fP inserts the clipboard contents.
.IP \(bu 2
\fBAlt+d\fP moves the next word to the \fI\%killring\fP\&.
.IP \(bu 2
\fBAlt+h\fP (or \fBF1\fP) shows the manual page for the current command, if one exists.
.IP \(bu 2
\fBAlt+l\fP lists the contents of the current directory, unless the cursor is over a directory argument, in which case the contents of that directory will be listed.
.IP \(bu 2
\fBAlt+p\fP adds the string \(aq\fB| less;\fP\(aq to the end of the job under the cursor. The result is that the output of the command will be paged.
.IP \(bu 2
\fBAlt+w\fP prints a short description of the command under the cursor.
.IP \(bu 2
\fBAlt+e\fP edit the current command line in an external editor. The editor is chosen from the first available of the \fB$VISUAL\fP or \fB$EDITOR\fP variables.
.IP \(bu 2
\fBAlt+v\fP Same as \fBAlt+e\fP\&.
.IP \(bu 2
\fBAlt+s\fP Prepends \fIsudo\fP to the current commandline.
.UNINDENT
.SH EMACS MODE COMMANDS
.INDENT 0.0
.IP \(bu 2
\fBHome\fP or \fBControl+A\fP moves the cursor to the beginning of the line.
.IP \(bu 2
\fBEnd\fP or \fBControl+E\fP moves to the end of line. If the cursor is already at the end of the line, and an autosuggestion is available, \fBEnd\fP or \fBControl+E\fP accepts the autosuggestion.
.IP \(bu 2
\fB←\fP (Left) (or \fBControl+B\fP) and \fB→\fP (Right) (or \fBControl+F\fP) move the cursor left or right by one character. If the cursor is already at the end of the line, and an autosuggestion is available, the \fB→\fP (Right) key and the \fBControl+F\fP combination accept the suggestion.
.IP \(bu 2
\fBDelete\fP and \fBBackspace\fP removes one character forwards or backwards respectively.
.IP \(bu 2
\fBControl+K\fP moves contents from the cursor to the end of line to the \fI\%killring\fP\&.
.IP \(bu 2
\fBAlt+c\fP capitalizes the current word.
.IP \(bu 2
\fBAlt+u\fP makes the current word uppercase.
.IP \(bu 2
\fBControl+t\fP transposes the last two characters
.IP \(bu 2
\fBAlt+t\fP transposes the last two words
.UNINDENT
.sp
You can change these key bindings using the bind builtin.
.SH VI MODE COMMANDS
.sp
Vi mode allows for the use of Vi\-like commands at the prompt. Initially, \fI\%insert mode\fP is active. \fBEscape\fP enters \fI\%command mode\fP\&. The commands available in command, insert and visual mode are described below. Vi mode shares \fI\%some bindings\fP with \fI\%Emacs mode\fP\&.
.sp
It is also possible to add all emacs\-mode bindings to vi\-mode by using something like:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function fish_user_key_bindings
    # Execute this once per mode that emacs bindings should be used in
    fish_default_key_bindings \-M insert
    # Without an argument, fish_vi_key_bindings will default to
    # resetting all bindings.
    # The argument specifies the initial mode (insert, "default" or visual).
    fish_vi_key_bindings insert
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
When in vi\-mode, the fish_mode_prompt function will display a mode indicator to the left of the prompt. To disable this feature, override it with an empty function. To display the mode elsewhere (like in your right prompt), use the output of the \fBfish_default_mode_prompt\fP function.
.sp
When a binding switches the mode, it will repaint the mode\-prompt if it exists, and the rest of the prompt only if it doesn\(aqt. So if you want a mode\-indicator in your \fBfish_prompt\fP, you need to erase \fBfish_mode_prompt\fP e.g. by adding an empty file at \fI~/.config/fish/functions/fish_mode_prompt.fish\fP\&. (Bindings that change the mode are supposed to call the \fIrepaint\-mode\fP bind function, see bind)
.sp
The \fBfish_vi_cursor\fP function will be used to change the cursor\(aqs shape depending on the mode in supported terminals. The following snippet can be used to manually configure cursors after enabling vi\-mode:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# Emulates vim\(aqs cursor shape behavior
# Set the normal and visual mode cursors to a block
set fish_cursor_default block
# Set the insert mode cursor to a line
set fish_cursor_insert line
# Set the replace mode cursor to an underscore
set fish_cursor_replace_one underscore
# The following variable can be used to configure cursor shape in
# visual mode, but due to fish_cursor_default, is redundant here
set fish_cursor_visual block
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Additionally, \fBblink\fP can be added after each of the cursor shape parameters to set a blinking cursor in the specified shape.
.SH COMMAND MODE
.sp
Command mode is also known as normal mode.
.INDENT 0.0
.IP \(bu 2
\fBh\fP moves the cursor left.
.IP \(bu 2
\fBl\fP moves the cursor right.
.IP \(bu 2
\fBi\fP enters \fI\%insert mode\fP at the current cursor position.
.IP \(bu 2
\fBv\fP enters \fI\%visual mode\fP at the current cursor position.
.IP \(bu 2
\fBa\fP enters \fI\%insert mode\fP after the current cursor position.
.IP \(bu 2
\fBShift,A\fP enters \fI\%insert mode\fP at the end of the line.
.IP \(bu 2
\fB0\fP (zero) moves the cursor to beginning of line (remaining in command mode).
.IP \(bu 2
\fBd\fP\fBd\fP deletes the current line and moves it to the \fI\%killring\fP\&.
.IP \(bu 2
\fBShift,D\fP deletes text after the current cursor position and moves it to the \fI\%killring\fP\&.
.IP \(bu 2
\fBp\fP pastes text from the \fI\%killring\fP\&.
.IP \(bu 2
\fBu\fP search history backwards.
.IP \(bu 2
\fB[\fP and \fB]\fP search the command history for the previous/next token containing the token under the cursor before the search was started. See the \fI\%history\fP section for more information on history searching.
.IP \(bu 2
\fBBackspace\fP moves the cursor left.
.UNINDENT
.SH INSERT MODE
.INDENT 0.0
.IP \(bu 2
\fBEscape\fP enters \fI\%command mode\fP\&.
.IP \(bu 2
\fBBackspace\fP removes one character to the left.
.UNINDENT
.SH VISUAL MODE
.INDENT 0.0
.IP \(bu 2
\fB←\fP (Left) and \fB→\fP (Right) extend the selection backward/forward by one character.
.IP \(bu 2
\fBb\fP and \fBw\fP extend the selection backward/forward by one word.
.IP \(bu 2
\fBd\fP and \fBx\fP move the selection to the \fI\%killring\fP and enter \fI\%command mode\fP\&.
.IP \(bu 2
\fBEscape\fP and \fBControl+C\fP enter \fI\%command mode\fP\&.
.UNINDENT
.SH COPY AND PASTE (KILL RING)
.sp
\fBfish\fP uses an Emacs\-style kill ring for copy and paste functionality. For example, use \fBControl+K\fP (\fIkill\-line\fP) to cut from the current cursor position to the end of the line. The string that is cut (a.k.a. killed in emacs\-ese) is inserted into a list of kills, called the kill ring. To paste the latest value from the kill ring (emacs calls this "yanking") use \fBControl+Y\fP (the \fIyank\fP input function). After pasting, use \fBAlt+Y\fP (\fIyank\-pop\fP) to rotate to the previous kill.
.sp
Copy and paste from outside are also supported, both via the \fBControl+X\fP / \fBControl+V\fP bindings (the \fIfish_clipboard_copy\fP and \fIfish_clipboard_paste\fP functions [4]) and via the terminal\(aqs paste function, for which fish enables "Bracketed Paste Mode", so it can tell a paste from manually entered text.
In addition, when pasting inside single quotes, pasted single quotes and backslashes are automatically escaped so that the result can be used as a single token simply by closing the quote after.
.IP [4] 5
These rely on external tools. Currently xsel, xclip, wl\-copy/wl\-paste and pbcopy/pbpaste are supported.
.SH SEARCHABLE HISTORY
.sp
After a command has been entered, it is inserted at the end of a history list. Any duplicate history items are automatically removed. By pressing the up and down keys, the user can search forwards and backwards in the history. If the current command line is not empty when starting a history search, only the commands containing the string entered into the command line are shown.
.sp
By pressing \fBAlt+↑,Up\fP and \fBAlt+↓,Down\fP, a history search is also performed, but instead of searching for a complete commandline, each commandline is broken into separate elements just like it would be before execution, and the history is searched for an element matching that under the cursor.
.sp
History searches can be aborted by pressing the escape key.
.sp
Prefixing the commandline with a space will prevent the entire line from being stored in the history.
.sp
The command history is stored in the file \fB~/.local/share/fish/fish_history\fP (or
\fB$XDG_DATA_HOME/fish/fish_history\fP if that variable is set) by default. However, you can set the
\fBfish_history\fP environment variable to change the name of the history session (resulting in a
\fB<session>_history\fP file); both before starting the shell and while the shell is running.
.sp
See the history command for other manipulations.
.sp
Examples:
.sp
To search for previous entries containing the word \(aqmake\(aq, type \fBmake\fP in the console and press the up key.
.sp
If the commandline reads \fBcd m\fP, place the cursor over the \fBm\fP character and press \fBAlt+↑,Up\fP to search for previously typed words containing \(aqm\(aq.
.SH MULTILINE EDITING
.sp
The fish commandline editor can be used to work on commands that are several lines long. There are three ways to make a command span more than a single line:
.INDENT 0.0
.IP \(bu 2
Pressing the \fBEnter\fP key while a block of commands is unclosed, such as when one or more block commands such as \fBfor\fP, \fBbegin\fP or \fBif\fP do not have a corresponding \fBend\fP command.
.IP \(bu 2
Pressing \fBAlt+Enter\fP instead of pressing the \fBEnter\fP key.
.IP \(bu 2
By inserting a backslash (\fB\e\fP) character before pressing the \fBEnter\fP key, escaping the newline.
.UNINDENT
.sp
The fish commandline editor works exactly the same in single line mode and in multiline mode. To move between lines use the left and right arrow keys and other such keyboard shortcuts.
.sp
Normally when \fBfish\fP starts a program, this program will be put in the foreground, meaning it will take control of the terminal and \fBfish\fP will be stopped until the program finishes. Sometimes this is not desirable. For example, you may wish to start an application with a graphical user interface from the terminal, and then be able to continue using the shell. In such cases, there are several ways in which the user can change fish\(aqs behavior.
.INDENT 0.0
.IP \(bu 2
By ending a command with the \fB&\fP (ampersand) symbol, the user tells \fBfish\fP to put the specified command into the background. A background process will be run simultaneous with \fBfish\fP\&. \fBfish\fP will retain control of the terminal, so the program will not be able to read from the keyboard.
.IP \(bu 2
By pressing \fBControl+Z\fP, the user stops a currently running foreground  program and returns control to \fBfish\fP\&. Some programs do not support this feature, or remap it to another key. GNU Emacs uses \fBControl+X\fP \fBz\fP to stop running.
.IP \(bu 2
By using the bg and fg builtin commands, the user can send any currently running job into the foreground or background.
.UNINDENT
.sp
Note that functions cannot be started in the background. Functions that are stopped and then restarted in the background using the \fBbg\fP command will not execute correctly.
.sp
On startup, Fish evaluates a number of configuration files, which can be used to control the behavior of the shell. The location of these is controlled by a number of environment variables, and their default or usual location is given below.
.sp
Configuration files are evaluated in the following order:
.INDENT 0.0
.IP \(bu 2
Configuration shipped with fish, which should not be edited, in \fB$__fish_data_dir/config.fish\fP (usually \fB/usr/share/fish/config.fish\fP).
.IP \(bu 2
Configuration snippets in files ending in \fB\&.fish\fP, in the directories:
.INDENT 2.0
.IP \(bu 2
\fB$__fish_config_dir/conf.d\fP (by default, \fB~/.config/fish/conf.d/\fP)
.IP \(bu 2
\fB$__fish_sysconf_dir/conf.d\fP (by default, \fB/etc/fish/conf.d/\fP)
.IP \(bu 2
Directories for third\-party software vendors to ship their own configuration snippets for their software. Fish searches the directories in the \fBXDG_DATA_DIRS\fP environment variable for a \fBfish/vendor_conf.d\fP directory; if this variable is not defined, the default is usually to search \fB/usr/share/fish/vendor_conf.d\fP and \fB/usr/local/share/fish/vendor_conf.d\fP
.UNINDENT
.sp
If there are multiple files with the same name in these directories, only the first will be executed.
They are executed in order of their filename, sorted (like globs) in a natural order (i.e. "01" sorts before "2").
.IP \(bu 2
System\-wide configuration files, where administrators can include initialization that should be run for all users on the system \- similar to \fB/etc/profile\fP for POSIX\-style shells \- in \fB$__fish_sysconf_dir\(ga (usually /etc/fish/config.fish\fP);
.IP \(bu 2
User initialization, usually in \fI~/.config/fish/config.fish\fP (controlled by the \fBXDG_CONFIG_HOME\fP environment variable, and accessible as \fB$__fish_config_dir\fP).
.UNINDENT
.sp
These paths are controlled by parameters set at build, install, or run time, and may vary from the defaults listed above.
.sp
This wide search may be confusing. If you are unsure where to put your own customisations, use \fI~/.config/fish/config.fish\fP\&.
.sp
Note that ~/.config/fish/config.fish is sourced _after_ the snippets. This is so users can copy snippets and override some of their behavior.
.sp
These files are all executed on the startup of every shell. If you want to run a command only on starting an interactive shell, use the exit status of the command \fIstatus \-\-is\-interactive\fP to determine if the shell is interactive. If you want to run a command only when using a login shell, use \fIstatus \-\-is\-login\fP instead. This will speed up the starting of non\-interactive or non\-login shells.
.sp
If you are developing another program, you may wish to install configuration which is run for all users of the fish shell on a system. This is discouraged; if not carefully written, they may have side\-effects or slow the startup of the shell. Additionally, users of other shells will not benefit from the Fish\-specific configuration. However, if they are absolutely required, you may install them to the "vendor" configuration directory. As this path may vary from system to system, the \fBpkgconfig\fP framework should be used to discover this path with the output of \fIpkg\-config \-\-variable confdir fish\fP\&.
.sp
Examples:
.sp
If you want to add the directory \fB~/linux/bin\fP to your PATH variable when using a login shell, add the following to your \fI~/.config/fish/config.fish\fP file:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
if status \-\-is\-login
    set \-x PATH $PATH ~/linux/bin
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If you want to run a set of commands when \fBfish\fP exits, use an \fI\%event handler\fP that is triggered by the exit of the shell:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function on_exit \-\-on\-event fish_exit
    echo fish is now exiting
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Feature flags are how fish stages changes that might break scripts. Breaking changes are introduced as opt\-in, in a few releases they become opt\-out, and eventually the old behavior is removed.
.sp
You can see the current list of features via \fBstatus features\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> status features
stderr\-nocaret  on     3.0      ^ no longer redirects stderr
qmark\-noglob    off    3.0      ? no longer globs
regex\-easyesc   off    3.1      string replace \-r needs fewer \e\e\(aqs
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
There are two breaking changes in fish 3.0: caret \fB^\fP no longer redirects stderr, and question mark \fB?\fP is no longer a glob.
.sp
There is one breaking change in fish 3.1: \fBstring replace \-r\fP does a superfluous round of escaping for the replacement, so escaping backslashes would look like \fBstring replace \-ra \(aq([ab])\(aq \(aq\e\e\e\e\e\e\e$1\(aq a\fP\&. This flag removes that if turned on, so \fB\(aq\e\e\e\e$1\(aq\fP is enough.
.sp
These changes are off by default. They can be enabled on a per session basis:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> fish \-\-features qmark\-noglob,stderr\-nocaret
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
or opted into globally for a user:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> set \-U fish_features stderr\-nocaret qmark\-noglob
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Features will only be set on startup, so this variable will only take effect if it is universal or exported.
.sp
You can also use the version as a group, so \fB3.0\fP is equivalent to "stderr\-nocaret" and "qmark\-noglob".
.sp
Prefixing a feature with \fBno\-\fP turns it off instead.
.. _other:
.SH SYNTAX HIGHLIGHTING
.sp
\fBfish\fP interprets the command line as it is typed and uses syntax highlighting to provide feedback to the user. The most important feedback is the detection of potential errors. By default, errors are marked red.
.sp
Detected errors include:
.INDENT 0.0
.IP \(bu 2
Non existing commands.
.IP \(bu 2
Reading from or appending to a non existing file.
.IP \(bu 2
Incorrect use of output redirects
.IP \(bu 2
Mismatched parenthesis
.UNINDENT
.sp
When the cursor is over a parenthesis or a quote, \fBfish\fP also highlights its matching quote or parenthesis.
.sp
To customize the syntax highlighting, you can set the environment variables listed in the \fI\%Variables for changing highlighting colors\fP section.
.SH PROGRAMMABLE TITLE
.sp
When using most virtual terminals, it is possible to set the message displayed in the titlebar of the terminal window. This can be done automatically in fish by defining the \fBfish_title\fP function. The \fBfish_title\fP function is executed before and after a new command is executed or put into the foreground and the output is used as a titlebar message. The \fIstatus current\-command\fP builtin will always return the name of the job to be put into the foreground (or \(aqfish\(aq if control is returning to the shell) when the \fBfish_prompt\fP function is called. The first argument to fish_title will contain the most recently executed foreground command as a string, starting with fish 2.2.
.sp
Examples:
The default \fBfish\fP title is:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function fish_title
    echo (status current\-command) \(aq \(aq
    pwd
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
To show the last command in the title:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function fish_title
    echo $argv[1]
end
.ft P
.fi
.UNINDENT
.UNINDENT
.SH PROGRAMMABLE PROMPT
.sp
When fish waits for input, it will display a prompt by evaluating the \fBfish_prompt\fP and \fIfish_right_prompt\fP functions. The output of the former is displayed on the left and the latter\(aqs output on the right side of the terminal. The output of \fBfish_mode_prompt\fP will be prepended on the left, though the default function only does this when in \fI\%vi\-mode\fP\&.
.SH CONFIGURABLE GREETING
.sp
If a function named \fBfish_greeting\fP exists, it will be run when entering interactive mode. Otherwise, if an environment variable named \fBfish_greeting\fP exists, it will be printed.
.SH PRIVATE MODE
.sp
fish supports launching in private mode via \fBfish \-\-private\fP (or \fBfish \-P\fP for short). In private mode, old history is not available and any interactive commands you execute will not be appended to the global history file, making it useful both for avoiding inadvertently leaking personal information (e.g. for screencasts) and when dealing with sensitive information to prevent it being persisted to disk. You can query the global variable \fIfish_private_mode\(ga\fP (\fBif set \-q fish_private_mode ...\fP) if you would like to respect the user\(aqs wish for privacy and alter the behavior of your own fish scripts.
.SH EVENT HANDLERS
.sp
When defining a new function in fish, it is possible to make it into an event handler, i.e. a function that is automatically run when a specific event takes place. Events that can trigger a handler currently are:
.INDENT 0.0
.IP \(bu 2
When a signal is delivered
.IP \(bu 2
When a process or job exits
.IP \(bu 2
When the value of a variable is updated
.IP \(bu 2
When the prompt is about to be shown
.IP \(bu 2
When a command lookup fails
.UNINDENT
.sp
Example:
.sp
To specify a signal handler for the WINCH signal, write:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function my_signal_handler \-\-on\-signal WINCH
    echo Got WINCH signal!
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Please note that event handlers only become active when a function is loaded, which means you might need to otherwise source or execute a function instead of relying on \fI\%autoloading\fP\&. One approach is to put it into your \fI\%initialization file\fP\&.
.sp
For more information on how to define new event handlers, see the documentation for the function command.
.SH DEBUGGING FISH SCRIPTS
.sp
Fish includes a built in debugging facility. The debugger allows you to stop execution of a script at an arbitrary point. When this happens you are presented with an interactive prompt. At this prompt you can execute any fish command (there are no debug commands as such). For example, you can check or change the value of any variables using \fBprintf\fP and \fBset\fP\&. As another example, you can run \fBstatus print\-stack\-trace\fP to see how this breakpoint was reached. To resume normal execution of the script, simply type \fBexit\fP or [ctrl\-D].
.sp
To start a debug session simply run the builtin command \fBbreakpoint\fP at the point in a function or script where you wish to gain control. Also, the default action of the TRAP signal is to call this builtin. So a running script can be debugged by sending it the TRAP signal with the \fBkill\fP command. Once in the debugger, it is easy to insert new breakpoints by using the funced function to edit the definition of a function.
.sp
If you have a question not answered by this documentation, there are several avenues for help:
.INDENT 0.0
.IP \(bu 2
The official mailing list at \fI\%fish\-users@lists.sourceforge.net\fP
.IP \(bu 2
The Internet Relay Chat channel, #fish on \fBirc.oftc.net\fP
.IP \(bu 2
The \fI\%project GitHub page\fP
.UNINDENT
.sp
If you have an improvement for fish, you can submit it via the mailing list or the GitHub page.
.SH COMMANDS
.sp
fish ships with the following commands:
.SS abbr \- manage fish abbreviations
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
abbr \-\-add [SCOPE] WORD EXPANSION
abbr \-\-erase word
abbr \-\-rename [SCOPE] OLD_WORD NEW_WORD
abbr \-\-show
abbr \-\-list
abbr \-\-query WORD...
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBabbr\fP manages abbreviations \- user\-defined words that are replaced with longer phrases after they are entered.
.sp
For example, a frequently\-run command like \fBgit checkout\fP can be abbreviated to \fBgco\fP\&. After entering \fBgco\fP and pressing \fBSpace\fP or \fBEnter\fP, the full text \fBgit checkout\fP will appear in the command line.
.SS Options
.sp
The following options are available:
.INDENT 0.0
.IP \(bu 2
\fB\-a WORD EXPANSION\fP or \fB\-\-add WORD EXPANSION\fP Adds a new abbreviation, causing WORD to be expanded to PHRASE.
.IP \(bu 2
\fB\-r OLD_WORD NEW_WORD\fP or \fB\-\-rename OLD_WORD NEW_WORD\fP Renames an abbreviation, from OLD_WORD to NEW_WORD.
.IP \(bu 2
\fB\-s\fP or \fB\-\-show\fP Show all abbreviations in a manner suitable for export and import.
.IP \(bu 2
\fB\-l\fP or \fB\-\-list\fP Lists all abbreviated words.
.IP \(bu 2
\fB\-e WORD\fP or \fB\-\-erase WORD\fP Erase the abbreviation WORD.
.IP \(bu 2
\fB\-q\fP or \fB\-\-query\fP Return 0 (true) if one of the WORDs is an abbreviation.
.UNINDENT
.sp
In addition, when adding abbreviations:
.INDENT 0.0
.IP \(bu 2
\fB\-g\fP or \fB\-\-global\fP to use a global variable.
.IP \(bu 2
\fB\-U\fP or \fB\-\-universal\fP to use a universal variable (default).
.UNINDENT
.sp
See the "Internals" section for more on them.
.SS Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
abbr \-a \-g gco git checkout
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Add a new abbreviation where \fBgco\fP will be replaced with \fBgit checkout\fP global to the current shell. This abbreviation will not be automatically visible to other shells unless the same command is run in those shells (such as when executing the commands in config.fish).
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
abbr \-a \-U l less
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Add a new abbreviation where \fBl\fP will be replaced with \fBless\fP universal so all shells. Note that you omit the \fB\-U\fP since it is the default.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
abbr \-r gco gch
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Renames an existing abbreviation from \fBgco\fP to \fBgch\fP\&.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
abbr \-e gco
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Erase the \fBgco\fP abbreviation.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ssh another_host abbr \-s | source
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Import the abbreviations defined on another_host over SSH.
.SS Internals
.sp
Each abbreviation is stored in its own global or universal variable. The name consists of the prefix \fB_fish_abbr_\fP followed by the WORD after being transformed by \fBstring escape style=var\fP\&. The WORD cannot contain a space but all other characters are legal.
.sp
Defining an abbreviation with global scope is slightly faster than universal scope (which is the default). But in general you\(aqll only want to use the global scope when defining abbreviations in a startup script like \fB~/.config/fish/config.fish\fP like this:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
if status \-\-is\-interactive
    abbr \-\-add \-\-global first \(aqecho my first abbreviation\(aq
    abbr \-\-add \-\-global second \(aqecho my second abbreviation\(aq
    abbr \-\-add \-\-global gco git checkout
    # etcetera
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
You can create abbreviations interactively and they will be visible to other fish sessions if you use the \fB\-U\fP or \fB\-\-universal\fP flag or don\(aqt explicitly specify the scope and the abbreviation isn\(aqt already defined with global scope. If you want it to be visible only to the current shell use the \fB\-g\fP or \fB\-\-global\fP flag.
.SS alias \- create a function
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
alias
alias [OPTIONS] NAME DEFINITION
alias [OPTIONS] NAME=DEFINITION
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBalias\fP is a simple wrapper for the \fBfunction\fP builtin, which creates a function wrapping a command. It has similar syntax to POSIX shell \fBalias\fP\&. For other uses, it is recommended to define a function\&.
.sp
\fBfish\fP marks functions that have been created by \fBalias\fP by including the command used to create them in the function description. You can list \fBalias\fP\-created functions by running \fBalias\fP without arguments. They must be erased using \fBfunctions \-e\fP\&.
.INDENT 0.0
.IP \(bu 2
\fBNAME\fP is the name of the alias
.IP \(bu 2
\fBDEFINITION\fP is the actual command to execute. The string \fB$argv\fP will be appended.
.UNINDENT
.sp
You cannot create an alias to a function with the same name. Note that spaces need to be escaped in the call to \fBalias\fP just like at the command line, \fIeven inside quoted parts\fP\&.
.sp
The following options are available:
.INDENT 0.0
.IP \(bu 2
\fB\-h\fP or \fB\-\-help\fP displays help about using this command.
.IP \(bu 2
\fB\-s\fP or \fB\-\-save\fP Automatically save the function created by the alias into your fish configuration directory using funcsave\&.
.UNINDENT
.SS Example
.sp
The following code will create \fBrmi\fP, which runs \fBrm\fP with additional arguments on every invocation.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
alias rmi="rm \-i"

# This is equivalent to entering the following function:
function rmi \-\-wraps rm \-\-description \(aqalias rmi=rm \-i\(aq
    rm \-i $argv
end

# This needs to have the spaces escaped or "Chrome.app..." will be seen as an argument to "/Applications/Google":
alias chrome=\(aq/Applications/Google\e Chrome.app/Contents/MacOS/Google\e Chrome banana\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS and \- conditionally execute a command
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
COMMAND1; and COMMAND2
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBand\fP is used to execute a command if the previous command was successful (returned a status of 0).
.sp
\fBand\fP statements may be used as part of the condition in an while or if block.
.sp
\fBand\fP does not change the current exit status itself, but the command it runs most likely will. The exit status of the last foreground command to exit can always be accessed using the $status variable.
.SS Example
.sp
The following code runs the \fBmake\fP command to build a program. If the build succeeds, \fBmake\fP\(aqs exit status is 0, and the program is installed. If either step fails, the exit status is 1, and \fBmake clean\fP is run, which removes the files created by the build process.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
make; and make install; or make clean
.ft P
.fi
.UNINDENT
.UNINDENT
.SS argparse \- parse options passed to a fish script or function
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
argparse [OPTIONS] OPTION_SPEC... \-\- [ARG...]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
This command makes it easy for fish scripts and functions to handle arguments like how fish builtin commands handle their arguments. You pass arguments that define the known options, followed by a literal \fB\-\-\fP, then the arguments to be parsed (which might also include a literal \fB\-\-\fP). \fBargparse\fP then sets variables to indicate the passed options with their values, and sets $argv (and always $argv) to the remaining arguments. More on this in the \fI\%usage\fP section below.
.sp
Each option specification (\fBOPTION_SPEC\fP) is written in the \fI\%domain specific language\fP described below. All OPTION_SPECs must appear after any argparse flags and before the \fB\-\-\fP that separates them from the arguments to be parsed.
.sp
Each option that is seen in the ARG list will result in a var name of the form \fB_flag_X\fP, where \fBX\fP is the short flag letter and the long flag name. The OPTION_SPEC always requires a short flag even if it can\(aqt be used. So there will always be \fB_flag_X\fP var set using the short flag letter if the corresponding short or long flag is seen. The long flag name var (e.g., \fB_flag_help\fP) will only be defined, obviously, if the OPTION_SPEC includes a long flag name.
.sp
For example \fB_flag_h\fP and \fB_flag_help\fP if \fB\-h\fP or \fB\-\-help\fP is seen. The var will be set with local scope (i.e., as if the script had done \fBset \-l _flag_X\fP). If the flag is a boolean (that is, it just is passed or not, it doesn\(aqt have a value) the values are the short and long flags seen. If the option is not a boolean the values will be zero or more values corresponding to the values collected when the ARG list is processed. If the flag was not seen the flag var will not be set.
.SS Options
.sp
The following \fBargparse\fP options are available. They must appear before all OPTION_SPECs:
.INDENT 0.0
.IP \(bu 2
\fB\-n\fP or \fB\-\-name\fP is the command name for use in error messages. By default the current function name will be used, or \fIargparse\fP if run outside of a function.
.IP \(bu 2
\fB\-x\fP or \fB\-\-exclusive\fP should be followed by a comma separated list of short or long options that are mutually exclusive. You can use this more than once to define multiple sets of mutually exclusive options.
.IP \(bu 2
\fB\-N\fP or \fB\-\-min\-args\fP is followed by an integer that defines the minimum number of acceptable non\-option arguments. The default is zero.
.IP \(bu 2
\fB\-X\fP or \fB\-\-max\-args\fP is followed by an integer that defines the maximum number of acceptable non\-option arguments. The default is infinity.
.IP \(bu 2
\fB\-i\fP or \fB\-\-ignore\-unknown\fP ignores unknown options, keeping them and their arguments in $argv instead.
.IP \(bu 2
\fB\-s\fP or \fB\-\-stop\-nonopt\fP causes scanning the arguments to stop as soon as the first non\-option argument is seen. Among other things, this is useful to implement subcommands that have their own options.
.IP \(bu 2
\fB\-h\fP or \fB\-\-help\fP displays help about using this command.
.UNINDENT
.SS Usage
.sp
Using this command requires first passing option specifications (\fBOPTION_SPEC\fP below), then a mandatory \fB\-\-\fP, and then the arguments you want to have parsed. More about this below but here is a simple example that might be used in a function named \fBmy_function\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
argparse \-\-name=my_function \(aqh/help\(aq \(aqn/name=\(aq \-\- $argv
or return
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If \fB$argv\fP is empty then there is nothing to parse and \fBargparse\fP returns zero to indicate success. If \fB$argv\fP is not empty then it is checked for flags \fB\-h\fP, \fB\-\-help\fP, \fB\-n\fP and \fB\-\-name\fP\&. If they are found they are removed from the arguments and local variables are set so the script can determine which options were seen. Assuming \fB$argv\fP doesn\(aqt have any errors, such as a missing mandatory value for an option, then \fBargparse\fP exits with status zero. Otherwise it writes appropriate error messages to stderr and exits with a status of one.
.sp
The \fB\-\-\fP argument is required. You do not have to include any arguments after the \fB\-\-\fP but you must include the \fB\-\-\fP\&. For example, this is acceptable:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
set \-l argv
argparse \(aqh/help\(aq \(aqn/name\(aq \-\- $argv
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
But this is not:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
set \-l argv
argparse \(aqh/help\(aq \(aqn/name\(aq $argv
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The first \fB\-\-\fP seen is what allows the \fBargparse\fP command to reliably separate the option specifications from the command arguments.
.SS Option Specifications
.sp
Each option specification is a string composed of
.INDENT 0.0
.IP \(bu 2
A short flag letter (which is mandatory). It must be an alphanumeric or "#". The "#" character is special and means that a flag of the form \fB\-123\fP is valid. The short flag "#" must be followed by "\-" (since the short name isn\(aqt otherwise valid since \fB_flag_#\fP is not a valid var name) and must be followed by a long flag name with no modifiers.
.IP \(bu 2
A \fB/\fP if the short flag can be used by someone invoking your command else \fB\-\fP if it should not be exposed as a valid short flag. If there is no long flag name these characters should be omitted. You can also specify a \(aq#\(aq to indicate the short and long flag names can be used and the value can be specified as an implicit int; i.e., a flag of the form \fB\-NNN\fP\&.
.IP \(bu 2
A long flag name which is optional. If not present then only the short flag letter can be used.
.IP \(bu 2
Nothing if the flag is a boolean that takes no argument or is an implicit int flag, else
.IP \(bu 2
\fB=\fP if it requires a value and only the last instance of the flag is saved, else
.IP \(bu 2
\fB=?\fP it takes an optional value and only the last instance of the flag is saved, else
.IP \(bu 2
\fB=+\fP if it requires a value and each instance of the flag is saved.
.IP \(bu 2
Optionally a \fB!\fP followed by fish script to validate the value. Typically this will be a function to run. If the exit status is zero the value for the flag is valid. If non\-zero the value is invalid. Any error messages should be written to stdout (not stderr). See the section on \fI\%Flag Value Validation\fP for more information.
.UNINDENT
.sp
See the fish_opt command for a friendlier but more verbose way to create option specifications.
.sp
In the following examples if a flag is not seen when parsing the arguments then the corresponding _flag_X var(s) will not be set.
.SS Flag Value Validation
.sp
Sometimes you need to validate the option values. For example, that it is a valid integer within a specific range, or an ip address, or something entirely different. You can always do this after \fBargparse\fP returns but you can also request that \fBargparse\fP perform the validation by executing arbitrary fish script. To do so simply append an \fB!\fP (exclamation\-mark) then the fish script to be run. When that code is executed three vars will be defined:
.INDENT 0.0
.IP \(bu 2
\fB_argparse_cmd\fP will be set to the value of the value of the \fBargparse \-\-name\fP value.
.IP \(bu 2
\fB_flag_name\fP will be set to the short or long flag that being processed.
.IP \(bu 2
\fB_flag_value\fP will be set to the value associated with the flag being processed.
.UNINDENT
.sp
If you do this via a function it should be defined with the \fB\-\-no\-scope\-shadowing\fP flag. Otherwise it won\(aqt have access to those variables.
.sp
The script should write any error messages to stdout, not stderr. It should return a status of zero if the flag value is valid otherwise a non\-zero status to indicate it is invalid.
.sp
Fish ships with a \fB_validate_int\fP function that accepts a \fB\-\-min\fP and \fB\-\-max\fP flag. Let\(aqs say your command accepts a \fB\-m\fP or \fB\-\-max\fP flag and the minimum allowable value is zero and the maximum is 5. You would define the option like this: \fBm/max=!_validate_int \-\-min 0 \-\-max 5\fP\&. The default if you just call \fB_validate_int\fP without those flags is to simply check that the value is a valid integer with no limits on the min or max value allowed.
.SS Example OPTION_SPECs
.sp
Some OPTION_SPEC examples:
.INDENT 0.0
.IP \(bu 2
\fBh/help\fP means that both \fB\-h\fP and \fB\-\-help\fP are valid. The flag is a boolean and can be used more than once. If either flag is used then \fB_flag_h\fP and \fB_flag_help\fP will be set to the count of how many times either flag was seen.
.IP \(bu 2
\fBh\-help\fP means that only \fB\-\-help\fP is valid. The flag is a boolean and can be used more than once. If the long flag is used then \fB_flag_h\fP and \fB_flag_help\fP will be set to the count of how many times the long flag was seen.
.IP \(bu 2
\fBn/name=\fP means that both \fB\-n\fP and \fB\-\-name\fP are valid. It requires a value and can be used at most once. If the flag is seen then \fB_flag_n\fP and \fB_flag_name\fP will be set with the single mandatory value associated with the flag.
.IP \(bu 2
\fBn/name=?\fP means that both \fB\-n\fP and \fB\-\-name\fP are valid. It accepts an optional value and can be used at most once. If the flag is seen then \fB_flag_n\fP and \fB_flag_name\fP will be set with the value associated with the flag if one was provided else it will be set with no values.
.IP \(bu 2
\fBn\-name=+\fP means that only \fB\-\-name\fP is valid. It requires a value and can be used more than once. If the flag is seen then \fB_flag_n\fP and \fB_flag_name\fP will be set with the values associated with each occurrence of the flag.
.IP \(bu 2
\fBx\fP means that only \fB\-x\fP is valid. It is a boolean can can be used more than once. If it is seen then \fB_flag_x\fP will be set to the count of how many times the flag was seen.
.IP \(bu 2
\fBx=\fP, \fBx=?\fP, and \fBx=+\fP are similar to the n/name examples above but there is no long flag alternative to the short flag \fB\-x\fP\&.
.IP \(bu 2
\fBx\-\fP is not valid since there is no long flag name and therefore the short flag, \fB\-x\fP, has to be usable.
.IP \(bu 2
\fB#\-max\fP means that flags matching the regex "^\-\-?d+$" are valid. When seen they are assigned to the variable \fB_flag_max\fP\&. This allows any valid positive or negative integer to be specified by prefixing it with a single "\-". Many commands support this idiom. For example \fBhead \-3 /a/file\fP to emit only the first three lines of /a/file.
.IP \(bu 2
\fBn#max\fP means that flags matching the regex "^\-\-?d+$" are valid. When seen they are assigned to the variables \fB_flag_n\fP and \fB_flag_max\fP\&. This allows any valid positive or negative integer to be specified by prefixing it with a single "\-". Many commands support this idiom. For example \fBhead \-3 /a/file\fP to emit only the first three lines of /a/file. You can also specify the value using either flag: \fB\-n NNN\fP or \fB\-\-max NNN\fP in this example.
.UNINDENT
.sp
After parsing the arguments the \fBargv\fP var is set with local scope to any values not already consumed during flag processing. If there are not unbound values the var is set but \fBcount $argv\fP will be zero.
.sp
If an error occurs during argparse processing it will exit with a non\-zero status and print error messages to stderr.
.SS begin \- start a new block of code
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
begin; [COMMANDS...;] end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBbegin\fP is used to create a new block of code.
.sp
A block allows the introduction of a new variable scope, redirection of the input or output of a set of commands as a group, or to specify precedence when using the conditional commands like \fBand\fP\&.
.sp
The block is unconditionally executed. \fBbegin; ...; end\fP is equivalent to \fBif true; ...; end\fP\&.
.sp
\fBbegin\fP does not change the current exit status itself. After the block has completed, \fB$status\fP will be set to the status returned by the most recent command.
.SS Example
.sp
The following code sets a number of variables inside of a block scope. Since the variables are set inside the block and have local scope, they will be automatically deleted when the block ends.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
begin
    set \-l PIRATE Yarrr

    ...
end

echo $PIRATE
# This will not output anything, since the PIRATE variable
# went out of scope at the end of the block
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
In the following code, all output is redirected to the file out.html.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
begin
    echo $xml_header
    echo $html_header
    if test \-e $file
        ...
    end
    ...
end > out.html
.ft P
.fi
.UNINDENT
.UNINDENT
.SS bg \- send jobs to background
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
bg [PID...]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBbg\fP sends jobs to the background, resuming them if they are stopped.
.sp
A background job is executed simultaneously with fish, and does not have access to the keyboard. If no job is specified, the last job to be used is put in the background. If PID is specified, the jobs with the specified process group IDs are put in the background.
.sp
When at least one of the arguments isn\(aqt a valid job specifier (i.e. PID),
\fBbg\fP will print an error without backgrounding anything.
.sp
When all arguments are valid job specifiers, bg will background all matching jobs that exist.
.SS Example
.sp
\fBbg 123 456 789\fP will background 123, 456 and 789.
.sp
If only 123 and 789 exist, it will still background them and print an error about 456.
.sp
\fBbg 123 banana\fP or \fBbg banana 123\fP will complain that "banana" is not a valid job specifier.
.SS bind \- handle fish key bindings
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
bind [(\-M | \-\-mode) MODE] [(\-m | \-\-sets\-mode) NEW_MODE] [\-\-preset | \-\-user] [(\-s | \-\-silent)] [(\-k | \-\-key)] SEQUENCE COMMAND [COMMAND...]
bind [(\-M | \-\-mode) MODE] [(\-k | \-\-key)] [\-\-preset] [\-\-user] SEQUENCE
bind (\-K | \-\-key\-names) [(\-a | \-\-all)] [\-\-preset] [\-\-user]
bind (\-f | \-\-function\-names)
bind (\-L | \-\-list\-modes)
bind (\-e | \-\-erase) [(\-M | \-\-mode) MODE] [\-\-preset] [\-\-user] (\-a | \-\-all | [(\-k | \-\-key)] SEQUENCE [SEQUENCE...])
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBbind\fP adds a binding for the specified key sequence to the specified command.
.sp
SEQUENCE is the character sequence to bind to. These should be written as fish escape sequences\&. For example, because pressing the Alt key and another character sends that character prefixed with an escape character, Alt\-based key bindings can be written using the \fB\ee\fP escape. For example, \fBAlt+w\fP can be written as \fB\eew\fP\&. The control character can be written in much the same way using the \fB\ec\fP escape, for example \fBControl+X\fP (^X) can be written as \fB\ecx\fP\&. Note that Alt\-based key bindings are case sensitive and Control\-based key bindings are not. This is a constraint of text\-based terminals, not \fBfish\fP\&.
.sp
The default key binding can be set by specifying a \fBSEQUENCE\fP of the empty string (that is, \fB\(aq\(aq\fP ). It will be used whenever no other binding matches. For most key bindings, it makes sense to use the \fBself\-insert\fP function (i.e. \fBbind \(aq\(aq self\-insert\fP) as the default keybinding. This will insert any keystrokes not specifically bound to into the editor. Non\- printable characters are ignored by the editor, so this will not result in control sequences being printable.
.sp
If the \fB\-k\fP switch is used, the name of the key (such as \(aqdown\(aq, \(aqup\(aq or \(aqbackspace\(aq) is used instead of a sequence. The names used are the same as the corresponding curses variables, but without the \(aqkey_\(aq prefix. (See \fBterminfo(5)\fP for more information, or use \fBbind \-\-key\-names\fP for a list of all available named keys.) If used in conjunction with the \fB\-s\fP switch, \fBbind\fP will silently ignore bindings to named keys that are not found in termcap for the current \fB$TERMINAL\fP, otherwise a warning is emitted.
.sp
\fBCOMMAND\fP can be any fish command, but it can also be one of a set of special input functions. These include functions for moving the cursor, operating on the kill\-ring, performing tab completion, etc. Use \fBbind \-\-function\-names\fP for a complete list of these input functions.
.sp
When \fBCOMMAND\fP is a shellscript command, it is a good practice to put the actual code into a \fI\%function\fP and simply bind to the function name. This way it becomes significantly easier to test the function while editing, and the result is usually more readable as well.
.sp
If a script produces output, it should finish by calling \fBcommandline \-f repaint\fP to tell fish that a repaint is in order.
.sp
When multiple \fBCOMMAND\fPs are provided, they are all run in the specified order when the key is pressed. Note that special input functions cannot be combined with ordinary shell script commands. The commands must be entirely a sequence of special input functions (from \fBbind \-f\fP) or all shell script commands (i.e., valid fish script).
.sp
If no \fBSEQUENCE\fP is provided, all bindings (or just the bindings in the specified \fBMODE\fP) are printed. If \fBSEQUENCE\fP is provided without \fBCOMMAND\fP, just the binding matching that sequence is printed.
.sp
To save custom keybindings, put the \fBbind\fP statements into config.fish\&. Alternatively, fish also automatically executes a function called \fBfish_user_key_bindings\fP if it exists.
.sp
Key bindings may use "modes", which mimics Vi\(aqs modal input behavior. The default mode is "default", and every bind applies to a single mode. The mode can be viewed/changed with the \fB$fish_bind_mode\fP variable.
.sp
The following parameters are available:
.INDENT 0.0
.IP \(bu 2
\fB\-k\fP or \fB\-\-key\fP Specify a key name, such as \(aqleft\(aq or \(aqbackspace\(aq instead of a character sequence
.IP \(bu 2
\fB\-K\fP or \fB\-\-key\-names\fP Display a list of available key names. Specifying \fB\-a\fP or \fB\-\-all\fP includes keys that don\(aqt have a known mapping
.IP \(bu 2
\fB\-f\fP or \fB\-\-function\-names\fP Display a list of available input functions
.IP \(bu 2
\fB\-L\fP or \fB\-\-list\-modes\fP Display a list of defined bind modes
.IP \(bu 2
\fB\-M MODE\fP or \fB\-\-mode MODE\fP Specify a bind mode that the bind is used in. Defaults to "default"
.IP \(bu 2
\fB\-m NEW_MODE\fP or \fB\-\-sets\-mode NEW_MODE\fP Change the current mode to \fBNEW_MODE\fP after this binding is executed
.IP \(bu 2
\fB\-e\fP or \fB\-\-erase\fP Erase the binding with the given sequence and mode instead of defining a new one. Multiple sequences can be specified with this flag. Specifying \fB\-a\fP or \fB\-\-all\fP with \fB\-M\fP or \fB\-\-mode\fP erases all binds in the given mode regardless of sequence. Specifying \fB\-a\fP or \fB\-\-all\fP without \fB\-M\fP or \fB\-\-mode\fP erases all binds in all modes regardless of sequence.
.IP \(bu 2
\fB\-a\fP or \fB\-\-all\fP See \fB\-\-erase\fP and \fB\-\-key\-names\fP
.IP \(bu 2
\fB\-\-preset\fP and \fB\-\-user\fP specify if bind should operate on user or preset bindings. User bindings take precedence over preset bindings when fish looks up mappings. By default, all \fBbind\fP invocations work on the "user" level except for listing, which will show both levels. All invocations except for inserting new bindings can operate on both levels at the same time. \fB\-\-preset\fP should only be used in full binding sets (like when working on \fBfish_vi_key_bindings\fP).
.UNINDENT
.SS Special input functions
.sp
The following special input functions are available:
.INDENT 0.0
.IP \(bu 2
\fBand\fP, only execute the next function if the previous succeeded (note: only some functions report success)
.IP \(bu 2
\fBaccept\-autosuggestion\fP, accept the current autosuggestion completely
.IP \(bu 2
\fBbackward\-char\fP, moves one character to the left
.IP \(bu 2
\fBbackward\-bigword\fP, move one whitespace\-delimited word to the left
.IP \(bu 2
\fBbackward\-delete\-char\fP, deletes one character of input to the left of the cursor
.IP \(bu 2
\fBbackward\-kill\-bigword\fP, move the whitespace\-delimited word to the left of the cursor to the killring
.IP \(bu 2
\fBbackward\-kill\-line\fP, move everything from the beginning of the line to the cursor to the killring
.IP \(bu 2
\fBbackward\-kill\-path\-component\fP, move one path component to the left of the cursor to the killring. A path component is everything likely to belong to a path component, i.e. not any of the following: \fI/={,}\(aq":@ |;<>&\fP, plus newlines and tabs.
.IP \(bu 2
\fBbackward\-kill\-word\fP, move the word to the left of the cursor to the killring. The "word" here is everything up to punctuation or whitespace.
.IP \(bu 2
\fBbackward\-word\fP, move one word to the left
.IP \(bu 2
\fBbeginning\-of\-buffer\fP, moves to the beginning of the buffer, i.e. the start of the first line
.IP \(bu 2
\fBbeginning\-of\-history\fP, move to the beginning of the history
.IP \(bu 2
\fBbeginning\-of\-line\fP, move to the beginning of the line
.IP \(bu 2
\fBbegin\-selection\fP, start selecting text
.IP \(bu 2
\fBcancel\fP, cancel the current commandline and replace it with a new empty one
.IP \(bu 2
\fBcapitalize\-word\fP, make the current word begin with a capital letter
.IP \(bu 2
\fBcomplete\fP, guess the remainder of the current token
.IP \(bu 2
\fBcomplete\-and\-search\fP, invoke the searchable pager on completion options (for convenience, this also moves backwards in the completion pager)
.IP \(bu 2
\fBdelete\-char\fP, delete one character to the right of the cursor
.IP \(bu 2
\fBdelete\-or\-exit\fP, deletes one character to the right of the cursor or exits the shell if the commandline is empty.
.IP \(bu 2
\fBdown\-line\fP, move down one line
.IP \(bu 2
\fBdowncase\-word\fP, make the current word lowercase
.IP \(bu 2
\fBend\-of\-buffer\fP, moves to the end of the buffer, i.e. the end of the first line
.IP \(bu 2
\fBend\-of\-history\fP, move to the end of the history
.IP \(bu 2
\fBend\-of\-line\fP, move to the end of the line
.IP \(bu 2
\fBend\-selection\fP, end selecting text
.IP \(bu 2
\fBexpand\-abbr\fP expands any abbreviation currently under the cursor
.IP \(bu 2
\fBexecute\fP run the current commandline
.IP \(bu 2
\fBforward\-bigword\fP, move one whitespace\-delimited word to the right
.IP \(bu 2
\fBforward\-char\fP, move one character to the right
.IP \(bu 2
\fBforward\-word\fP, move one word to the right
.IP \(bu 2
\fBhistory\-search\-backward\fP, search the history for the previous match
.IP \(bu 2
\fBhistory\-search\-forward\fP, search the history for the next match
.IP \(bu 2
\fBhistory\-prefix\-search\-backward\fP, search the history for the previous prefix match
.IP \(bu 2
\fBhistory\-prefix\-search\-forward\fP, search the history for the next prefix match
.IP \(bu 2
\fBhistory\-token\-search\-backward\fP, search the history for the previous matching argument
.IP \(bu 2
\fBhistory\-token\-search\-forward\fP, search the history for the next matching argument
.IP \(bu 2
\fBforward\-jump\fP and \fBbackward\-jump\fP, read another character and jump to its next occurence after/before the cursor
.IP \(bu 2
\fBforward\-jump\-till\fP and \fBbackward\-jump\-till\fP, jump to right \fIbefore\fP the next occurence
.IP \(bu 2
\fBrepeat\-jump\fP and \fBrepeat\-jump\-reverse\fP, redo the last jump in the same/opposite direction
.IP \(bu 2
\fBkill\-bigword\fP, move the next whitespace\-delimited word to the killring
.IP \(bu 2
\fBkill\-line\fP, move everything from the cursor to the end of the line to the killring
.IP \(bu 2
\fBkill\-selection\fP, move the selected text to the killring
.IP \(bu 2
\fBkill\-whole\-line\fP, move the line to the killring
.IP \(bu 2
\fBkill\-word\fP, move the next word to the killring
.IP \(bu 2
\fBpager\-toggle\-search\fP, toggles the search field if the completions pager is visible.
.IP \(bu 2
\fBrepaint\fP reexecutes the prompt functions and redraws the prompt. Multiple successive repaints are coalesced.
.IP \(bu 2
\fBrepaint\-mode\fP reexecutes the fish_mode_prompt function and redraws the prompt. This is useful for vi\-mode. If no fish_mode_prompt exists, it acts like a normal repaint.
.IP \(bu 2
\fBforce\-repaint\fP reexecute the prompt functions without coalescing.
.IP \(bu 2
\fBsuppress\-autosuggestion\fP, remove the current autosuggestion
.IP \(bu 2
\fBswap\-selection\-start\-stop\fP, go to the other end of the highlighted text without changing the selection
.IP \(bu 2
\fBtranspose\-chars\fP,  transpose two characters to the left of the cursor
.IP \(bu 2
\fBtranspose\-words\fP, transpose two words to the left of the cursor
.IP \(bu 2
\fBup\-line\fP, move up one line
.IP \(bu 2
\fBupcase\-word\fP, make the current word uppercase
.IP \(bu 2
\fByank\fP, insert the latest entry of the killring into the buffer
.IP \(bu 2
\fByank\-pop\fP, rotate to the previous entry of the killring
.UNINDENT
.SS Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
bind \ecd \(aqexit\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Causes \fBfish\fP to exit when \fBControl+D\fP is pressed.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
bind \-k ppage history\-search\-backward
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Performs a history search when the \fBPage Up\fP key is pressed.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
set \-g fish_key_bindings fish_vi_key_bindings
bind \-M insert \ecc kill\-whole\-line force\-repaint
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Turns on Vi key bindings and rebinds \fBControl+C\fP to clear the input line.
.SS Special Case: The escape Character
.sp
The escape key can be used standalone, for example, to switch from insertion mode to normal mode when using Vi keybindings. Escape may also be used as a "meta" key, to indicate the start of an escape sequence, such as function or arrow keys. Custom bindings can also be defined that begin with an escape character.
.sp
fish waits for a period after receiving the escape character, to determine whether it is standalone or part of an escape sequence. While waiting, additional key presses make the escape key behave as a meta key. If no other key presses come in, it is handled as a standalone escape. The waiting period is set to 300 milliseconds (0.3 seconds) in the default key bindings and 10 milliseconds in the vi key bindings. It can be configured by setting the \fBfish_escape_delay_ms\fP variable to a value between 10 and 5000 ms. It is recommended that this be a universal variable that you set once from an interactive session.
.sp
Note: fish 2.2.0 and earlier used a default of 10 milliseconds, and provided no way to configure it. That effectively made it impossible to use escape as a meta key.
.SS block \- temporarily block delivery of events
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
block [OPTIONS...]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBblock\fP prevents events triggered by \fBfish\fP or the emit command from being delivered and acted upon while the block is in place.
.sp
In functions, \fBblock\fP can be useful while performing work that should not be interrupted by the shell.
.sp
The block can be removed. Any events which triggered while the block was in place will then be delivered.
.sp
Event blocks should not be confused with code blocks, which are created with \fBbegin\fP, \fBif\fP, \fBwhile\fP or \fBfor\fP
.sp
The following parameters are available:
.INDENT 0.0
.IP \(bu 2
\fB\-l\fP or \fB\-\-local\fP Release the block automatically at the end of the current innermost code block scope
.IP \(bu 2
\fB\-g\fP or \fB\-\-global\fP Never automatically release the lock
.IP \(bu 2
\fB\-e\fP or \fB\-\-erase\fP Release global block
.UNINDENT
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# Create a function that listens for events
function \-\-on\-event foo foo; echo \(aqfoo fired\(aq; end

# Block the delivery of events
block \-g

emit foo
# No output will be produced

block \-e
# \(aqfoo fired\(aq will now be printed
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Notes
.sp
Note that events are only received from the current fish process as there is no way to send events from one fish process to another.
.SS break \- stop the current inner loop
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
LOOP_CONSTRUCT; [COMMANDS...] break; [COMMANDS...] end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBbreak\fP halts a currently running loop, such as a switch, for or while loop. It is usually added inside of a conditional block such as an if block.
.sp
There are no parameters for \fBbreak\fP\&.
.SS Example
.sp
The following code searches all .c files for "smurf", and halts at the first occurrence.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
for i in *.c
    if grep smurf $i
        echo Smurfs are present in $i
        break
    end
end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS breakpoint \- Launch debug mode
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
breakpoint
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBbreakpoint\fP is used to halt a running script and launch an interactive debugging prompt.
.sp
For more details, see Debugging fish scripts in the \fBfish\fP manual.
.sp
There are no parameters for \fBbreakpoint\fP\&.
.SS builtin \- run a builtin command
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
builtin [OPTIONS...] BUILTINNAME
builtin \-\-query BUILTINNAMES...
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBbuiltin\fP forces the shell to use a builtin command, rather than a function or program.
.sp
The following parameters are available:
.INDENT 0.0
.IP \(bu 2
\fB\-n\fP or \fB\-\-names\fP List the names of all defined builtins
.IP \(bu 2
\fB\-q\fP or \fB\-\-query\fP tests if any of the specified builtins exists
.UNINDENT
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
builtin jobs
# executes the jobs builtin, even if a function named jobs exists
.ft P
.fi
.UNINDENT
.UNINDENT
.SS case \- conditionally execute a block of commands
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
switch VALUE; [case [WILDCARD...]; [COMMANDS...]; ...] end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBswitch\fP executes one of several blocks of commands, depending on whether a specified value matches one of several values. \fBcase\fP is used together with the \fBswitch\fP statement in order to determine which block should be executed.
.sp
Each \fBcase\fP command is given one or more parameters. The first \fBcase\fP command with a parameter that matches the string specified in the switch command will be evaluated. \fBcase\fP parameters may contain wildcards. These need to be escaped or quoted in order to avoid regular wildcard expansion using filenames.
.sp
Note that fish does not fall through on case statements. Only the first matching case is executed.
.sp
Note that command substitutions in a case statement will be evaluated even if its body is not taken. All substitutions, including command substitutions, must be performed before the value can be compared against the parameter.
.SS Example
.sp
Say $animal contains the name of an animal. Then this code would classify it:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
switch $animal
    case cat
        echo evil
    case wolf dog human moose dolphin whale
        echo mammal
    case duck goose albatross
        echo bird
    case shark trout stingray
        echo fish
    # Note that the next case has a wildcard which is quoted
    case \(aq*\(aq
        echo I have no idea what a $animal is
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If the above code was run with \fB$animal\fP set to \fBwhale\fP, the output
would be \fBmammal\fP\&.
.sp
If \fB$animal\fP was set to "banana", it would print "I have no idea what a banana is".
.SS cd \- change directory
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
cd [DIRECTORY]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBcd\fP changes the current working directory.
.sp
If \fBDIRECTORY\fP is supplied, it will become the new directory. If no parameter is given, the contents of the \fBHOME\fP environment variable will be used.
.sp
If \fBDIRECTORY\fP is a relative path, the paths found in the \fBCDPATH\fP list will be tried as prefixes for the specified path, in addition to $PWD.
.sp
Note that the shell will attempt to change directory without requiring \fBcd\fP if the name of a directory is provided (starting with \fB\&.\fP, \fB/\fP or \fB~\fP, or ending with \fB/\fP).
.sp
Fish also ships a wrapper function around the builtin \fBcd\fP that understands \fBcd \-\fP as changing to the previous directory. See also prevd\&. This wrapper function maintains a history of the 25 most recently visited directories in the \fB$dirprev\fP and \fB$dirnext\fP global variables. If you make those universal variables your \fBcd\fP history is shared among all fish instances.
.sp
As a special case, \fBcd .\fP is equivalent to \fBcd $PWD\fP, which is useful in cases where a mountpoint has been recycled or a directory has been removed and recreated.
.SS Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
cd
# changes the working directory to your home directory.

cd /usr/src/fish\-shell
# changes the working directory to /usr/src/fish\-shell
.ft P
.fi
.UNINDENT
.UNINDENT
.SS See Also
.sp
See also the cdh command for changing to a recently visited directory.
.SS cdh \- change to a recently visited directory
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
cdh [ directory ]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBcdh\fP with no arguments presents a list of recently visited directories. You can then select one of the entries by letter or number. You can also press \fBtab\fP to use the completion pager to select an item from the list. If you give it a single argument it is equivalent to \fBcd directory\fP\&.
.sp
Note that the \fBcd\fP command limits directory history to the 25 most recently visited directories. The history is stored in the \fB$dirprev\fP and \fB$dirnext\fP variables which this command manipulates. If you make those universal variables your \fBcd\fP history is shared among all fish instances.
.SS See Also
.sp
See also the prevd and pushd commands which also work with the recent \fBcd\fP history and are provided for compatibility with other shells.
.SS command \- run a program
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
command [OPTIONS] COMMANDNAME [ARGS...]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBcommand\fP forces the shell to execute the program \fBCOMMANDNAME\fP and ignore any functions or builtins with the same name.
.sp
The following options are available:
.INDENT 0.0
.IP \(bu 2
\fB\-a\fP or \fB\-\-all\fP returns all the external COMMANDNAMEs that are found in \fB$PATH\fP in the order they are found.
.IP \(bu 2
\fB\-q\fP or \fB\-\-quiet\fP, silences the output and prints nothing, setting only the exit status. Implies \fB\-\-search\fP\&.
.IP \(bu 2
\fB\-s\fP or \fB\-\-search\fP returns the name of the external command that would be executed, or nothing if no file with the specified name could be found in the \fB$PATH\fP\&.
.UNINDENT
.sp
With the \fB\-s\fP option, \fBcommand\fP treats every argument as a separate command to look up and sets the exit status to 0 if any of the specified commands were found, or 1 if no commands could be found. Additionally passing a \fB\-q\fP or \fB\-\-quiet\fP option prevents any paths from being printed, like \fBtype \-q\fP, for testing only the exit status.
.sp
For basic compatibility with POSIX \fBcommand\fP, the \fB\-v\fP flag is recognized as an alias for \fB\-s\fP\&.
.SS Examples
.sp
\fBcommand ls\fP causes fish to execute the \fBls\fP program, even if an \fBls\fP function exists.
.sp
\fBcommand \-s ls\fP returns the path to the \fBls\fP program.
.sp
\fBcommand \-q git; and command git log\fP runs \fBgit log\fP only if \fBgit\fP exists.
.SS commandline \- set or get the current command line buffer
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
commandline [OPTIONS] [CMD]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBcommandline\fP can be used to set or get the current contents of the command line buffer.
.sp
With no parameters, \fBcommandline\fP returns the current value of the command line.
.sp
With \fBCMD\fP specified, the command line buffer is erased and replaced with the contents of \fBCMD\fP\&.
.sp
The following options are available:
.INDENT 0.0
.IP \(bu 2
\fB\-C\fP or \fB\-\-cursor\fP set or get the current cursor position, not the contents of the buffer. If no argument is given, the current cursor position is printed, otherwise the argument is interpreted as the new cursor position.
.IP \(bu 2
\fB\-f\fP or \fB\-\-function\fP causes any additional arguments to be interpreted as input functions, and puts them into the queue, so that they will be read before any additional actual key presses are. This option cannot be combined with any other option. See bind for a list of input functions.
.UNINDENT
.sp
The following options change the way \fBcommandline\fP updates the command line buffer:
.INDENT 0.0
.IP \(bu 2
\fB\-a\fP or \fB\-\-append\fP do not remove the current commandline, append the specified string at the end of it
.IP \(bu 2
\fB\-i\fP or \fB\-\-insert\fP do not remove the current commandline, insert the specified string at the current cursor position
.IP \(bu 2
\fB\-r\fP or \fB\-\-replace\fP remove the current commandline and replace it with the specified string (default)
.UNINDENT
.sp
The following options change what part of the commandline is printed or updated:
.INDENT 0.0
.IP \(bu 2
\fB\-b\fP or \fB\-\-current\-buffer\fP select the entire buffer, including any displayed autosuggestion (default)
.IP \(bu 2
\fB\-j\fP or \fB\-\-current\-job\fP select the current job
.IP \(bu 2
\fB\-p\fP or \fB\-\-current\-process\fP select the current process
.IP \(bu 2
\fB\-s\fP or \fB\-\-current\-selection\fP selects the current selection
.IP \(bu 2
\fB\-t\fP or \fB\-\-current\-token\fP select the current token
.UNINDENT
.sp
The following options change the way \fBcommandline\fP prints the current commandline buffer:
.INDENT 0.0
.IP \(bu 2
\fB\-c\fP or \fB\-\-cut\-at\-cursor\fP only print selection up until the current cursor position
.IP \(bu 2
\fB\-o\fP or \fB\-\-tokenize\fP tokenize the selection and print one string\-type token per line
.UNINDENT
.sp
If \fBcommandline\fP is called during a call to complete a given string using \fBcomplete \-C STRING\fP, \fBcommandline\fP will consider the specified string to be the current contents of the command line.
.sp
The following options output metadata about the commandline state:
.INDENT 0.0
.IP \(bu 2
\fB\-L\fP or \fB\-\-line\fP print the line that the cursor is on, with the topmost line starting at 1
.IP \(bu 2
\fB\-S\fP or \fB\-\-search\-mode\fP evaluates to true if the commandline is performing a history search
.IP \(bu 2
\fB\-P\fP or \fB\-\-paging\-mode\fP evaluates to true if the commandline is showing pager contents, such as tab completions
.UNINDENT
.SS Example
.sp
\fBcommandline \-j $history[3]\fP replaces the job under the cursor with the third item from the command line history.
.sp
If the commandline contains
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ echo $fl___ounder >&2 | less; and echo $catfish
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
(with the cursor on the "o" of "flounder")
.sp
Then the following invocations behave like this:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ commandline \-t
$flounder
>_ commandline \-ct
$fl
>_ commandline \-b # or just commandline
echo $flounder >&2 | less; and echo $catfish
>_ commandline \-p
echo $flounder >&2
>_ commandline \-j
echo $flounder >&2 | less
.ft P
.fi
.UNINDENT
.UNINDENT
.SS complete \- edit command specific tab\-completions
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
complete ( \-c | \-\-command | \-p | \-\-path ) COMMAND
        [( \-c | \-\-command | \-p | \-\-path ) COMMAND]...
        [( \-e | \-\-erase )]
        [( \-s | \-\-short\-option ) SHORT_OPTION]...
        [( \-l | \-\-long\-option | \-o | \-\-old\-option ) LONG_OPTION]...
        [( \-a | \-\-arguments ) OPTION_ARGUMENTS]
        [( \-k | \-\-keep\-order )]
        [( \-f | \-\-no\-files )]
        [( \-F | \-\-force\-files )]
        [( \-r | \-\-require\-parameter )]
        [( \-x | \-\-exclusive )]
        [( \-w | \-\-wraps ) WRAPPED_COMMAND]...
        [( \-n | \-\-condition ) CONDITION]
        [( \-d | \-\-description ) DESCRIPTION]
complete ( \-C [STRING] | \-\-do\-complete[=STRING] )
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
For an introduction to specifying completions, see Writing your own completions in
the fish manual.
.INDENT 0.0
.IP \(bu 2
\fBCOMMAND\fP is the name of the command for which to add a completion.
.IP \(bu 2
\fBSHORT_OPTION\fP is a one character option for the command.
.IP \(bu 2
\fBLONG_OPTION\fP is a multi character option for the command.
.IP \(bu 2
\fBOPTION_ARGUMENTS\fP is parameter containing a space\-separated list of possible option\-arguments, which may contain command substitutions.
.IP \(bu 2
\fBDESCRIPTION\fP is a description of what the option and/or option arguments do.
.IP \(bu 2
\fB\-c COMMAND\fP or \fB\-\-command COMMAND\fP specifies that \fBCOMMAND\fP is the name of the command.
.IP \(bu 2
\fB\-p COMMAND\fP or \fB\-\-path COMMAND\fP specifies that \fBCOMMAND\fP is the absolute path of the program (optionally containing wildcards).
.IP \(bu 2
\fB\-e\fP or \fB\-\-erase\fP deletes the specified completion.
.IP \(bu 2
\fB\-s SHORT_OPTION\fP or \fB\-\-short\-option=SHORT_OPTION\fP adds a short option to the completions list.
.IP \(bu 2
\fB\-l LONG_OPTION\fP or \fB\-\-long\-option=LONG_OPTION\fP adds a GNU style long option to the completions list.
.IP \(bu 2
\fB\-o LONG_OPTION\fP or \fB\-\-old\-option=LONG_OPTION\fP adds an old style long option to the completions list (See below for details).
.IP \(bu 2
\fB\-a OPTION_ARGUMENTS\fP or \fB\-\-arguments=OPTION_ARGUMENTS\fP adds the specified option arguments to the completions list.
.IP \(bu 2
\fB\-k\fP or \fB\-\-keep\-order\fP preserves the order of the \fBOPTION_ARGUMENTS\fP specified via \fB\-a\fP or \fB\-\-arguments\fP instead of sorting alphabetically. Multiple \fBcomplete\fP calls with \fB\-k\fP result in arguments of the later ones displayed first.
.IP \(bu 2
\fB\-f\fP or \fB\-\-no\-files\fP says that the options specified by this completion may not be followed by a filename.
.IP \(bu 2
\fB\-F\fP or \fB\-\-force\-files\fP says that the options specified by this completion may be followed by a filename, even if another applicable \fBcomplete\fP specified \fB\-\-no\-files\fP\&.
.IP \(bu 2
\fB\-r\fP or \fB\-\-require\-parameter\fP says that the options specified by this completion must have an option argument, i.e. may not be followed by another option.
.IP \(bu 2
\fB\-x\fP or \fB\-\-exclusive\fP implies both \fB\-r\fP and \fB\-f\fP\&.
.IP \(bu 2
\fB\-w WRAPPED_COMMAND\fP or \fB\-\-wraps=WRAPPED_COMMAND\fP causes the specified command to inherit completions from the wrapped command (See below for details).
.IP \(bu 2
\fB\-n\fP or \fB\-\-condition\fP specifies a shell command that must return 0 if the completion is to be used. This makes it possible to specify completions that should only be used in some cases.
.IP \(bu 2
\fB\-CSTRING\fP or \fB\-\-do\-complete=STRING\fP makes complete try to find all possible completions for the specified string.
.IP \(bu 2
\fB\-C\fP or \fB\-\-do\-complete\fP with no argument makes complete try to find all possible completions for the current command line buffer. If the shell is not in interactive mode, an error is returned.
.IP \(bu 2
\fB\-A\fP and \fB\-\-authoritative\fP no longer do anything and are silently ignored.
.IP \(bu 2
\fB\-u\fP and \fB\-\-unauthoritative\fP no longer do anything and are silently ignored.
.UNINDENT
.sp
Command specific tab\-completions in \fBfish\fP are based on the notion of options and arguments. An option is a parameter which begins with a hyphen, such as \(aq\fB\-h\fP\(aq, \(aq\fB\-help\fP\(aq or \(aq\fB\-\-help\fP\(aq. Arguments are parameters that do not begin with a hyphen. Fish recognizes three styles of options, the same styles as the GNU version of the getopt library. These styles are:
.INDENT 0.0
.IP \(bu 2
Short options, like \(aq\fB\-a\fP\(aq. Short options are a single character long, are preceded by a single hyphen and may be grouped together (like \(aq\fB\-la\fP\(aq, which is equivalent to \(aq\fB\-l \-a\fP\(aq). Option arguments may be specified in the following parameter (\(aq\fB\-w 32\fP\(aq) or by appending the option with the value (\(aq\fB\-w32\fP\(aq).
.IP \(bu 2
Old style long options, like \(aq\fB\-Wall\fP\(aq. Old style long options can be more than one character long, are preceded by a single hyphen and may not be grouped together. Option arguments are specified in the following parameter (\(aq\fB\-ao null\fP\(aq).
.IP \(bu 2
GNU style long options, like \(aq\fB\-\-colors\fP\(aq. GNU style long options can be more than one character long, are preceded by two hyphens, and may not be grouped together. Option arguments may be specified in the following parameter (\(aq\fB\-\-quoting\-style shell\fP\(aq) or by appending the option with a \(aq\fB=\fP\(aq and the value (\(aq\fB\-\-quoting\-style=shell\fP\(aq). GNU style long options may be abbreviated so long as the abbreviation is unique (\(aq\fB\-\-h\fP\(aq) is equivalent to \(aq\fB\-\-help\fP\(aq if help is the only long option beginning with an \(aqh\(aq).
.UNINDENT
.sp
The options for specifying command name and command path may be used multiple times to define the same completions for multiple commands.
.sp
The options for specifying command switches and wrapped commands may be used multiple times to define multiple completions for the command(s) in a single call.
.sp
Invoking \fBcomplete\fP multiple times for the same command adds the new definitions on top of any existing completions defined for the command.
.sp
When \fB\-a\fP or \fB\-\-arguments\fP is specified in conjunction with long, short, or old style options, the specified arguments are only used as completions when attempting to complete an argument for any of the specified options. If \fB\-a\fP or \fB\-\-arguments\fP is specified without any long, short, or old style options, the specified arguments are used when completing any argument to the command (except when completing an option argument that was specified with \fB\-r\fP or \fB\-\-require\-parameter\fP).
.sp
Command substitutions found in \fBOPTION_ARGUMENTS\fP are not expected to return a space\-separated list of arguments. Instead they must return a newline\-separated list of arguments, and each argument may optionally have a tab character followed by the argument description. Any description provided in this way overrides a description given with \fB\-d\fP or \fB\-\-description\fP\&.
.sp
The \fB\-w\fP or \fB\-\-wraps\fP options causes the specified command to inherit completions from another command. The inheriting command is said to "wrap" the inherited command. The wrapping command may have its own completions in addition to inherited ones. A command may wrap multiple commands, and wrapping is transitive: if A wraps B, and B wraps C, then A automatically inherits all of C\(aqs completions. Wrapping can be removed using the \fB\-e\fP or \fB\-\-erase\fP options. Note that wrapping only works for completions specified with \fB\-c\fP or \fB\-\-command\fP and are ignored when specifying completions with \fB\-p\fP or \fB\-\-path\fP\&.
.sp
When erasing completions, it is possible to either erase all completions for a specific command by specifying \fBcomplete \-c COMMAND \-e\fP, or by specifying a specific completion option to delete by specifying either a long, short or old style option.
.SS Example
.sp
The short style option \fB\-o\fP for the \fBgcc\fP command requires that a file follows it.  This can be done using writing:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
complete \-c gcc \-s o \-r
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The short style option \fB\-d\fP for the \fBgrep\fP command requires that one of the strings \(aq\fBread\fP\(aq, \(aq\fBskip\fP\(aq or \(aq\fBrecurse\fP\(aq is used.  This can be specified writing:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
complete \-c grep \-s d \-x \-a "read skip recurse"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The \fBsu\fP command takes any username as an argument. Usernames are given as the first colon\-separated field in the file /etc/passwd. This can be specified as:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
complete \-x \-c su \-d "Username" \-a "(cat /etc/passwd | cut \-d : \-f 1)"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The \fBrpm\fP command has several different modes. If the \fB\-e\fP or \fB\-\-erase\fP flag has been specified, \fBrpm\fP should delete one or more packages, in which case several switches related to deleting packages are valid, like the \fBnodeps\fP switch.
.sp
This can be written as:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
complete \-c rpm \-n "__fish_contains_opt \-s e erase" \-l nodeps \-d "Don\(aqt check dependencies"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
where \fB__fish_contains_opt\fP is a function that checks the command line buffer for the presence of a specified set of options.
.sp
To implement an alias, use the \fB\-w\fP or \fB\-\-wraps\fP option:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
complete \-c hub \-w git
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Now hub inherits all of the completions from git. Note this can also be specified in a function declaration.
.SS contains \- test if a word is present in a list
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
contains [OPTIONS] KEY [VALUES...]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBcontains\fP tests whether the set \fBVALUES\fP contains the string \fBKEY\fP\&. If so, \fBcontains\fP exits with status 0; if not, it exits with status 1.
.sp
The following options are available:
.INDENT 0.0
.IP \(bu 2
\fB\-i\fP or \fB\-\-index\fP print the word index
.UNINDENT
.sp
Note that, like GNU tools and most of fish\(aqs builtins, \fBcontains\fP interprets all arguments starting with a \fB\-\fP as options to contains, until it reaches an argument that is \fB\-\-\fP (two dashes). See the examples below.
.SS Example
.sp
If $animals is a list of animals, the following will test if it contains a cat:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
if contains cat $animals
   echo Your animal list is evil!
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This code will add some directories to $PATH if they aren\(aqt yet included:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
for i in ~/bin /usr/local/bin
    if not contains $i $PATH
        set PATH $PATH $i
    end
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
While this will check if \fBhasargs\fP was run with the \fB\-q\fP option:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function hasargs
    if contains \-\- \-q $argv
        echo \(aq$argv contains a \-q option\(aq
    end
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The \fB\-\-\fP here stops \fBcontains\fP from treating \fB\-q\fP to an option to itself. Instead it treats it as a normal string to check.
.SS continue \- skip the remainder of the current iteration of the current inner loop
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
LOOP_CONSTRUCT; [COMMANDS...;] continue; [COMMANDS...;] end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBcontinue\fP skips the remainder of the current iteration of the current inner loop, such as a for loop or a while loop. It is usually added inside of a conditional block such as an if statement or a switch statement.
.SS Example
.sp
The following code removes all tmp files that do not contain the word smurf.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
for i in *.tmp
    if grep smurf $i
        continue
    end
    # This "rm" is skipped over if "continue" is executed.
    rm $i
    # As is this "echo"
    echo $i
end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS count \- count the number of elements of a list
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
count $VARIABLE
COMMAND | count
count < FILE
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBcount\fP prints the number of arguments that were passed to it, plus the number of newlines passed to it via stdin. This is usually used to find out how many elements an environment variable list contains, or how many lines there are in a text file.
.sp
\fBcount\fP does not accept any options, not even \fB\-h\fP or \fB\-\-help\fP\&.
.sp
\fBcount\fP exits with a non\-zero exit status if no arguments were passed to it, and with zero if at least one argument was passed.
.sp
Note that, like \fBwc \-l\fP, reading from stdin counts newlines, so \fBecho \-n foo | count\fP will print 0.
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
count $PATH
# Returns the number of directories in the users PATH variable.

count *.txt
# Returns the number of files in the current working directory ending with the suffix \(aq.txt\(aq.

git ls\-files \-\-others \-\-exclude\-standard | count
# Returns the number of untracked files in a git repository

printf \(aq%s\en\(aq foo bar | count baz
# Returns 3 (2 lines from stdin plus 1 argument)

count < /etc/hosts
# Counts the number of entries in the hosts file
.ft P
.fi
.UNINDENT
.UNINDENT
.SS dirh \- print directory history
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
dirh
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBdirh\fP prints the current directory history. The current position in the history is highlighted using the color defined in the \fBfish_color_history_current\fP environment variable.
.sp
\fBdirh\fP does not accept any parameters.
.sp
Note that the \fBcd\fP command limits directory history to the 25 most recently visited directories. The history is stored in the \fB$dirprev\fP and \fB$dirnext\fP variables.
.SS dirs \- print directory stack
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
dirs
dirs \-c
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBdirs\fP prints the current directory stack, as created by pushd and modified by popd\&.
.sp
With "\-c", it clears the directory stack instead.
.sp
\fBdirs\fP does not accept any parameters.
.SS disown \- remove a process from the list of jobs
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
disown [ PID ... ]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBdisown\fP removes the specified job from the list of jobs. The job itself continues to exist, but fish does not keep track of it any longer.
.sp
Jobs in the list of jobs are sent a hang\-up signal when fish terminates, which usually causes the job to terminate; \fBdisown\fP allows these processes to continue regardless.
.sp
If no process is specified, the most recently\-used job is removed (like bg and fg).  If one or more PIDs are specified, jobs with the specified process IDs are removed from the job list. Invalid jobs are ignored and a warning is printed.
.sp
If a job is stopped, it is sent a signal to continue running, and a warning is printed. It is not possible to use the \fBbg\fP builtin to continue a job once it has been disowned.
.sp
\fBdisown\fP returns 0 if all specified jobs were disowned successfully, and 1 if any problems were encountered.
.SS Example
.sp
\fBfirefox &; disown\fP will start the Firefox web browser in the background and remove it from the job list, meaning it will not be closed when the fish process is closed.
.sp
\fBdisown (jobs \-p)\fP removes all jobs from the job list without terminating them.
.SS echo \- display a line of text
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
echo [OPTIONS] [STRING]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBecho\fP displays a string of text.
.sp
The following options are available:
.INDENT 0.0
.IP \(bu 2
\fB\-n\fP, Do not output a newline
.IP \(bu 2
\fB\-s\fP, Do not separate arguments with spaces
.IP \(bu 2
\fB\-E\fP, Disable interpretation of backslash escapes (default)
.IP \(bu 2
\fB\-e\fP, Enable interpretation of backslash escapes
.UNINDENT
.SS Escape Sequences
.sp
If \fB\-e\fP is used, the following sequences are recognized:
.INDENT 0.0
.IP \(bu 2
\fB\e\fP backslash
.IP \(bu 2
\fB\ea\fP alert (BEL)
.IP \(bu 2
\fB\eb\fP backspace
.IP \(bu 2
\fB\ec\fP produce no further output
.IP \(bu 2
\fB\ee\fP escape
.IP \(bu 2
\fB\ef\fP form feed
.IP \(bu 2
\fB\en\fP new line
.IP \(bu 2
\fB\er\fP carriage return
.IP \(bu 2
\fB\et\fP horizontal tab
.IP \(bu 2
\fB\ev\fP vertical tab
.IP \(bu 2
\fB\e0NNN\fP byte with octal value NNN (1 to 3 digits)
.IP \(bu 2
\fB\exHH\fP byte with hexadecimal value HH (1 to 2 digits)
.UNINDENT
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
echo \(aqHello World\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Print hello world to stdout
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
echo \-e \(aqTop\e\enBottom\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Print Top and Bottom on separate lines, using an escape sequence
.SS else \- execute command if a condition is not met
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
if CONDITION; COMMANDS_TRUE...; [else; COMMANDS_FALSE...;] end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
if will execute the command \fBCONDITION\fP\&. If the condition\(aqs exit status is 0, the commands \fBCOMMANDS_TRUE\fP will execute. If it is not 0 and \fBelse\fP is given, \fBCOMMANDS_FALSE\fP will be executed.
.SS Example
.sp
The following code tests whether a file \fBfoo.txt\fP exists as a regular file.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
if test \-f foo.txt
    echo foo.txt exists
else
    echo foo.txt does not exist
end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS emit \- Emit a generic event
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
emit EVENT_NAME [ARGUMENTS...]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBemit\fP emits, or fires, an event. Events are delivered to, or caught by, special functions called event handlers\&. The arguments are passed to the event handlers as function arguments.
.SS Example
.sp
The following code first defines an event handler for the generic event named \(aqtest_event\(aq, and then emits an event of that type.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function event_test \-\-on\-event test_event
    echo event test: $argv
end

emit test_event something
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Notes
.sp
Note that events are only sent to the current fish process as there is no way to send events from one fish process to another.
.SS end \- end a block of commands.
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
begin; [COMMANDS...] end
if CONDITION; COMMANDS_TRUE...; [else; COMMANDS_FALSE...;] end
while CONDITION; COMMANDS...; end
for VARNAME in [VALUES...]; COMMANDS...; end
switch VALUE; [case [WILDCARD...]; [COMMANDS...]; ...] end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBend\fP ends a block of commands.
.sp
For more information, read the
documentation for the block constructs, such as \fBif\fP, \fBfor\fP and \fBwhile\fP\&.
.sp
The \fBend\fP command does not change the current exit status. Instead, the status after it will be the status returned by the most recent command.
.SS eval \- evaluate the specified commands
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
eval [COMMANDS...]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBeval\fP evaluates the specified parameters as a command. If more than one parameter is specified, all parameters will be joined using a space character as a separator.
.sp
If your command does not need access to stdin, consider using \fBsource\fP instead.
.sp
If no piping or other compound shell constructs are required, variable\-expansion\-as\-command, as in  \fBset cmd ls \-la; $cmd\fP, is also an option.
.SS Example
.sp
The following code will call the ls command and truncate each filename to the first 12 characters.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
set cmd ls \e| cut \-c 1\-12
eval $cmd
.ft P
.fi
.UNINDENT
.UNINDENT
.SS exec \- execute command in current process
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
exec COMMAND [OPTIONS...]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBexec\fP replaces the currently running shell with a new command. On successful completion, \fBexec\fP never returns. \fBexec\fP cannot be used inside a pipeline.
.SS Example
.sp
\fBexec emacs\fP starts up the emacs text editor, and exits \fBfish\fP\&. When emacs exits, the session will terminate.
.SS exit \- exit the shell
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
exit [STATUS]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBexit\fP causes fish to exit. If \fBSTATUS\fP is supplied, it will be converted to an integer and used as the exit status. Otherwise, the exit status will be that of the last command executed.
.sp
If exit is called while sourcing a file (using the source builtin) the rest of the file will be skipped, but the shell itself will not exit.
.SS false \- return an unsuccessful result
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
false
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBfalse\fP sets the exit status to 1.
.SS fg \- bring job to foreground
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
fg [PID]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBfg\fP brings the specified job to the foreground, resuming it if it is stopped. While a foreground job is executed, fish is suspended. If no job is specified, the last job to be used is put in the foreground. If PID is specified, the job with the specified group ID is put in the foreground.
.SS Example
.sp
\fBfg\fP will put the last job in the foreground.
.SS fish \- the friendly interactive shell
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
fish [OPTIONS] [\-c command] [FILE [ARGUMENTS...]]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBfish\fP is a command\-line shell written mainly with interactive use in mind. This page briefly describes the options for invoking fish. The full manual is available in HTML by using the help command from inside fish, and in the \fIfish\-doc(1)\fP man page. The tutorial is available as HTML via \fBhelp tutorial\fP or in \fIfish\-tutorial(1)\fP\&.
.sp
The following options are available:
.INDENT 0.0
.IP \(bu 2
\fB\-c\fP or \fB\-\-command=COMMANDS\fP evaluate the specified commands instead of reading from the commandline
.IP \(bu 2
\fB\-C\fP or \fB\-\-init\-command=COMMANDS\fP evaluate the specified commands after reading the configuration, before running the command specified by \fB\-c\fP or reading interactive input
.IP \(bu 2
\fB\-d\fP or \fB\-\-debug=CATEGORY_GLOB\fP enables debug output and specifies a glob for matching debug categories (like \fBfish \-d\fP). Defaults to empty.
.IP \(bu 2
\fB\-o\fP or \fB\-\-debug\-output=path\fP Specify a file path to receive the debug output, including categories and \fBfish_trace\fP\&. The default is stderr.
.IP \(bu 2
\fB\-i\fP or \fB\-\-interactive\fP specify that fish is to run in interactive mode
.IP \(bu 2
\fB\-l\fP or \fB\-\-login\fP specify that fish is to run as a login shell
.IP \(bu 2
\fB\-n\fP or \fB\-\-no\-execute\fP do not execute any commands, only perform syntax checking
.IP \(bu 2
\fB\-p\fP or \fB\-\-profile=PROFILE_FILE\fP when fish exits, output timing information on all executed commands to the specified file
.IP \(bu 2
\fB\-P\fP or \fB\-\-private\fP enables private mode, so fish will not access old or store new history.
.IP \(bu 2
\fB\-\-print\-rusage\-self\fP when fish exits, output stats from getrusage
.IP \(bu 2
\fB\-\-print\-debug\-categories\fP outputs the list of debug categories, and then exits.
.IP \(bu 2
\fB\-v\fP or \fB\-\-version\fP display version and exit
.IP \(bu 2
\fB\-D\fP or \fB\-\-debug\-stack\-frames=DEBUG_LEVEL\fP specify how many stack frames to display when debug messages are written. The default is zero. A value of 3 or 4 is usually sufficient to gain insight into how a given debug call was reached but you can specify a value up to 128.
.IP \(bu 2
\fB\-f\fP or \fB\-\-features=FEATURES\fP enables one or more feature flags (separated by a comma). These are how fish stages changes that might break scripts.
.UNINDENT
.sp
The fish exit status is generally the exit status of the last foreground command. If fish is exiting because of a parse error, the exit status is 127.
.SS fish_breakpoint_prompt \- define the prompt when stopped at a breakpoint
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function fish_breakpoint_prompt
    ...
end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
By defining the \fBfish_breakpoint_prompt\fP function, the user can choose a custom prompt when asking for input in response to a breakpoint command. The \fBfish_breakpoint_prompt\fP function is executed when the prompt is to be shown, and the output is used as a prompt.
.sp
The exit status of commands within \fBfish_breakpoint_prompt\fP will not modify the value of $status outside of the \fBfish_breakpoint_prompt\fP function.
.sp
\fBfish\fP ships with a default version of this function that displays the function name and line number of the current execution context.
.SS Example
.sp
A simple prompt that is a simplified version of the default debugging prompt:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function fish_breakpoint_prompt \-d "Write out the debug prompt"
    set \-l function (status current\-function)
    set \-l line (status current\-line\-number)
    set \-l prompt "$function:$line >"
    echo \-ns (set_color $fish_color_status) "BP $prompt" (set_color normal) \(aq \(aq
end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS fish_config \- start the web\-based configuration interface
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
fish_config [TAB]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBfish_config\fP starts the web\-based configuration interface.
.sp
The web interface allows you to view your functions, variables and history, and to make changes to your prompt and color configuration.
.sp
\fBfish_config\fP starts a local web server and then opens a web browser window; when you have finished, close the browser window and then press the Enter key to terminate the configuration session.
.sp
\fBfish_config\fP optionally accepts name of the initial configuration tab. For e.g. \fBfish_config history\fP will start configuration interface with history tab.
.sp
If the \fBBROWSER\fP environment variable is set, it will be used as the name of the web browser to open instead of the system default.
.SS Example
.sp
\fBfish_config\fP opens a new web browser window and allows you to configure certain fish settings.
.SS fish_git_prompt \- output git information for use in a prompt
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function fish_prompt
     echo \-n (pwd)(fish_git_prompt) \(aq$ \(aq
end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
The \fBfish_git_prompt\fP function displays information about the current git repository, if any.
.sp
\fI\%Git\fP must be installed.
.sp
There are numerous customization options, which can be controlled with git options or fish variables. git options, where available, take precedence over the fish variable with the same function. git options can be set on a per\-repository or global basis. git options can be set with the \fIgit config\fP command, while fish variables can be set as usual with the set command.
.INDENT 0.0
.IP \(bu 2
\fB$__fish_git_prompt_show_informative_status\fP or the git option \fBbash.showInformativeStatus\fP can be set to enable the "informative" display, which will show a large amount of information \- the number of untracked files, dirty files, unpushed/unpulled commits, and more. In large repositories, this can take a lot of time, so it you may wish to disable it in these repositories with  \fBgit config \-\-local bash.showInformativeStatus false\fP\&.
.IP \(bu 2
\fB$__fish_git_prompt_showdirtystate\fP or the git option \fBbash.showDirtyState\fP can be set to show if the repository is "dirty", i.e. has uncommitted changes.
.IP \(bu 2
\fB$__fish_git_prompt_showuntrackedfiles\fP or the git option \fBbash.showUntrackedFiles\fP can be set to show if the repository has untracked files (that aren\(aqt ignored).
.IP \(bu 2
\fB$__fish_git_prompt_showupstream\fP can be set to a list of values to determine how changes between HEAD and upstream are shown:
.INDENT 2.0
.INDENT 3.5
.INDENT 0.0
.TP
.B \fBauto\fP
summarize the difference between HEAD and its upstream
.TP
.B \fBverbose\fP
show number of commits ahead/behind (+/\-) upstream
.TP
.B \fBname\fP
if verbose, then also show the upstream abbrev name
.TP
.B \fBinformative\fP
similar to verbose, but shows nothing when equal \- this is the default if informative status is enabled.
.TP
.B \fBgit\fP
always compare HEAD to @{upstream}
.TP
.B \fBsvn\fP
always compare HEAD to your SVN upstream
.TP
.B \fBnone\fP
disables (useful with informative status)
.UNINDENT
.UNINDENT
.UNINDENT
.IP \(bu 2
\fB$__fish_git_prompt_showstashstate\fP can be set to display the state of the stash.
.IP \(bu 2
\fB$__fish_git_prompt_shorten_branch_len\fP can be set to the number of characters that the branch name will be shortened to.
.IP \(bu 2
\fB$__fish_git_prompt_describe_style\fP can be set to one of the following styles to describe the current HEAD:
.INDENT 2.0
.INDENT 3.5
.INDENT 0.0
.TP
.B \fBcontains\fP
relative to newer annotated tag, such as \fB(v1.6.3.2~35)\fP
.TP
.B \fBbranch\fP
relative to newer tag or branch, such as \fB(master~4)\fP
.TP
.B \fBdescribe\fP
relative to older annotated tag, such as \fB(v1.6.3.1\-13\-gdd42c2f)\fP
.TP
.B \fBdefault\fP
exactly matching tag
.UNINDENT
.UNINDENT
.UNINDENT
.IP \(bu 2
\fB$__fish_git_prompt_showcolorhints\fP can be set to enable coloring for the branch name and status symbols.
.UNINDENT
.sp
A number of variables set characters and color used as indicators. Many of these have a different default if used with informative status enabled, or \fB$__fish_git_prompt_use_informative_chars\fP set. The usual default is given first, then the informative default (if it is different). If no default for the colors is given, they default to \fB$__fish_git_prompt_color\fP\&.
.INDENT 0.0
.IP \(bu 2
\fB$__fish_git_prompt_char_stateseparator\fP (\(aq \(aq, \fI|\fP)
.IP \(bu 2
\fB$__fish_git_prompt_color\fP (\(aq\(aq)
.IP \(bu 2
\fB$__fish_git_prompt_color_prefix\fP
.IP \(bu 2
\fB$__fish_git_prompt_color_suffix\fP
.IP \(bu 2
\fB$__fish_git_prompt_color_bare\fP
.IP \(bu 2
\fB$__fish_git_prompt_color_merging\fP
.UNINDENT
.sp
Some variables are only used in some modes, like when informative status is enabled:
.INDENT 0.0
.IP \(bu 2
\fB$__fish_git_prompt_char_cleanstate\fP (✔)
.IP \(bu 2
\fB$__fish_git_prompt_color_cleanstate\fP
.UNINDENT
.sp
Variables used with \fBshowdirtystate\fP:
.INDENT 0.0
.IP \(bu 2
\fB$__fish_git_prompt_char_dirtystate\fP (\fI*\fP, ✚)
.IP \(bu 2
\fB$__fish_git_prompt_char_invalidstate\fP (#, ✖)
.IP \(bu 2
\fB$__fish_git_prompt_char_stagedstate\fP (+, ●)
.IP \(bu 2
\fB$__fish_git_prompt_color_dirtystate\fP (red with showcolorhints, same as color_flags otherwise)
.IP \(bu 2
\fB$__fish_git_prompt_color_invalidstate\fP
.IP \(bu 2
\fB$__fish_git_prompt_color_stagedstate\fP (green with showcolorhints, color_flags otherwise)
.UNINDENT
.sp
Variables used with \fBshowstashstate\fP:
.INDENT 0.0
.IP \(bu 2
\fB$__fish_git_prompt_char_stashstate\fP (\fB$\fP, ⚑)
.IP \(bu 2
\fB$__fish_git_prompt_color_stashstate\fP (same as color_flags)
.UNINDENT
.sp
Variables used with \fBshowuntrackedfiles\fP:
.INDENT 0.0
.IP \(bu 2
\fB$__fish_git_prompt_char_untrackedfiles\fP (%, …)
.IP \(bu 2
\fB$__fish_git_prompt_color_untrackedfiles\fP (same as color_flags)
.UNINDENT
.sp
Variables used with \fBshowupstream\fP (also implied by informative status):
.INDENT 0.0
.IP \(bu 2
\fB$__fish_git_prompt_char_upstream_ahead\fP (>, ↑)
.IP \(bu 2
\fB$__fish_git_prompt_char_upstream_behind\fP (<, ↓)
.IP \(bu 2
\fB$__fish_git_prompt_char_upstream_diverged\fP (<>)
.IP \(bu 2
\fB$__fish_git_prompt_char_upstream_equal\fP (=)
.IP \(bu 2
\fB$__fish_git_prompt_char_upstream_prefix\fP (\(aq\(aq)
.IP \(bu 2
\fB$__fish_git_prompt_color_upstream\fP
.UNINDENT
.sp
Colors used with \fBshowcolorhints\fP:
.INDENT 0.0
.IP \(bu 2
\fB$__fish_git_prompt_color_branch\fP (green)
.IP \(bu 2
\fB$__fish_git_prompt_color_branch_detached\fP (red)
.IP \(bu 2
\fB$__fish_git_prompt_color_flags\fP (\-\-bold blue)
.UNINDENT
.sp
Note that all colors can also have a corresponding \fB_done\fP color. For example, the contents of \fB$__fish_git_prompt_color_upstream_done\fP is printed right _after_ the upstream.
.sp
See also fish_vcs_prompt, which will call all supported version control prompt functions, including git, Mercurial and Subversion.
.SS Example
.sp
A simple prompt that displays git info:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function fish_prompt
    # ...
    set \-g __fish_git_prompt_showupstream auto
    printf \(aq%s %s$\(aq $PWD (fish_git_prompt)
end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS fish_hg_prompt \- output Mercurial information for use in a prompt
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function fish_prompt
     echo \-n (pwd)(fish_hg_prompt) \(aq$ \(aq
end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
The fish_hg_prompt function displays information about the current Mercurial repository, if any.
.sp
\fI\%Mercurial\fP (\fBhg\fP) must be installed.
.sp
There are numerous customization options, which can be controlled with fish variables.
.INDENT 0.0
.IP \(bu 2
\fB$fish_color_hg_clean\fP, \fB$fish_color_hg_modified\fP and \fB$fish_color_hg_dirty\fP are colors used when the repository has the respective status.
.UNINDENT
.sp
Some colors for status symbols:
.INDENT 0.0
.IP \(bu 2
\fB$fish_color_hg_added\fP
.IP \(bu 2
\fB$fish_color_hg_renamed\fP
.IP \(bu 2
\fB$fish_color_hg_copied\fP
.IP \(bu 2
\fB$fish_color_hg_deleted\fP
.IP \(bu 2
\fB$fish_color_hg_untracked\fP
.IP \(bu 2
\fB$fish_color_hg_unmerged\fP
.UNINDENT
.sp
The status symbols themselves:
.INDENT 0.0
.IP \(bu 2
\fB$fish_prompt_hg_status_added\fP, default \(aq✚\(aq
.IP \(bu 2
\fB$fish_prompt_hg_status_modified\fP, default \(aq*\(aq
.IP \(bu 2
\fB$fish_prompt_hg_status_copied\fP, default \(aq⇒\(aq
.IP \(bu 2
\fB$fish_prompt_hg_status_deleted\fP, default \(aq✖\(aq
.IP \(bu 2
\fB$fish_prompt_hg_status_untracked\fP, default \(aq?\(aq
.IP \(bu 2
\fB$fish_prompt_hg_status_unmerged\fP, default \(aq!\(aq
.UNINDENT
.sp
Finally, \fB$fish_prompt_hg_status_order\fP, which can be used to change the order the status symbols appear in. It defaults to \fBadded modified copied deleted untracked unmerged\fP\&.
.sp
See also fish_vcs_prompt, which will call all supported version control prompt functions, including git, Mercurial and Subversion.
.SS Example
.sp
A simple prompt that displays hg info:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function fish_prompt
    ...
    printf \(aq%s %s$\(aq $PWD (fish_hg_prompt)
end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS fish_indent \- indenter and prettifier
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
fish_indent [OPTIONS] [FILE...]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBfish_indent\fP is used to indent a piece of fish code. \fBfish_indent\fP reads commands from standard input or the given filenames and outputs them to standard output or a specified file (if \fI\-w\fP is given).
.sp
The following options are available:
.INDENT 0.0
.IP \(bu 2
\fB\-w\fP or \fB\-\-write\fP indents a specified file and immediately writes to that file.
.IP \(bu 2
\fB\-i\fP or \fB\-\-no\-indent\fP do not indent commands; only reformat to one job per line.
.IP \(bu 2
\fB\-v\fP or \fB\-\-version\fP displays the current fish version and then exits.
.IP \(bu 2
\fB\-\-ansi\fP colorizes the output using ANSI escape sequences, appropriate for the current $TERM, using the colors defined in the environment (such as \fB$fish_color_command\fP).
.IP \(bu 2
\fB\-\-html\fP outputs HTML, which supports syntax highlighting if the appropriate CSS is defined. The CSS class names are the same as the variable names, such as \fBfish_color_command\fP\&.
.IP \(bu 2
\fB\-d\fP or \fB\-\-debug=CATEGORY_GLOB\fP enables debug output and specifies a glob for matching debug categories (like \fBfish \-d\fP). Defaults to empty.
.IP \(bu 2
\fB\-D\fP or \fB\-\-debug\-stack\-frames=DEBUG_LEVEL\fP specify how many stack frames to display when debug messages are written. The default is zero. A value of 3 or 4 is usually sufficient to gain insight into how a given debug call was reached but you can specify a value up to 128.
.IP \(bu 2
\fB\-\-dump\-parse\-tree\fP dumps information about the parsed statements to stderr. This is likely to be of interest only to people working on the fish source code.
.UNINDENT
.SS fish_key_reader \- explore what characters keyboard keys send
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
fish_key_reader [OPTIONS]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBfish_key_reader\fP is used to study input received from the terminal and can help with key binds. The program is interactive and works on standard input. Individual characters themselves and their hexadecimal values are displayed.
.sp
The tool will write an example \fBbind\fP command matching the character sequence captured to stdout. If the character sequence matches a special key name (see \fBbind \-\-key\-names\fP),  both \fBbind CHARS ...\fP and \fBbind \-k KEYNAME ...\fP usage will be shown. Additional details about the characters received, such as the delay between chars, are written to stderr.
.sp
The following options are available:
.INDENT 0.0
.IP \(bu 2
\fB\-c\fP or \fB\-\-continuous\fP begins a session where multiple key sequences can be inspected. By default the program exits after capturing a single key sequence.
.IP \(bu 2
\fB\-d\fP or \fB\-\-debug=CATEGORY_GLOB\fP enables debug output and specifies a glob for matching debug categories (like \fBfish \-d\fP). Defaults to empty.
.IP \(bu 2
\fB\-D\fP or \fB\-\-debug\-stack\-frames=DEBUG_LEVEL\fP specify how many stack frames to display when debug messages are written. The default is zero. A value of 3 or 4 is usually sufficient to gain insight into how a given debug call was reached but you can specify a value up to 128.
.IP \(bu 2
\fB\-h\fP or \fB\-\-help\fP prints usage information.
.IP \(bu 2
\fB\-v\fP or \fB\-\-version\fP prints fish_key_reader\(aqs version and exits.
.UNINDENT
.SS Usage Notes
.sp
The delay in milliseconds since the previous character was received is included in the diagnostic information written to stderr. This information may be useful to determine the optimal \fBfish_escape_delay_ms\fP setting or learn the amount of lag introduced by tools like \fBssh\fP, \fBmosh\fP or \fBtmux\fP\&.
.sp
\fBfish_key_reader\fP intentionally disables handling of many signals. To terminate \fBfish_key_reader\fP in \fB\-\-continuous\fP mode do:
.INDENT 0.0
.IP \(bu 2
press \fBCtrl\-C\fP twice, or
.IP \(bu 2
press \fBCtrl\-D\fP twice, or
.IP \(bu 2
type \fBexit\fP, or
.IP \(bu 2
type \fBquit\fP
.UNINDENT
.SS fish_mode_prompt \- define the appearance of the mode indicator
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function fish_mode_prompt
     echo \-n "$fish_bind_mode "
end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
The \fBfish_mode_prompt\fP function outputs the mode indicator for use in vi\-mode.
.sp
The default \fBfish_mode_prompt\fP function will output indicators about the current Vi editor mode displayed to the left of the regular prompt. Define your own function to customize the appearance of the mode indicator. You can also define an empty \fBfish_mode_prompt\fP function to remove the Vi mode indicators. The \fB$fish_bind_mode variable\fP can be used to determine the current mode. It
will be one of \fBdefault\fP, \fBinsert\fP, \fBreplace_one\fP, or \fBvisual\fP\&.
.sp
fish_mode_prompt will be executed when the vi mode changes. If it produces any output, it is displayed and used. If it does not, the other prompt functions (fish_prompt and fish_right_prompt) will be executed as well in case they contain a mode display.
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function fish_mode_prompt
  switch $fish_bind_mode
    case default
      set_color \-\-bold red
      echo \(aqN\(aq
    case insert
      set_color \-\-bold green
      echo \(aqI\(aq
    case replace_one
      set_color \-\-bold green
      echo \(aqR\(aq
    case visual
      set_color \-\-bold brmagenta
      echo \(aqV\(aq
    case \(aq*\(aq
      set_color \-\-bold red
      echo \(aq?\(aq
  end
  set_color normal
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Outputting multiple lines is not supported in \fBfish_mode_prompt\fP\&.
.SS fish_opt \- create an option spec for the argparse command
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
fish_opt [ \-h | \-\-help ]
fish_opt ( \-s X | \-\-short=X ) [ \-l LONG | \-\-long=LONG ] [ \-\-long\-only ] [ \-o | \-\-optional\-val ] [ \-r | \-\-required\-val ] [ \-\-multiple\-vals ]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
This command provides a way to produce option specifications suitable for use with the argparse command. You can, of course, write the option specs by hand without using this command. But you might prefer to use this for the clarity it provides.
.sp
The following \fBargparse\fP options are available:
.INDENT 0.0
.IP \(bu 2
\fB\-s\fP or \fB\-\-short\fP takes a single letter that is used as the short flag in the option being defined. This option is mandatory.
.IP \(bu 2
\fB\-l\fP or \fB\-\-long\fP takes a string that is used as the long flag in the option being defined. This option is optional and has no default. If no long flag is defined then only the short flag will be allowed when parsing arguments using the option spec.
.IP \(bu 2
\fB\-\-long\-only\fP means the option spec being defined will only allow the long flag name to be used. The short flag name must still be defined (i.e., \fB\-\-short\fP must be specified) but it cannot be used when parsing args using this option spec.
.IP \(bu 2
\fB\-o\fP or \fB\-\-optional\-val\fP means the option being defined can take a value but it is optional rather than required. If the option is seen more than once when parsing arguments only the last value seen is saved. This means the resulting flag variable created by \fBargparse\fP will zero elements if no value was given with the option else it will have exactly one element.
.IP \(bu 2
\fB\-r\fP or \fB\-\-required\-val\fP means the option being defined requires a value. If the option is seen more than once when parsing arguments only the last value seen is saved. This means the resulting flag variable created by \fBargparse\fP will have exactly one element.
.IP \(bu 2
\fB\-\-multiple\-vals\fP means the option being defined requires a value each time it is seen. Each instance is stored. This means the resulting flag variable created by \fBargparse\fP will have one element for each instance of this option in the args.
.IP \(bu 2
\fB\-h\fP or \fB\-\-help\fP displays help about using this command.
.UNINDENT
.SS Examples
.sp
Define a single option spec for the boolean help flag:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
set \-l options (fish_opt \-s h \-l help)
argparse $options \-\- $argv
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Same as above but with a second flag that requires a value:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
set \-l options (fish_opt \-s h \-l help)
set options $options (fish_opt \-s m \-l max \-\-required\-val)
argparse $options \-\- $argv
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Same as above but with a third flag that can be given multiple times saving the value of each instance seen and only the long flag name (\fB\-\-token\fP) can be used:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
set \-l options (fish_opt \-\-short=h \-\-long=help)
set options $options (fish_opt \-\-short=m \-\-long=max \-\-required\-val)
set options $options (fish_opt \-\-short=t \-\-long=token \-\-multiple\-vals \-\-long\-only)
argparse $options \-\- $argv
.ft P
.fi
.UNINDENT
.UNINDENT
.SS fish_prompt \- define the appearance of the command line prompt
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function fish_prompt
    ...
end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
By defining the \fBfish_prompt\fP function, the user can choose a custom prompt. The \fBfish_prompt\fP function is executed when the prompt is to be shown, and the output is used as a prompt.
.sp
The exit status of commands within \fBfish_prompt\fP will not modify the value of $status outside of the \fBfish_prompt\fP function.
.sp
\fBfish\fP ships with a number of example prompts that can be chosen with the \fBfish_config\fP command.
.SS Example
.sp
A simple prompt:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function fish_prompt \-d "Write out the prompt"
    printf \(aq%s@%s%s%s%s> \(aq (whoami) (hostname | cut \-d . \-f 1) \e
                    (set_color $fish_color_cwd) (prompt_pwd) (set_color normal)
end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS fish_right_prompt \- define the appearance of the right\-side command line prompt
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function fish_right_prompt
    ...
end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBfish_right_prompt\fP is similar to \fBfish_prompt\fP, except that it appears on the right side of the terminal window.
.sp
Multiple lines are not supported in \fBfish_right_prompt\fP\&.
.SS Example
.sp
A simple right prompt:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function fish_right_prompt \-d "Write out the right prompt"
    date \(aq+%m/%d/%y\(aq
end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS fish_svn_prompt \- output Subversion information for use in a prompt
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function fish_prompt
     echo \-n (pwd)(fish_svn_prompt) \(aq$ \(aq
end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
The fish_svn_prompt function displays information about the current Subversion repository, if any.
.sp
\fI\%Subversion\fP (\fBsvn\fP) must be installed.
.sp
There are numerous customization options, which can be controlled with fish variables.
.INDENT 0.0
.IP \(bu 2
.INDENT 2.0
.TP
.B \fB$__fish_svn_prompt_color_revision\fP
the colour of the revision number to display in the prompt
.UNINDENT
.IP \(bu 2
.INDENT 2.0
.TP
.B \fB$__fish_svn_prompt_char_separator\fP
the separator between status characters
.UNINDENT
.UNINDENT
.sp
A number of variables control the symbol ("display") and color ("color") for the different status indicators:
.INDENT 0.0
.IP \(bu 2
\fB$__fish_svn_prompt_char_added_display\fP
.IP \(bu 2
\fB$__fish_svn_prompt_char_added_color\fP
.IP \(bu 2
\fB$__fish_svn_prompt_char_conflicted_display\fP
.IP \(bu 2
\fB$__fish_svn_prompt_char_conflicted_color\fP
.IP \(bu 2
\fB$__fish_svn_prompt_char_deleted_display\fP
.IP \(bu 2
\fB$__fish_svn_prompt_char_deleted_color\fP
.IP \(bu 2
\fB$__fish_svn_prompt_char_ignored_display\fP
.IP \(bu 2
\fB$__fish_svn_prompt_char_ignored_color\fP
.IP \(bu 2
\fB$__fish_svn_prompt_char_modified_display\fP
.IP \(bu 2
\fB$__fish_svn_prompt_char_modified_color\fP
.IP \(bu 2
\fB$__fish_svn_prompt_char_replaced_display\fP
.IP \(bu 2
\fB$__fish_svn_prompt_char_replaced_color\fP
.IP \(bu 2
\fB$__fish_svn_prompt_char_unversioned_external_display\fP
.IP \(bu 2
\fB$__fish_svn_prompt_char_unversioned_external_color\fP
.IP \(bu 2
\fB$__fish_svn_prompt_char_unversioned_display\fP
.IP \(bu 2
\fB$__fish_svn_prompt_char_unversioned_color\fP
.IP \(bu 2
\fB$__fish_svn_prompt_char_missing_display\fP
.IP \(bu 2
\fB$__fish_svn_prompt_char_missing_color\fP
.IP \(bu 2
\fB$__fish_svn_prompt_char_versioned_obstructed_display\fP
.IP \(bu 2
\fB$__fish_svn_prompt_char_versioned_obstructed_color\fP
.IP \(bu 2
\fB$__fish_svn_prompt_char_locked_display\fP
.IP \(bu 2
\fB$__fish_svn_prompt_char_locked_color\fP
.IP \(bu 2
\fB$__fish_svn_prompt_char_scheduled_display\fP
.IP \(bu 2
\fB$__fish_svn_prompt_char_scheduled_color\fP
.IP \(bu 2
\fB$__fish_svn_prompt_char_switched_display\fP
.IP \(bu 2
\fB$__fish_svn_prompt_char_switched_color\fP
.IP \(bu 2
\fB$__fish_svn_prompt_char_token_present_display\fP
.IP \(bu 2
\fB$__fish_svn_prompt_char_token_present_color\fP
.IP \(bu 2
\fB$__fish_svn_prompt_char_token_other_display\fP
.IP \(bu 2
\fB$__fish_svn_prompt_char_token_other_color\fP
.IP \(bu 2
\fB$__fish_svn_prompt_char_token_stolen_display\fP
.IP \(bu 2
\fB$__fish_svn_prompt_char_token_stolen_color\fP
.IP \(bu 2
\fB$__fish_svn_prompt_char_token_broken_display\fP
.IP \(bu 2
\fB$__fish_svn_prompt_char_token_broken_color\fP
.UNINDENT
.sp
See also fish_vcs_prompt, which will call all supported version control prompt functions, including git, Mercurial and Subversion.
.SS Example
.sp
A simple prompt that displays svn info:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function fish_prompt
    ...
    printf \(aq%s %s$\(aq $PWD (fish_svn_prompt)
end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS fish_update_completions \- Update completions using manual pages
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
fish_update_completions
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBfish_update_completions\fP parses manual pages installed on the system, and attempts to create completion files in the \fBfish\fP configuration directory.
.sp
This does not overwrite custom completions.
.sp
There are no parameters for \fBfish_update_completions\fP\&.
.SS fish_vcs_prompt \- output version control system information for use in a prompt
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function fish_prompt
     echo \-n (pwd)(fish_vcs_prompt) \(aq$ \(aq
end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
The \fBfish_vcs_prompt\fP function displays information about the current version control system (VCS) repository, if any.
.sp
It calls out to VCS\-specific functions. The currently supported systems are:
.INDENT 0.0
.IP \(bu 2
fish_git_prompt
.IP \(bu 2
fish_hg_prompt
.IP \(bu 2
fish_svn_prompt
.UNINDENT
.sp
If a VCS isn\(aqt installed, the respective function does nothing.
.sp
For more information, see the documentation for each of the functions above.
.SS Example
.sp
A simple prompt that displays all known VCS info:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function fish_prompt
    ...
    set \-g __fish_git_prompt_showupstream auto
    printf \(aq%s %s$\(aq $PWD (fish_vcs_prompt)
end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS for \- perform a set of commands multiple times.
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
for VARNAME in [VALUES...]; COMMANDS...; end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBfor\fP is a loop construct. It will perform the commands specified by \fBCOMMANDS\fP multiple times. On each iteration, the local variable specified by \fBVARNAME\fP is assigned a new value from \fBVALUES\fP\&. If \fBVALUES\fP is empty, \fBCOMMANDS\fP will not be executed at all. The \fBVARNAME\fP is visible when the loop terminates and will contain the last value assigned to it. If \fBVARNAME\fP does not already exist it will be set in the local scope. For our purposes if the \fBfor\fP block is inside a function there must be a local variable with the same name. If the \fBfor\fP block is not nested inside a function then global and universal variables of the same name will be used if they exist.
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
for i in foo bar baz; echo $i; end

# would output:
foo
bar
baz
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Notes
.sp
The \fBVARNAME\fP was local to the for block in releases prior to 3.0.0. This means that if you did something like this:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
for var in a b c
    if break_from_loop
        break
    end
end
echo $var
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The last value assigned to \fBvar\fP when the loop terminated would not be available outside the loop. What \fBecho $var\fP would write depended on what it was set to before the loop was run. Likely nothing.
.SS funced \- edit a function interactively
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
funced [OPTIONS] NAME
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBfunced\fP provides an interface to edit the definition of the function \fBNAME\fP\&.
.sp
If the \fB$VISUAL\fP environment variable is set, it will be used as the program to edit the function. If \fB$VISUAL\fP is unset but \fB$EDITOR\fP is set, that will be used. Otherwise, a built\-in editor will be used. Note that to enter a literal newline using the built\-in editor you should press \fBAlt+Enter\fP\&. Pressing \fBEnter\fP signals that you are done editing the function. This does not apply to an external editor like emacs or vim.
.sp
If there is no function called \fBNAME\fP a new function will be created with the specified name
.INDENT 0.0
.IP \(bu 2
\fB\-e command\fP or \fB\-\-editor command\fP Open the function body inside the text editor given by the command (for example, \fB\-e vi\fP). The special command \fBfish\fP will use the built\-in editor (same as specifying \fB\-i\fP).
.IP \(bu 2
\fB\-i\fP or \fB\-\-interactive\fP Force opening the function body in the built\-in editor even if \fB$VISUAL\fP or \fB$EDITOR\fP is defined.
.IP \(bu 2
\fB\-s\fP or \fB\-\-save\fP Automatically save the function after successfully editing it.
.UNINDENT
.SS funcsave \- save the definition of a function to the user\(aqs autoload directory
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
funcsave FUNCTION_NAME
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBfuncsave\fP saves the current definition of a function to a file in the fish configuration directory. This function will be automatically loaded by current and future fish sessions. This can be useful if you have interactively created a new function and wish to save it for later use.
.sp
Note that because fish loads functions on\-demand, saved functions will not function as event handlers until they are run or sourced otherwise. To activate an event handler for every new shell, add the function to your shell initialization file instead of using \fBfuncsave\fP\&.
.SS function \- create a function
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function NAME [OPTIONS]; BODY; end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBfunction\fP creates a new function \fBNAME\fP with the body \fBBODY\fP\&.
.sp
A function is a list of commands that will be executed when the name of the function is given as a command.
.sp
The following options are available:
.INDENT 0.0
.IP \(bu 2
\fB\-a NAMES\fP or \fB\-\-argument\-names NAMES\fP assigns the value of successive command\-line arguments to the names given in NAMES.
.IP \(bu 2
\fB\-d DESCRIPTION\fP or \fB\-\-description=DESCRIPTION\fP is a description of what the function does, suitable as a completion description.
.IP \(bu 2
\fB\-w WRAPPED_COMMAND\fP or \fB\-\-wraps=WRAPPED_COMMAND\fP causes the function to inherit completions from the given wrapped command. See the documentation for complete for more information.
.IP \(bu 2
\fB\-e\fP or \fB\-\-on\-event EVENT_NAME\fP tells fish to run this function when the specified named event is emitted. Fish internally generates named events e.g. when showing the prompt.
.IP \(bu 2
\fB\-v\fP or \fB\-\-on\-variable VARIABLE_NAME\fP tells fish to run this function when the variable VARIABLE_NAME changes value.
.IP \(bu 2
\fB\-j PGID\fP or \fB\-\-on\-job\-exit PGID\fP tells fish to run this function when the job with group ID PGID exits. Instead of PGID, the string \(aqcaller\(aq can be specified. This is only legal when in a command substitution, and will result in the handler being triggered by the exit of the job which created this command substitution.
.IP \(bu 2
\fB\-p PID\fP or \fB\-\-on\-process\-exit PID\fP tells fish to run this function when the fish child process
with process ID PID exits. Instead of a PID, for backward compatibility,
"\fB%self\fP" can be specified as an alias for \fB$fish_pid\fP, and the function will be run when the
current fish instance exits.
.IP \(bu 2
\fB\-s\fP or \fB\-\-on\-signal SIGSPEC\fP tells fish to run this function when the signal SIGSPEC is delivered. SIGSPEC can be a signal number, or the signal name, such as SIGHUP (or just HUP).
.IP \(bu 2
\fB\-S\fP or \fB\-\-no\-scope\-shadowing\fP allows the function to access the variables of calling functions. Normally, any variables inside the function that have the same name as variables from the calling function are "shadowed", and their contents is independent of the calling function.
It\(aqs important to note that this does not capture referenced variables or the scope at the time of function declaration! At this time, fish does not have any concept of closures, and variable lifetimes are never extended. In other words, by using \fB\-\-no\-scope\-shadowing\fP the scope of the function each time it is run is shared with the scope it was \fIcalled\fP from rather than the scope it was \fIdefined\fP in.
.IP \(bu 2
\fB\-V\fP or \fB\-\-inherit\-variable NAME\fP snapshots the value of the variable \fBNAME\fP and defines a local variable with that same name and value when the function is defined. This is similar to a closure in other languages like Python but a bit different. Note the word "snapshot" in the first sentence. If you change the value of the variable after defining the function, even if you do so in the same scope (typically another function) the new value will not be used by the function you just created using this option. See the \fBfunction notify\fP example below for how this might be used.
.UNINDENT
.sp
If the user enters any additional arguments after the function, they are inserted into the environment variable list \fB$argv\fP\&. If the \fB\-\-argument\-names\fP option is provided, the arguments are also assigned to names specified in that option.
.sp
By using one of the event handler switches, a function can be made to run automatically at specific events. The user may generate new events using the emit builtin. Fish generates the following named events:
.INDENT 0.0
.IP \(bu 2
\fBfish_prompt\fP, which is emitted whenever a new fish prompt is about to be displayed.
.IP \(bu 2
\fBfish_command_not_found\fP, which is emitted whenever a command lookup failed.
.IP \(bu 2
\fBfish_preexec\fP, which is emitted right before executing an interactive command. The commandline is passed as the first parameter.
.sp
Note: This event will be emitted even if the command is invalid. The commandline parameter includes the entire commandline verbatim, and may potentially include newlines.
.IP \(bu 2
\fBfish_postexec\fP, which is emitted right after executing an interactive command. The commandline is passed as the first parameter.
.sp
Note: This event will be emitted even if the command is invalid. The commandline parameter includes the entire commandline verbatim, and may potentially include newlines.
.IP \(bu 2
\fBfish_exit\fP is emitted right before fish exits.
.IP \(bu 2
\fBfish_cancel\fP, which is emitted when a commandline is cleared (used for terminal\-shell integration).
.UNINDENT
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function ll
    ls \-l $argv
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
will run the \fBls\fP command, using the \fB\-l\fP option, while passing on any additional files and switches to \fBls\fP\&.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function mkdir \-d "Create a directory and set CWD"
    command mkdir $argv
    if test $status = 0
        switch $argv[(count $argv)]
            case \(aq\-*\(aq

            case \(aq*\(aq
                cd $argv[(count $argv)]
                return
        end
    end
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This will run the \fBmkdir\fP command, and if it is successful, change the current working directory to the one just created.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function notify
    set \-l job (jobs \-l \-g)
    or begin; echo "There are no jobs" >&2; return 1; end

    function _notify_job_$job \-\-on\-job\-exit $job \-\-inherit\-variable job
        echo \-n \ea # beep
        functions \-e _notify_job_$job
    end
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This will beep when the most recent job completes.
.SS Notes
.sp
Note that events are only received from the current fish process as there is no way to send events from one fish process to another.
.SS functions \- print or erase functions
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
functions [ \-a | \-\-all ] [ \-n | \-\-names ]
functions [ \-D | \-\-details ] [ \-v ] FUNCTION
functions \-c OLDNAME NEWNAME
functions \-d DESCRIPTION FUNCTION
functions [ \-e | \-q ] FUNCTIONS...
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBfunctions\fP prints or erases functions.
.sp
The following options are available:
.INDENT 0.0
.IP \(bu 2
\fB\-a\fP or \fB\-\-all\fP lists all functions, even those whose name starts with an underscore.
.IP \(bu 2
\fB\-c OLDNAME NEWNAME\fP or \fB\-\-copy OLDNAME NEWNAME\fP creates a new function named NEWNAME, using the definition of the OLDNAME function.
.IP \(bu 2
\fB\-d DESCRIPTION\fP or \fB\-\-description=DESCRIPTION\fP changes the description of this function.
.IP \(bu 2
\fB\-e\fP or \fB\-\-erase\fP causes the specified functions to be erased. This also means that it is prevented from autoloading.
.IP \(bu 2
\fB\-D\fP or \fB\-\-details\fP reports the path name where each function is defined or could be autoloaded, \fBstdin\fP if the function was defined interactively or on the command line or by reading stdin, \fB\-\fP if the function was created via \fBsource\fP, and \fBn/a\fP if the function isn\(aqt available. (Functions created via \fBalias\fP will return \fB\-\fP, because \fBalias\fP uses \fBsource\fP internally.) If the \fB\-\-verbose\fP option is also specified then five lines are written:
.INDENT 2.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
the pathname as already described,
.IP \(bu 2
\fBautoloaded\fP, \fBnot\-autoloaded\fP or \fBn/a\fP,
.IP \(bu 2
the line number within the file or zero if not applicable,
.IP \(bu 2
\fBscope\-shadowing\fP if the function shadows the vars in the calling function (the normal case if it wasn\(aqt defined with \fB\-\-no\-scope\-shadowing\fP), else \fBno\-scope\-shadowing\fP, or \fBn/a\fP if the function isn\(aqt defined,
.IP \(bu 2
the function description minimally escaped so it is a single line or \fBn/a\fP if the function isn\(aqt defined.
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
You should not assume that only five lines will be written since we may add additional information to the output in the future.
.INDENT 0.0
.IP \(bu 2
\fB\-n\fP or \fB\-\-names\fP lists the names of all defined functions.
.IP \(bu 2
\fB\-q\fP or \fB\-\-query\fP tests if the specified functions exist.
.IP \(bu 2
\fB\-v\fP or \fB\-\-verbose\fP will make some output more verbose.
.IP \(bu 2
\fB\-H\fP or \fB\-\-handlers\fP will show all event handlers.
.IP \(bu 2
\fB\-t\fP or \fB\-\-handlers\-type TYPE\fP will show all event handlers matching the given type
.UNINDENT
.sp
The default behavior of \fBfunctions\fP, when called with no arguments, is to print the names of all defined functions. Unless the \fB\-a\fP option is given, no functions starting with underscores are not included in the output.
.sp
If any non\-option parameters are given, the definition of the specified functions are printed.
.sp
Automatically loaded functions cannot be removed using \fBfunctions \-e\fP\&. Either remove the definition file or change the $fish_function_path variable to remove autoloaded functions.
.sp
Copying a function using \fB\-c\fP copies only the body of the function, and does not attach any event notifications from the original function.
.sp
Only one function\(aqs description can be changed in a single invocation of \fBfunctions \-d\fP\&.
.sp
The exit status of \fBfunctions\fP is the number of functions specified in the argument list that do not exist, which can be used in concert with the \fB\-q\fP option.
.SS Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
functions \-n
# Displays a list of currently\-defined functions

functions \-c foo bar
# Copies the \(aqfoo\(aq function to a new function called \(aqbar\(aq

functions \-e bar
# Erases the function \(ga\(gabar\(ga\(ga
.ft P
.fi
.UNINDENT
.UNINDENT
.SS help \- display fish documentation
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
help [SECTION]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBhelp\fP displays the fish help documentation.
.sp
If a \fBSECTION\fP is specified, the help for that command is shown.
.sp
If the BROWSER environment variable is set, it will be used to display the documentation. Otherwise, fish will search for a suitable browser.
.sp
If you prefer to use a different browser (other than as described above) for fish help, you can set the fish_help_browser variable. This variable may be set as a list, where the first element is the browser command and the rest are browser options.
.sp
Note that most builtin commands display their help in the terminal when given the \fB\-\-help\fP option.
.SS Example
.sp
\fBhelp fg\fP shows the documentation for the \fBfg\fP builtin.
.SS history \- Show and manipulate command history
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
history search [ \-\-show\-time ] [ \-\-case\-sensitive ] [ \-\-exact | \-\-prefix | \-\-contains ] [ \-\-max=n ] [ \-\-null ] [ \-R | \-\-reverse ] [ "search string"... ]
history delete [ \-\-show\-time ] [ \-\-case\-sensitive ] [ \-\-exact | \-\-prefix | \-\-contains ] "search string"...
history merge
history save
history clear
history ( \-h | \-\-help )
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBhistory\fP is used to search, delete, and otherwise manipulate the history of interactive commands\&.
.sp
The following operations (sub\-commands) are available:
.INDENT 0.0
.IP \(bu 2
\fBsearch\fP returns history items matching the search string. If no search string is provided it returns all history items. This is the default operation if no other operation is specified. You only have to explicitly say \fBhistory search\fP if you wish to search for one of the subcommands. The \fB\-\-contains\fP search option will be used if you don\(aqt specify a different search option. Entries are ordered newest to oldest unless you use the \fB\-\-reverse\fP flag. If stdout is attached to a tty the output will be piped through your pager by the history function. The history builtin simply writes the results to stdout.
.IP \(bu 2
\fBdelete\fP deletes history items. The \fB\-\-contains\fP search option will be used if you don\(aqt specify a different search option. If you don\(aqt specify \fB\-\-exact\fP a prompt will be displayed before any items are deleted asking you which entries are to be deleted. You can enter the word "all" to delete all matching entries. You can enter a single ID (the number in square brackets) to delete just that single entry. You can enter more than one ID separated by a space to delete multiple entries. Just press [enter] to not delete anything. Note that the interactive delete behavior is a feature of the history function. The history builtin only supports \fB\-\-exact \-\-case\-sensitive\fP deletion.
.IP \(bu 2
\fBmerge\fP immediately incorporates history changes from other sessions. Ordinarily \fBfish\fP ignores history changes from sessions started after the current one. This command applies those changes immediately.
.IP \(bu 2
\fBsave\fP immediately writes all changes to the history file. The shell automatically saves the history file; this option is provided for internal use and should not normally need to be used by the user.
.IP \(bu 2
\fBclear\fP clears the history file. A prompt is displayed before the history is erased asking you to confirm you really want to clear all history unless \fBbuiltin history\fP is used.
.UNINDENT
.sp
The following options are available:
.sp
These flags can appear before or immediately after one of the sub\-commands listed above.
.INDENT 0.0
.IP \(bu 2
\fB\-C\fP or \fB\-\-case\-sensitive\fP does a case\-sensitive search. The default is case\-insensitive. Note that prior to fish 2.4.0 the default was case\-sensitive.
.IP \(bu 2
\fB\-c\fP or \fB\-\-contains\fP searches or deletes items in the history that contain the specified text string. This is the default for the \fB\-\-search\fP flag. This is not currently supported by the \fBdelete\fP subcommand.
.IP \(bu 2
\fB\-e\fP or \fB\-\-exact\fP searches or deletes items in the history that exactly match the specified text string. This is the default for the \fBdelete\fP subcommand. Note that the match is case\-insensitive by default. If you really want an exact match, including letter case, you must use the \fB\-C\fP or \fB\-\-case\-sensitive\fP flag.
.IP \(bu 2
\fB\-p\fP or \fB\-\-prefix\fP searches or deletes items in the history that begin with the specified text string. This is not currently supported by the \fB\-\-delete\fP flag.
.IP \(bu 2
\fB\-t\fP or \fB\-\-show\-time\fP prepends each history entry with the date and time the entry was recorded. By default it uses the strftime format \fB# %c%n\fP\&. You can specify another format; e.g., \fB\-\-show\-time="%Y\-%m\-%d %H:%M:%S "\fP or \fB\-\-show\-time="%a%I%p"\fP\&. The short option, \fB\-t\fP, doesn\(aqt accept a strftime format string; it only uses the default format. Any strftime format is allowed, including \fB%s\fP to get the raw UNIX seconds since the epoch.
.IP \(bu 2
\fB\-z\fP or \fB\-\-null\fP causes history entries written by the search operations to be terminated by a NUL character rather than a newline. This allows the output to be processed by \fBread \-z\fP to correctly handle multiline history entries.
.IP \(bu 2
\fB\-<number>\fP \fB\-n <number>\fP or \fB\-\-max=<number>\fP limits the matched history items to the first "n" matching entries. This is only valid for \fBhistory search\fP\&.
.IP \(bu 2
\fB\-R\fP or \fB\-\-reverse\fP causes the history search results to be ordered oldest to newest. Which is the order used by most shells. The default is newest to oldest.
.IP \(bu 2
\fB\-h\fP or \fB\-\-help\fP display help for this command.
.UNINDENT
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
history clear
# Deletes all history items

history search \-\-contains "foo"
# Outputs a list of all previous commands containing the string "foo".

history delete \-\-prefix "foo"
# Interactively deletes commands which start with "foo" from the history.
# You can select more than one entry by entering their IDs separated by a space.
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Customizing the name of the history file
.sp
By default interactive commands are logged to \fB$XDG_DATA_HOME/fish/fish_history\fP (typically \fB~/.local/share/fish/fish_history\fP).
.sp
You can set the \fBfish_history\fP variable to another name for the current shell session. The default value (when the variable is unset) is \fBfish\fP which corresponds to \fB$XDG_DATA_HOME/fish/fish_history\fP\&. If you set it to e.g. \fBfun\fP, the history would be written to \fB$XDG_DATA_HOME/fish/fun_history\fP\&. An empty string means history will not be stored at all. This is similar to the private session features in web browsers.
.sp
You can change \fBfish_history\fP at any time (by using \fBset \-x fish_history "session_name"\fP) and it will take effect right away. If you set it to \fB"default"\fP, it will use the default session name (which is \fB"fish"\fP).
.sp
Other shells such as bash and zsh use a variable named \fBHISTFILE\fP for a similar purpose. Fish uses a different name to avoid conflicts and signal that the behavior is different (session name instead of a file path). Also, if you set the var to anything other than \fBfish\fP or \fBdefault\fP it will inhibit importing the bash history. That\(aqs because the most common use case for this feature is to avoid leaking private or sensitive history when giving a presentation.
.SS Notes
.sp
If you specify both \fB\-\-prefix\fP and \fB\-\-contains\fP the last flag seen is used.
.sp
Note that for backwards compatibility each subcommand can also be specified as a long option. For example, rather than \fBhistory search\fP you can type \fBhistory \-\-search\fP\&. Those long options are deprecated and will be removed in a future release.
.SS if \- conditionally execute a command
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
if CONDITION; COMMANDS_TRUE...;
[else if CONDITION2; COMMANDS_TRUE2...;]
[else; COMMANDS_FALSE...;]
end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBif\fP will execute the command \fBCONDITION\fP\&. If the condition\(aqs exit status is 0, the commands \fBCOMMANDS_TRUE\fP will execute.  If the exit status is not 0 and else is given, \fBCOMMANDS_FALSE\fP will be executed.
.sp
You can use and or or in the condition. See the second example below.
.sp
The exit status of the last foreground command to exit can always be accessed using the $status variable.
.SS Example
.sp
The following code will print \fBfoo.txt exists\fP if the file foo.txt exists and is a regular file, otherwise it will print \fBbar.txt exists\fP if the file bar.txt exists and is a regular file, otherwise it will print \fBfoo.txt and bar.txt do not exist\fP\&.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
if test \-f foo.txt
    echo foo.txt exists
else if test \-f bar.txt
    echo bar.txt exists
else
    echo foo.txt and bar.txt do not exist
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The following code will print "foo.txt exists and is readable" if foo.txt is a regular file and readable
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
if test \-f foo.txt
   and test \-r foo.txt
   echo "foo.txt exists and is readable"
end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS isatty \- test if a file descriptor is a terminal
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
isatty [FILE DESCRIPTOR]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBisatty\fP tests if a file descriptor is a terminal (as opposed to a file). The name is derived from the system call of the same name, which for historical reasons refers to a teletypewriter (TTY).
.sp
\fBFILE DESCRIPTOR\fP may be either the number of a file descriptor, or one of the strings \fBstdin\fP, \fBstdout\fP, or \fBstderr\fP\&.
.sp
If the specified file descriptor is a terminal device, the exit status of the command is zero. Otherwise, the exit status is non\-zero. No messages are printed to standard error.
.SS Examples
.sp
From an interactive shell, the commands below exit with a return value of zero:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
isatty
isatty stdout
isatty 2
echo | isatty 1
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
And these will exit non\-zero:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
echo | isatty
isatty 9
isatty stdout > file
isatty 2 2> file
.ft P
.fi
.UNINDENT
.UNINDENT
.SS jobs \- print currently running jobs
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
jobs [OPTIONS] [PID]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBjobs\fP prints a list of the currently running jobs and their status.
.sp
jobs accepts the following switches:
.INDENT 0.0
.IP \(bu 2
\fB\-c\fP or \fB\-\-command\fP prints the command name for each process in jobs.
.IP \(bu 2
\fB\-g\fP or \fB\-\-group\fP only prints the group ID of each job.
.IP \(bu 2
\fB\-l\fP or \fB\-\-last\fP prints only the last job to be started.
.IP \(bu 2
\fB\-p\fP or \fB\-\-pid\fP prints the process ID for each process in all jobs.
.IP \(bu 2
\fB\-q\fP or \fB\-\-quiet\fP prints no output for evaluation of jobs by exit status only.
.UNINDENT
.sp
On systems that supports this feature, jobs will print the CPU usage of each job since the last command was executed. The CPU usage is expressed as a percentage of full CPU activity. Note that on multiprocessor systems, the total activity may be more than 100%.
.sp
The exit status of the \fBjobs\fP builtin is \fB0\fP if there are running background jobs and \fB1\fP otherwise.
.SS no output.
.SS Example
.sp
\fBjobs\fP outputs a summary of the current jobs.
.SS math \- Perform mathematics calculations
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
math [\-sN | \-\-scale=N] [\-\-] EXPRESSION
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBmath\fP is used to perform mathematical calculations. It supports all the usual operations such as addition, subtraction, etc. As well as functions like \fBabs()\fP, \fBsqrt()\fP and \fBlog2()\fP\&.
.sp
By default, the output is as a float with trailing zeroes trimmed. To get a fixed representation, the \fB\-\-scale\fP option can be used, including \fB\-\-scale=0\fP for integer output.
.sp
Keep in mind that parameter expansion takes before expressions are evaluated. This can be very useful in order to perform calculations involving shell variables or the output of command substitutions, but it also means that parenthesis (\fB()\fP) and the asterisk (\fB*\fP) glob character have to be escaped or quoted. \fBx\fP can also be used to denote multiplication, but it needs to be followed by whitespace to distinguish it from hexadecimal numbers.
.sp
\fBmath\fP ignores whitespace between arguments and takes its input as multiple arguments (internally joined with a space), so \fBmath 2 +2\fP and \fBmath "2 +    2"\fP work the same. \fBmath 2 2\fP is an error.
.sp
The following options are available:
.INDENT 0.0
.IP \(bu 2
\fB\-sN\fP or \fB\-\-scale=N\fP sets the scale of the result. \fBN\fP must be an integer or the word "max" for the maximum scale. A scale of zero causes results to be rounded down to the nearest integer. So \fB3/2\fP returns \fB1\fP rather than \fB2\fP which \fB1.5\fP would normally round to. This is for compatibility with \fBbc\fP which was the basis for this command prior to fish 3.0.0. Scale values greater than zero causes the result to be rounded using the usual rules to the specified number of decimal places.
.UNINDENT
.SS Return Values
.sp
If the expression is successfully evaluated and doesn\(aqt over/underflow or return NaN the return \fBstatus\fP is zero (success) else one.
.SS Syntax
.sp
\fBmath\fP knows some operators, constants, functions and can (obviously) read numbers.
.sp
For numbers, \fB\&.\fP is always the radix character regardless of locale \- \fB2.5\fP, not \fB2,5\fP\&. Scientific notation (\fB10e5\fP) is also available.
.SS Operators
.sp
\fBmath\fP knows the following operators:
.INDENT 0.0
.IP \(bu 2
\fB+\fP for addition and \fB\-\fP for subtraction.
.IP \(bu 2
\fB*\fP or \fBx\fP for multiplication, \fB/\fP for division. (Note that \fB*\fP is the glob character and needs to be quoted or escaped, \fBx\fP needs to be followed by whitespace or it looks like \fB0x\fP hexadecimal notation.)
.IP \(bu 2
\fB^\fP for exponentiation.
.IP \(bu 2
\fB%\fP for modulo.
.IP \(bu 2
\fB(\fP and \fB)\fP for grouping. (These need to be quoted or escaped because \fB()\fP denotes a command substitution.)
.UNINDENT
.sp
They are all used in an infix manner \- \fB5 + 2\fP, not \fB+ 5 2\fP\&.
.SS Constants
.sp
\fBmath\fP knows the following constants:
.INDENT 0.0
.IP \(bu 2
\fBe\fP \- Euler\(aqs number.
.IP \(bu 2
\fBpi\fP \- You know that one. Half of Tau. (Tau is not implemented)
.UNINDENT
.sp
Use them without a leading \fB$\fP \- \fBpi \- 3\fP should be about 0.
.SS Functions
.sp
\fBmath\fP supports the following functions:
.INDENT 0.0
.IP \(bu 2
\fBabs\fP
.IP \(bu 2
\fBacos\fP
.IP \(bu 2
\fBasin\fP
.IP \(bu 2
\fBatan\fP
.IP \(bu 2
\fBatan2\fP
.IP \(bu 2
\fBceil\fP
.IP \(bu 2
\fBcos\fP
.IP \(bu 2
\fBcosh\fP
.IP \(bu 2
\fBexp\fP \- the base\-e exponential function
.IP \(bu 2
\fBfac\fP \- factorial
.IP \(bu 2
\fBfloor\fP
.IP \(bu 2
\fBln\fP
.IP \(bu 2
\fBlog\fP or \fBlog10\fP \- the base\-10 logarithm
.IP \(bu 2
\fBncr\fP
.IP \(bu 2
\fBnpr\fP
.IP \(bu 2
\fBpow(x,y)\fP returns x to the y (and can be written as \fBx ^ y\fP)
.IP \(bu 2
\fBround\fP \- rounds to the nearest integer, away from 0
.IP \(bu 2
\fBsin\fP
.IP \(bu 2
\fBsinh\fP
.IP \(bu 2
\fBsqrt\fP
.IP \(bu 2
\fBtan\fP
.IP \(bu 2
\fBtanh\fP
.UNINDENT
.sp
All of the trigonometric functions use radians.
.SS Examples
.sp
\fBmath 1+1\fP outputs 2.
.sp
\fBmath $status \- 128\fP outputs the numerical exit status of the last command minus 128.
.sp
\fBmath 10 / 6\fP outputs \fB1.666667\fP\&.
.sp
\fBmath \-s0 10.0 / 6.0\fP outputs \fB1\fP\&.
.sp
\fBmath \-s3 10 / 6\fP outputs \fB1.666\fP\&.
.sp
\fBmath "sin(pi)"\fP outputs \fB0\fP\&.
.sp
\fBmath 5 \e* 2\fP or \fBmath "5 * 2"\fP or \fBmath 5 "*" 2\fP all output \fB10\fP\&.
.sp
\fBmath 0xFF\fP outputs 255, \fBmath 0 x 3\fP outputs 0 (because it computes 0 multiplied by 3).
.SS Compatibility notes
.sp
Fish 1.x and 2.x releases relied on the \fBbc\fP command for handling \fBmath\fP expressions. Starting with fish 3.0.0 fish uses the tinyexpr library and evaluates the expression without the involvement of any external commands.
.sp
You don\(aqt need to use \fB\-\-\fP before the expression even if it begins with a minus sign which might otherwise be interpreted as an invalid option. If you do insert \fB\-\-\fP before the expression it will cause option scanning to stop just like for every other command and it won\(aqt be part of the expression.
.SS nextd \- move forward through directory history
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
nextd [ \-l | \-\-list ] [POS]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBnextd\fP moves forwards \fBPOS\fP positions in the history of visited directories; if the end of the history has been hit, a warning is printed.
.sp
If the \fB\-l\fP or \fB\-\-list\fP flag is specified, the current directory history is also displayed.
.sp
Note that the \fBcd\fP command limits directory history to the 25 most recently visited directories. The history is stored in the \fB$dirprev\fP and \fB$dirnext\fP variables which this command manipulates.
.sp
You may be interested in the cdh command which provides a more intuitive way to navigate to recently visited directories.
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
cd /usr/src
# Working directory is now /usr/src

cd /usr/src/fish\-shell
# Working directory is now /usr/src/fish\-shell

prevd
# Working directory is now /usr/src

nextd
# Working directory is now /usr/src/fish\-shell
.ft P
.fi
.UNINDENT
.UNINDENT
.SS not \- negate the exit status of a job
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
not COMMAND [OPTIONS...]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBnot\fP negates the exit status of another command. If the exit status is zero, \fBnot\fP returns 1. Otherwise, \fBnot\fP returns 0.
.SS Example
.sp
The following code reports an error and exits if no file named spoon can be found.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
if not test \-f spoon
    echo There is no spoon
    exit 1
end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS open \- open file in its default application
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
open FILES...
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBopen\fP opens a file in its default application, using the appropriate tool for the operating system. On GNU/Linux, this requires the common but optional \fBxdg\-open\fP utility, from the \fBxdg\-utils\fP package.
.sp
Note that this function will not be used if a command by this name exists (which is the case on macOS or Haiku).
.SS Example
.sp
\fBopen *.txt\fP opens all the text files in the current directory using your system\(aqs default text editor.
.SS or \- conditionally execute a command
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
COMMAND1; or COMMAND2
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBor\fP is used to execute a command if the previous command was not successful (returned a status of something other than 0).
.sp
\fBor\fP statements may be used as part of the condition in an and or while block. See the documentation
for if and while for examples.
.sp
\fBor\fP does not change the current exit status itself, but the command it runs most likely will. The exit status of the last foreground command to exit can always be accessed using the $status variable.
.SS Example
.sp
The following code runs the \fBmake\fP command to build a program. If the build succeeds, the program is installed. If either step fails, \fBmake clean\fP is run, which removes the files created by the build process.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
make; and make install; or make clean
.ft P
.fi
.UNINDENT
.UNINDENT
.SS popd \- move through directory stack
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
popd
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBpopd\fP removes the top directory from the directory stack and changes the working directory to the new top directory. Use pushd to add directories to the stack or dirs to print it.
.sp
You may be interested in the cdh command which provides a more intuitive way to navigate to recently visited directories.
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
pushd /usr/src
# Working directory is now /usr/src
# Directory stack contains /usr/src

pushd /usr/src/fish\-shell
# Working directory is now /usr/src/fish\-shell
# Directory stack contains /usr/src /usr/src/fish\-shell

popd
# Working directory is now /usr/src
# Directory stack contains /usr/src
.ft P
.fi
.UNINDENT
.UNINDENT
.SS prevd \- move backward through directory history
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
prevd [ \-l | \-\-list ] [POS]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBprevd\fP moves backwards \fBPOS\fP positions in the history of visited directories; if the beginning of the history has been hit, a warning is printed.
.sp
If the \fB\-l\fP or \fB\-\-list\fP flag is specified, the current history is also displayed.
.sp
Note that the \fBcd\fP command limits directory history to the 25 most recently visited directories. The history is stored in the \fB$dirprev\fP and \fB$dirnext\fP variables which this command manipulates.
.sp
You may be interested in the cdh command which provides a more intuitive way to navigate to recently visited directories.
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
cd /usr/src
# Working directory is now /usr/src

cd /usr/src/fish\-shell
# Working directory is now /usr/src/fish\-shell

prevd
# Working directory is now /usr/src

nextd
# Working directory is now /usr/src/fish\-shell
.ft P
.fi
.UNINDENT
.UNINDENT
.SS printf \- display text according to a format string
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
printf FORMAT [ARGUMENT ...]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
printf formats the string FORMAT with ARGUMENT, and displays the result.
.sp
The string FORMAT should contain format specifiers, each of which are replaced with successive arguments according to the specifier. Specifiers are detailed below, and are taken from the C library function \fBprintf(3)\fP\&.
.sp
Unlike echo, \fBprintf\fP does not append a new line unless it is specified as part of the string.
.sp
Valid format specifiers are:
.INDENT 0.0
.IP \(bu 2
\fB%d\fP: Argument will be used as decimal integer (signed or unsigned)
.IP \(bu 2
\fB%i\fP: Argument will be used as a signed integer
.IP \(bu 2
\fB%o\fP: An octal unsigned integer
.IP \(bu 2
\fB%u\fP: An unsigned decimal integer
.IP \(bu 2
\fB%x\fP or \fB%X\fP: An unsigned hexadecimal integer
.IP \(bu 2
\fB%f\fP, \fB%g\fP or \fB%G\fP: A floating\-point number
.IP \(bu 2
\fB%e\fP or \fB%E\fP: A floating\-point number in scientific (XXXeYY) notation
.IP \(bu 2
\fB%s\fP: A string
.IP \(bu 2
\fB%b\fP: As a string, interpreting backslash escapes, except that octal escapes are of the form 0 or 0ooo.
.UNINDENT
.sp
\fB%%\fP signifies a literal "%".
.sp
Note that conversion may fail, e.g. "102.234" will not losslessly convert to an integer, causing printf to print an error.
.sp
printf also knows a number of backslash escapes:
\- \fB\e"\fP double quote
\- \fB\e\e\fP backslash
\- \fB\ea\fP alert (bell)
\- \fB\eb\fP backspace
\- \fB\ec\fP produce no further output
\- \fB\ee\fP escape
\- \fB\ef\fP form feed
\- \fB\en\fP new line
\- \fB\er\fP carriage return
\- \fB\et\fP horizontal tab
\- \fB\ev\fP vertical tab
\- \fB\eooo\fP octal number (ooo is 1 to 3 digits)
\- \fB\exhh\fP hexadecimal number (hhh is 1 to 2 digits)
\- \fB\euhhhh\fP 16\-bit Unicode character (hhhh is 4 digits)
\- \fB\eUhhhhhhhh\fP 32\-bit Unicode character (hhhhhhhh is 8 digits)
.sp
The \fBformat\fP argument is re\-used as many times as necessary to convert all of the given arguments. If a format specifier is not appropriate for the given argument, an error is printed. For example, \fBprintf \(aq%d\(aq "102.234"\fP produces an error, as "102.234" cannot be formatted as an integer.
.sp
This file has been imported from the printf in GNU Coreutils version 6.9. If you would like to use a newer version of printf, for example the one shipped with your OS, try \fBcommand printf\fP\&.
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
printf \(aq%s\e\et%s\e\en\(aq flounder fish
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Will print "flounder    fish" (separated with a tab character), followed by a newline character. This is useful for writing completions, as fish expects completion scripts to output the option followed by the description, separated with a tab character.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
printf \(aq%s: %d\(aq "Number of bananas in my pocket" 42
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Will print "Number of bananas in my pocket: 42", _without_ a newline.
.SS prompt_pwd \- Print pwd suitable for prompt
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function fish_prompt
    echo \-n (prompt_pwd) \(aq$ \(aq
end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBprompt_pwd\fP is a function to print the current working directory in a way suitable for prompts. It will replace the home directory with "~" and shorten every path component but the last to a default of one character.
.sp
To change the number of characters per path component, set \fB$fish_prompt_pwd_dir_length\fP to the number of characters. Setting it to 0 or an invalid value will disable shortening entirely.
.SS Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ cd ~/
>_ echo $PWD
/home/alfa

>_ prompt_pwd
~

>_ cd /tmp/banana/sausage/with/mustard
>_ prompt_pwd
/t/b/s/w/mustard

>_ set \-g fish_prompt_pwd_dir_length 3
>_ prompt_pwd
/tmp/ban/sau/wit/mustard
.ft P
.fi
.UNINDENT
.UNINDENT
.SS psub \- perform process substitution
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
COMMAND1 ( COMMAND2 | psub [\-F | \-\-fifo] [\-f | \-\-file] [\-s SUFFIX])
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
Some shells (e.g., ksh, bash) feature a syntax that is a mix between command substitution and piping, called process substitution. It is used to send the output of a command into the calling command, much like command substitution, but with the difference that the output is not sent through commandline arguments but through a named pipe, with the filename of the named pipe sent as an argument to the calling program. \fBpsub\fP combined with a regular command substitution provides the same functionality.
.sp
The following options are available:
.INDENT 0.0
.IP \(bu 2
\fB\-f\fP or \fB\-\-file\fP will cause psub to use a regular file instead of a named pipe to communicate with the calling process. This will cause \fBpsub\fP to be significantly slower when large amounts of data are involved, but has the advantage that the reading process can seek in the stream. This is the default.
.IP \(bu 2
\fB\-F\fP or \fB\-\-fifo\fP will cause psub to use a named pipe rather than a file. You should only use this if the command produces no more than 8 KiB of output. The limit on the amount of data a FIFO can buffer varies with the OS but is typically 8 KiB, 16 KiB or 64 KiB. If you use this option and the command on the left of the psub pipeline produces more output a deadlock is likely to occur.
.IP \(bu 2
\fB\-s\fP or \fB\-\-suffix\fP will append SUFFIX to the filename.
.UNINDENT
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
diff (sort a.txt | psub) (sort b.txt | psub)
# shows the difference between the sorted versions of files \(ga\(gaa.txt\(ga\(ga and \(ga\(gab.txt\(ga\(ga.

source\-highlight \-f esc (cpp main.c | psub \-f \-s .c)
# highlights \(ga\(gamain.c\(ga\(ga after preprocessing as a C source.
.ft P
.fi
.UNINDENT
.UNINDENT
.SS pushd \- push directory to directory stack
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
pushd [DIRECTORY]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
The \fBpushd\fP function adds \fBDIRECTORY\fP to the top of the directory stack and makes it the current working directory. popd will pop it off and return to the original directory.
.sp
Without arguments, it exchanges the top two directories in the stack.
.sp
\fBpushd +NUMBER\fP rotates the stack counter\-clockwise i.e. from bottom to top
.sp
\fBpushd \-NUMBER\fP rotates clockwise i.e. top to bottom.
.sp
See also dirs to print the stack and \fBdirs \-c\fP to clear it.
.sp
You may be interested in the cdh command which provides a more intuitive way to navigate to recently visited directories.
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
pushd /usr/src
# Working directory is now /usr/src
# Directory stack contains /usr/src

pushd /usr/src/fish\-shell
# Working directory is now /usr/src/fish\-shell
# Directory stack contains /usr/src /usr/src/fish\-shell

pushd /tmp/
# Working directory is now /tmp
# Directory stack contains /tmp /usr/src /usr/src/fish\-shell

pushd +1
# Working directory is now /usr/src
# Directory stack contains /usr/src /usr/src/fish\-shell /tmp

popd
# Working directory is now /usr/src/fish\-shell
# Directory stack contains /usr/src/fish\-shell /tmp
.ft P
.fi
.UNINDENT
.UNINDENT
.SS pwd \- output the current working directory
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
pwd
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBpwd\fP outputs (prints) the current working directory.
.sp
The following options are available:
.INDENT 0.0
.IP \(bu 2
\fB\-L\fP, Output the logical working directory, without resolving symlinks (default behavior).
.IP \(bu 2
\fB\-P\fP, Output the physical working directory, with symlinks resolved.
.UNINDENT
.SS random \- generate random number
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
random
random SEED
random START END
random START STEP END
random choice [ITEMS...]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBRANDOM\fP generates a pseudo\-random integer from a uniform distribution. The
range (inclusive) is dependent on the arguments passed.
No arguments indicate a range of [0; 32767].
If one argument is specified, the internal engine will be seeded with the
argument for future invocations of \fBRANDOM\fP and no output will be produced.
Two arguments indicate a range of [START; END].
Three arguments indicate a range of [START; END] with a spacing of STEP
between possible outputs.
\fBRANDOM choice\fP will select one random item from the succeeding arguments.
.sp
Note that seeding the engine will NOT give the same result across different
systems.
.sp
You should not consider \fBRANDOM\fP cryptographically secure, or even
statistically accurate.
.SS Example
.sp
The following code will count down from a random even number between 10 and 20 to 1:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
for i in (seq (random 10 2 20) \-1 1)
    echo $i
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
And this will open a random picture from any of the subdirectories:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
open (random choice **jpg)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS read \- read line of input into variables
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
read [OPTIONS] [VARIABLE ...]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBread\fP reads from standard input and either writes the result back to standard output (for use in command substitution), or stores the result in one or more shell variables. By default, \fBread\fP reads a single line and splits it into variables on spaces or tabs. Alternatively, a null character or a maximum number of characters can be used to terminate the input, and other delimiters can be given. Unlike other shells, there is no default variable (such as \fBREPLY\fP) for storing the result \- instead, it is printed on standard output.
.sp
The following options are available:
.INDENT 0.0
.IP \(bu 2
\fB\-c CMD\fP or \fB\-\-command=CMD\fP sets the initial string in the interactive mode command buffer to \fBCMD\fP\&.
.IP \(bu 2
\fB\-d DELIMITER\fP or \fB\-\-delimiter=DELIMITER\fP splits on DELIMITER. DELIMITER will be used as an entire string to split on, not a set of characters.
.IP \(bu 2
\fB\-g\fP or \fB\-\-global\fP makes the variables global.
.IP \(bu 2
\fB\-s\fP or \fB\-\-silent\fP masks characters written to the terminal, replacing them with asterisks. This is useful for reading things like passwords or other sensitive information.
.IP \(bu 2
\fB\-l\fP or \fB\-\-local\fP makes the variables local.
.IP \(bu 2
\fB\-n NCHARS\fP or \fB\-\-nchars=NCHARS\fP makes \fBread\fP return after reading NCHARS characters or the end of
the line, whichever comes first.
.IP \(bu 2
\fB\-p PROMPT_CMD\fP or \fB\-\-prompt=PROMPT_CMD\fP uses the output of the shell command \fBPROMPT_CMD\fP as the prompt for the interactive mode. The default prompt command is \fIset_color green; echo read; set_color normal; echo "> "\fP
.IP \(bu 2
\fB\-P PROMPT_STR\fP or \fB\-\-prompt\-str=PROMPT_STR\fP uses the string as the prompt for the interactive mode. It is equivalent to \fIecho PROMPT_STR\fP and is provided solely to avoid the need to frame the prompt as a command. All special characters in the string are automatically escaped before being passed to the \fIecho\fP command.
.IP \(bu 2
\fB\-R RIGHT_PROMPT_CMD\fP or \fB\-\-right\-prompt=RIGHT_PROMPT_CMD\fP uses the output of the shell command \fBRIGHT_PROMPT_CMD\fP as the right prompt for the interactive mode. There is no default right prompt command.
.IP \(bu 2
\fB\-S\fP or \fB\-\-shell\fP enables syntax highlighting, tab completions and command termination suitable for entering shellscript code in the interactive mode. NOTE: Prior to fish 3.0, the short opt for \fB\-\-shell\fP was \fB\-s\fP, but it has been changed for compatibility with bash\(aqs \fB\-s\fP short opt for \fB\-\-silent\fP\&.
.IP \(bu 2
\fB\-t\fP \-or \fB\-\-tokenize\fP causes read to split the input into variables by the shell\(aqs tokenization rules. This means it will honor quotes and escaping. This option is of course incompatible with other options to control splitting like \fB\-\-delimiter\fP and does not honor $IFS (like fish\(aqs tokenizer). It saves the tokens in the manner they\(aqd be passed to commands on the commandline, so e.g. \fBa\e b\fP is stored as \fBa b\fP\&. Note that currently it leaves command substitutions intact along with the parentheses.
.IP \(bu 2
\fB\-u\fP or \fB\-\-unexport\fP prevents the variables from being exported to child processes (default behaviour).
.IP \(bu 2
\fB\-U\fP or \fB\-\-universal\fP causes the specified shell variable to be made universal.
.IP \(bu 2
\fB\-x\fP or \fB\-\-export\fP exports the variables to child processes.
.IP \(bu 2
\fB\-a\fP or \fB\-\-list\fP stores the result as a list in a single variable. This option is also available as \fB\-\-array\fP for backwards compatibility.
.IP \(bu 2
\fB\-z\fP or \fB\-\-null\fP marks the end of the line with the NUL character, instead of newline. This also
disables interactive mode.
.IP \(bu 2
\fB\-L\fP or \fB\-\-line\fP reads each line into successive variables, and stops after each variable has been filled. This cannot be combined with the \fB\-\-delimiter\fP option.
.UNINDENT
.sp
Without the \fB\-\-line\fP option, \fBread\fP reads a single line of input from standard input, breaks it into tokens, and then assigns one token to each variable specified in \fBVARIABLES\fP\&. If there are more tokens than variables, the complete remainder is assigned to the last variable.
.sp
If no option to determine how to split like \fB\-\-delimiter\fP, \fB\-\-line\fP or \fB\-\-tokenize\fP is given, the variable \fBIFS\fP is used as a list of characters to split on. Relying on the use of \fBIFS\fP is deprecated and this behaviour will be removed in future versions. The default value of \fBIFS\fP contains space, tab and newline characters. As a special case, if \fBIFS\fP is set to the empty string, each character of the input is considered a separate token.
.sp
With the \fB\-\-line\fP option, \fBread\fP reads a line of input from standard input into each provided variable, stopping when each variable has been filled. The line is not tokenized.
.sp
If no variable names are provided, \fBread\fP enters a special case that simply provides redirection from standard input to standard output, useful for command substitution. For instance, the fish shell command below can be used to read data that should be provided via a command line argument from the console instead of hardcoding it in the command itself, allowing the command to both be reused as\-is in various contexts with different input values and preventing possibly sensitive text from being included in the shell history:
.sp
\fBmysql \-uuser \-p(read)\fP
.sp
When running in this mode, \fBread\fP does not split the input in any way and text is redirected to standard output without any further processing or manipulation.
.sp
If \fB\-a\fP or \fB\-\-array\fP is provided, only one variable name is allowed and the tokens are stored as a list in this variable.
.sp
See the documentation for \fBset\fP for more details on the scoping rules for variables.
.sp
When \fBread\fP reaches the end\-of\-file (EOF) instead of the terminator, the exit status is set to 1.
Otherwise, it is set to 0.
.sp
In order to protect the shell from consuming too many system resources, \fBread\fP will only consume a
maximum of 100 MiB (104857600 bytes); if the terminator is not reached before this limit then VARIABLE
is set to empty and the exit status is set to 122. This limit can be altered with the
\fBfish_read_limit\fP variable. If set to 0 (zero), the limit is removed.
.SS Using another read history file
.sp
The \fBread\fP command supported the \fB\-m\fP and \fB\-\-mode\-name\fP flags in fish versions prior to 2.7.0 to specify an alternative read history file. Those flags are now deprecated and ignored. Instead, set the \fBfish_history\fP variable to specify a history session ID. That will affect both the \fBread\fP history file and the fish command history file. You can set it to an empty string to specify that no history should be read or written. This is useful for presentations where you do not want possibly private or sensitive history to be exposed to the audience but do want history relevant to the presentation to be available.
.SS Example
.sp
The following code stores the value \(aqhello\(aq in the shell variable \fB$foo\fP\&.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
echo hello|read foo

# This is a neat way to handle command output by\-line:
printf \(aq%s\en\(aq line1 line2 line3 line4 | while read \-l foo
                  echo "This is another line: $foo"
              end

# Delimiters given via "\-d" are taken as one string
echo a==b==c | read \-d == \-l a b c
echo $a # a
echo $b # b
echo $c # c

# \-\-tokenize honors quotes and escaping like the shell\(aqs argument passing:
echo \(aqa\e b\(aq | read \-t first second
echo $first # outputs "a b", $second is empty

echo \(aqa"foo bar"b (command echo wurst)*" "{a,b}\(aq | read \-lt \-l a b c
echo $a # outputs \(aqafoo bar\(aq (without the quotes)
echo $b # outputs \(aq(command echo wurst)* {a,b}\(aq (without the quotes)
echo $c # nothing
.ft P
.fi
.UNINDENT
.UNINDENT
.SS realpath \- Convert a path to an absolute path without symlinks
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
realpath PATH
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBrealpath\fP resolves a path to its absolute path.
.sp
fish provides a \fBrealpath\fP builtin as a fallback for systems where there is no \fBrealpath\fP command. fish\(aqs implementation always resolves its first argument, and does not support any options.
.sp
If the operation fails, an error will be reported.
.SS return \- stop the current inner function
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function NAME; [COMMANDS...;] return [STATUS]; [COMMANDS...;] end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBreturn\fP halts a currently running function. The exit status is set to \fBSTATUS\fP if it is given.
.sp
It is usually added inside of a conditional block such as an if statement or a switch statement to conditionally stop the executing function and return to the caller, but it can also be used to specify the exit status of a function.
.SS Example
.sp
The following code is an implementation of the false command as a fish function
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function false
    return 1
end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS set \- display and change shell variables.
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
set [SCOPE_OPTIONS]
set [OPTIONS] VARIABLE_NAME VALUES...
set [OPTIONS] VARIABLE_NAME[INDICES]... VALUES...
set ( \-q | \-\-query ) [SCOPE_OPTIONS] VARIABLE_NAMES...
set ( \-e | \-\-erase ) [SCOPE_OPTIONS] VARIABLE_NAME
set ( \-e | \-\-erase ) [SCOPE_OPTIONS] VARIABLE_NAME[INDICES]...
set ( \-S | \-\-show ) [VARIABLE_NAME]...
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBset\fP manipulates shell variables\&.
.sp
If set is called with no arguments, the names and values of all shell variables are printed in sorted order. If some of the scope or export flags have been given, only the variables matching the specified scope are printed.
.sp
With both variable names and values provided, \fBset\fP assigns the variable \fBVARIABLE_NAME\fP the values \fBVALUES...\fP\&.
.sp
The following options control variable scope:
.INDENT 0.0
.IP \(bu 2
\fB\-a\fP or \fB\-\-append\fP causes the values to be appended to the current set of values for the variable. This can be used with \fB\-\-prepend\fP to both append and prepend at the same time. This cannot be used when assigning to a variable slice.
.IP \(bu 2
\fB\-p\fP or \fB\-\-prepend\fP causes the values to be prepended to the current set of values for the variable. This can be used with \fB\-\-append\fP to both append and prepend at the same time. This cannot be used when assigning to a variable slice.
.IP \(bu 2
\fB\-l\fP or \fB\-\-local\fP forces the specified shell variable to be given a scope that is local to the current block, even if a variable with the given name exists and is non\-local
.IP \(bu 2
\fB\-g\fP or \fB\-\-global\fP causes the specified shell variable to be given a global scope. Non\-global variables disappear when the block they belong to ends
.IP \(bu 2
\fB\-U\fP or \fB\-\-universal\fP causes the specified shell variable to be given a universal scope. If this option is supplied, the variable will be shared between all the current user\(aqs fish instances on the current computer, and will be preserved across restarts of the shell.
.IP \(bu 2
\fB\-x\fP or \fB\-\-export\fP causes the specified shell variable to be exported to child processes (making it an "environment variable")
.IP \(bu 2
\fB\-u\fP or \fB\-\-unexport\fP causes the specified shell variable to NOT be exported to child processes
.IP \(bu 2
\fB\-\-path\fP causes the specified variable to be treated as a path variable, meaning it will automatically be split on colons,  and joined using colons when quoted (\fIecho "$PATH"\fP) or exported.
.IP \(bu 2
\fB\-\-unpath\fP causes the specified variable to not be treated as a path variable. Variables with a name ending in "PATH" are automatically path variables, so this can be used to treat such a variable normally.
.UNINDENT
.sp
The following options are available:
.INDENT 0.0
.IP \(bu 2
\fB\-e\fP or \fB\-\-erase\fP causes the specified shell variable to be erased
.IP \(bu 2
\fB\-q\fP or \fB\-\-query\fP test if the specified variable names are defined. Does not output anything, but the builtins exit status is the number of variables specified that were not defined.
.IP \(bu 2
\fB\-n\fP or \fB\-\-names\fP List only the names of all defined variables, not their value. The names are guaranteed to be sorted.
.IP \(bu 2
\fB\-S\fP or \fB\-\-show\fP Shows information about the given variables. If no variable names are given then all variables are shown in sorted order. No other flags can be used with this option. The information shown includes whether or not it is set in each of the local, global, and universal scopes. If it is set in one of those scopes whether or not it is exported is reported. The individual elements are also shown along with the length of each element.
.IP \(bu 2
\fB\-L\fP or \fB\-\-long\fP do not abbreviate long values when printing set variables
.UNINDENT
.sp
If a variable is set to more than one value, the variable will be a list with the specified elements. If a variable is set to zero elements, it will become a list with zero elements.
.sp
If the variable name is one or more list elements, such as \fBPATH[1 3 7]\fP, only those list elements specified will be changed. If you specify a negative index when expanding or assigning to a list variable, the index will be calculated from the end of the list. For example, the index \-1 means the last index of a list.
.sp
The scoping rules when creating or updating a variable are:
.INDENT 0.0
.IP \(bu 2
Variables may be explicitly set to universal, global or local. Variables with the same name in different scopes will not be changed.
.IP \(bu 2
If a variable is not explicitly set to be either universal, global or local, but has been previously defined, the previous variable scope is used.
.IP \(bu 2
If a variable is not explicitly set to be either universal, global or local and has never before been defined, the variable will be local to the currently executing function. Note that this is different from using the \fB\-l\fP or \fB\-\-local\fP flag. If one of those flags is used, the variable will be local to the most inner currently executing block, while without these the variable will be local to the function. If no function is executing, the variable will be global.
.UNINDENT
.sp
The exporting rules when creating or updating a variable are identical to the scoping rules for variables:
.INDENT 0.0
.IP \(bu 2
Variables may be explicitly set to either exported or not exported. When an exported variable goes out of scope, it is unexported.
.IP \(bu 2
If a variable is not explicitly set to be exported or not exported, but has been previously defined, the previous exporting rule for the variable is kept.
.IP \(bu 2
If a variable is not explicitly set to be either exported or unexported and has never before been defined, the variable will not be exported.
.UNINDENT
.sp
In query mode, the scope to be examined can be specified.
.sp
In erase mode, if variable indices are specified, only the specified slices of the list variable will be erased.
.sp
\fBset\fP requires all options to come before any other arguments. For example, \fBset flags \-l\fP will have the effect of setting the value of the variable \fBflags\fP to \(aq\-l\(aq, not making the variable local.
.sp
In assignment mode, \fBset\fP does not modify the exit status. This allows simultaneous capture of the output and exit status of a subcommand, e.g. \fBif set output (command)\fP\&. In query mode, the exit status is the number of variables that were not found. In erase mode, \fBset\fP exits with a zero exit status in case of success, with a non\-zero exit status if the commandline was invalid, if the variable was write\-protected or if the variable did not exist.
.SS Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# Prints all global, exported variables.
set \-xg

# Sets the value of the variable $foo to be \(aqhi\(aq.
set foo hi

# Appends the value "there" to the variable $foo.
set \-a foo there

# Does the same thing as the previous two commands the way it would be done pre\-fish 3.0.
set foo hi
set foo $foo there

# Removes the variable $smurf
set \-e smurf

# Changes the fourth element of the $PATH list to ~/bin
set PATH[4] ~/bin

# Outputs the path to Python if \(ga\(gatype \-p\(ga\(ga returns true.
if set python_path (type \-p python)
    echo "Python is at $python_path"
end

# Like other shells, fish 3.1 supports this syntax for passing a variable to just one command:
# Run fish with a temporary home directory.
HOME=(mktemp \-d) fish
# Which is essentially the same as:
begin; set \-lx HOME (mktemp \-d); fish; end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Notes
.sp
Fish versions prior to 3.0 supported the syntax \fBset PATH[1] PATH[4] /bin /sbin\fP, which worked like
\fBset PATH[1 4] /bin /sbin\fP\&. This syntax was not widely used, and was ambiguous and inconsistent.
.SS set_color \- set the terminal color
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
set_color [OPTIONS] VALUE
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBset_color\fP is used to control the color and styling of text in the terminal. \fBVALUE\fP describes that styling. It\(aqs a reserved color name like \fIred\fP or a RGB color value given as 3 or 6 hexadecimal digits ("F27" or "FF2277"). A special keyword \fInormal\fP resets text formatting to terminal defaults.
.sp
Valid colors include:
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
\fIblack\fP, \fIred\fP, \fIgreen\fP, \fIyellow\fP, \fIblue\fP, \fImagenta\fP, \fIcyan\fP, \fIwhite\fP
.IP \(bu 2
\fIbrblack\fP, \fIbrred\fP, \fIbrgreen\fP, \fIbryellow\fP, \fIbrblue\fP, \fIbrmagenta\fP, \fIbrcyan\fP, \fIbrwhite\fP
.UNINDENT
.UNINDENT
.UNINDENT
.sp
The \fIbr\fP\- (as in \(aqbright\(aq) forms are full\-brightness variants of the 8 standard\-brightness colors on many terminals. \fIbrblack\fP has higher brightness than \fIblack\fP \- towards gray.
.sp
An RGB value with three or six hex digits, such as A0FF33 or f2f can be used. \fBfish\fP will choose the closest supported color. A three digit value is equivalent to specifying each digit twice; e.g., \fBset_color 2BC\fP is the same as \fBset_color 22BBCC\fP\&. Hexadecimal RGB values can be in lower or uppercase. Depending on the capabilities of your terminal (and the level of support \fBset_color\fP has for it) the actual color may be approximated by a nearby matching reserved color name or \fBset_color\fP may not have an effect on color.
.sp
A second color may be given as a desired fallback color. e.g. \fBset_color 124212 brblue\fP will instruct set_color to use \fIbrblue\fP if a terminal is not capable of the exact shade of grey desired. This is very useful when an 8 or 16 color terminal might otherwise not use a color.
.sp
The following options are available:
.INDENT 0.0
.IP \(bu 2
\fB\-b\fP, \fB\-\-background\fP \fICOLOR\fP sets the background color.
.IP \(bu 2
\fB\-c\fP, \fB\-\-print\-colors\fP prints a list of the 16 named colors.
.IP \(bu 2
\fB\-o\fP, \fB\-\-bold\fP sets bold mode.
.IP \(bu 2
\fB\-d\fP, \fB\-\-dim\fP sets dim mode.
.IP \(bu 2
\fB\-i\fP, \fB\-\-italics\fP sets italics mode.
.IP \(bu 2
\fB\-r\fP, \fB\-\-reverse\fP sets reverse mode.
.IP \(bu 2
\fB\-u\fP, \fB\-\-underline\fP sets underlined mode.
.UNINDENT
.sp
Using the \fInormal\fP keyword will reset foreground, background, and all formatting back to default.
.SS Notes
.INDENT 0.0
.IP 1. 3
Using the \fInormal\fP keyword will reset both background and foreground colors to whatever is the default for the terminal.
.IP 2. 3
Setting the background color only affects subsequently written characters. Fish provides no way to set the background color for the entire terminal window. Configuring the window background color (and other attributes such as its opacity) has to be done using whatever mechanisms the terminal provides. Look for a config option.
.IP 3. 3
Some terminals use the \fB\-\-bold\fP escape sequence to switch to a brighter color set rather than increasing the weight of text.
.IP 4. 3
\fBset_color\fP works by printing sequences of characters to \fIstdout\fP\&. If used in command substitution or a pipe, these characters will also be captured. This may or may not be desirable. Checking the exit status of \fBisatty stdout\fP before using \fBset_color\fP can be useful to decide not to colorize output in a script.
.UNINDENT
.SS Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
set_color red; echo "Roses are red"
set_color blue; echo "Violets are blue"
set_color 62A; echo "Eggplants are dark purple"
set_color normal; echo "Normal is nice" # Resets the background too
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Terminal Capability Detection
.sp
Fish uses some heuristics to determine what colors a terminal supports to avoid sending sequences that it won\(aqt understand.
.sp
In particular it will:
.INDENT 0.0
.IP \(bu 2
Enable 256 colors if $TERM contains "xterm", except for known exceptions (like MacOS 10.6 Terminal.app)
.IP \(bu 2
Enable 24\-bit ("true\-color") even if the $TERM entry only reports 256 colors. This includes modern xterm, VTE\-based terminals like Gnome Terminal, Konsole and iTerm2.
.IP \(bu 2
Detect support for italics, dim, reverse and other modes.
.UNINDENT
.sp
If terminfo reports 256 color support for a terminal, 256 color support will always be enabled.
.sp
To force true\-color support on or off, set $fish_term24bit to "1" for on and 0 for off \- \fBset \-g fish_term24bit 1\fP\&.
.sp
To debug color palette problems, \fBtput colors\fP may be useful to see the number of colors in terminfo for a terminal. Fish launched as \fBfish \-d2\fP will include diagnostic messages that indicate the color support mode in use.
.sp
The \fBset_color\fP command uses the terminfo database to look up how to change terminal colors on whatever terminal is in use. Some systems have old and incomplete terminfo databases, and lack color information for terminals that support it. Fish assumes that all terminals can use the [ANSI X3.64](\fI\%https://en.wikipedia.org/wiki/ANSI_escape_code\fP) escape sequences if the terminfo definition indicates a color below 16 is not supported.
.SS source \- evaluate contents of file.
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
source FILENAME [ARGUMENTS...]
somecommand | source
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBsource\fP evaluates the commands of the specified file in the current shell as a new block of code. This is different from starting a new process to perform the commands (i.e. \fBfish < FILENAME\fP) since the commands will be evaluated by the current shell, which means that changes in shell variables will affect the current shell. If additional arguments are specified after the file name, they will be inserted into the \fB$argv\fP variable. The \fB$argv\fP variable will not include the name of the sourced file.
.sp
fish will search the working directory to resolve relative paths but will not search \fB$PATH\fP\&.
.sp
If no file is specified and stdin is not the terminal, or if the file name \(aq\fB\-\fP\(aq is used, stdin will be read.
.sp
The exit status of \fBsource\fP is the exit status of the last job to execute. If something goes wrong while opening or reading the file, \fBsource\fP exits with a non\-zero status.
.sp
\fB\&.\fP (a single period) is an alias for the \fBsource\fP command. The use of \fB\&.\fP is deprecated in favour of \fBsource\fP, and \fB\&.\fP will be removed in a future version of fish.
.sp
\fBsource\fP creates a new local scope; \fBset \-\-local\fP within a sourced block will not affect variables in the enclosing scope.
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
source ~/.config/fish/config.fish
# Causes fish to re\-read its initialization file.
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Caveats
.sp
In fish versions prior to 2.3.0, the \fB$argv\fP variable would have a single element (the name of the sourced file) if no arguments are present. Otherwise, it would contain arguments without the name of the sourced file. That behavior was very confusing and unlike other shells such as bash and zsh.
.SS status \- query fish runtime information
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
status
status is\-login
status is\-interactive
status is\-block
status is\-breakpoint
status is\-command\-substitution
status is\-no\-job\-control
status is\-full\-job\-control
status is\-interactive\-job\-control
status current\-command
status filename
status fish\-path
status function
status line\-number
status stack\-trace
status job\-control CONTROL\-TYPE
status features
status test\-feature FEATURE
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
With no arguments, \fBstatus\fP displays a summary of the current login and job control status of the shell.
.sp
The following operations (sub\-commands) are available:
.INDENT 0.0
.IP \(bu 2
\fBis\-command\-substitution\fP returns 0 if fish is currently executing a command substitution. Also \fB\-c\fP or \fB\-\-is\-command\-substitution\fP\&.
.IP \(bu 2
\fBis\-block\fP returns 0 if fish is currently executing a block of code. Also \fB\-b\fP or \fB\-\-is\-block\fP\&.
.IP \(bu 2
\fBis\-breakpoint\fP returns 0 if fish is currently showing a prompt in the context of a \fBbreakpoint\fP command. See also the \fBfish_breakpoint_prompt\fP function.
.IP \(bu 2
\fBis\-interactive\fP returns 0 if fish is interactive \- that is, connected to a keyboard. Also \fB\-i\fP or \fB\-\-is\-interactive\fP\&.
.IP \(bu 2
\fBis\-login\fP returns 0 if fish is a login shell \- that is, if fish should perform login tasks such as setting up the PATH. Also \fB\-l\fP or \fB\-\-is\-login\fP\&.
.IP \(bu 2
\fBis\-full\-job\-control\fP returns 0 if full job control is enabled. Also \fB\-\-is\-full\-job\-control\fP (no short flag).
.IP \(bu 2
\fBis\-interactive\-job\-control\fP returns 0 if interactive job control is enabled. Also, \fB\-\-is\-interactive\-job\-control\fP (no short flag).
.IP \(bu 2
\fBis\-no\-job\-control\fP returns 0 if no job control is enabled. Also \fB\-\-is\-no\-job\-control\fP (no short flag).
.IP \(bu 2
\fBcurrent\-command\fP prints the name of the currently\-running function or command, like the deprecated \fB_\fP variable.
.IP \(bu 2
\fBfilename\fP prints the filename of the currently running script. Also \fBcurrent\-filename\fP, \fB\-f\fP or \fB\-\-current\-filename\fP\&.
.IP \(bu 2
\fBfish\-path\fP prints the absolute path to the currently executing instance of fish.
.IP \(bu 2
\fBfunction\fP prints the name of the currently called function if able, when missing displays "Not a
function" (or equivalent translated string). Also \fBcurrent\-function\fP, \fB\-u\fP or \fB\-\-current\-function\fP\&.
.IP \(bu 2
\fBline\-number\fP prints the line number of the currently running script. Also \fBcurrent\-line\-number\fP, \fB\-n\fP or \fB\-\-current\-line\-number\fP\&.
.IP \(bu 2
\fBstack\-trace\fP prints a stack trace of all function calls on the call stack. Also \fBprint\-stack\-trace\fP, \fB\-t\fP or \fB\-\-print\-stack\-trace\fP\&.
.IP \(bu 2
\fBjob\-control CONTROL\-TYPE\fP sets the job control type, which can be \fBnone\fP, \fBfull\fP, or \fBinteractive\fP\&. Also \fB\-j CONTROL\-TYPE\fP or \fB\-\-job\-control=CONTROL\-TYPE\fP\&.
.IP \(bu 2
\fBfeatures\fP lists all available feature flags.
.IP \(bu 2
\fBtest\-feature FEATURE\fP returns 0 when FEATURE is enabled, 1 if it is disabled, and 2 if it is not recognized.
.UNINDENT
.SS Notes
.sp
For backwards compatibility each subcommand can also be specified as a long or short option. For example, rather than \fBstatus is\-login\fP you can type \fBstatus \-\-is\-login\fP\&. The flag forms are deprecated and may be removed in a future release (but not before fish 3.0).
.sp
You can only specify one subcommand per invocation even if you use the flag form of the subcommand.
.SS string \- manipulate strings
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
string collect [(\-N | \-\-no\-trim\-newlines)] [STRING...]
string escape [(\-n | \-\-no\-quoted)] [\-\-style=xxx] [STRING...]
string join [(\-q | \-\-quiet)] SEP [STRING...]
string join0 [(\-q | \-\-quiet)] [STRING...]
string length [(\-q | \-\-quiet)] [STRING...]
string lower [(\-q | \-\-quiet)] [STRING...]
string match [(\-a | \-\-all)] [(\-e | \-\-entire)] [(\-i | \-\-ignore\-case)] [(\-r | \-\-regex)] [(\-n | \-\-index)] [(\-q | \-\-quiet)] [(\-v | \-\-invert)] PATTERN [STRING...]
string repeat [(\-n | \-\-count) COUNT] [(\-m | \-\-max) MAX] [(\-N | \-\-no\-newline)] [(\-q | \-\-quiet)] [STRING...]
string replace [(\-a | \-\-all)] [(\-f | \-\-filter)] [(\-i | \-\-ignore\-case)] [(\-r | \-\-regex)] [(\-q | \-\-quiet)] PATTERN REPLACEMENT [STRING...]
string split [(\-m | \-\-max) MAX] [(\-n | \-\-no\-empty)] [(\-q | \-\-quiet)] [(\-r | \-\-right)] SEP [STRING...]
string split0 [(\-m | \-\-max) MAX] [(\-n | \-\-no\-empty)] [(\-q | \-\-quiet)] [(\-r | \-\-right)] [STRING...]
string sub [(\-s | \-\-start) START] [(\-l | \-\-length) LENGTH] [(\-q | \-\-quiet)] [STRING...]
string trim [(\-l | \-\-left)] [(\-r | \-\-right)] [(\-c | \-\-chars CHARS)] [(\-q | \-\-quiet)] [STRING...]
string unescape [\-\-style=xxx] [STRING...]
string upper [(\-q | \-\-quiet)] [STRING...]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBstring\fP performs operations on strings.
.sp
STRING arguments are taken from the command line unless standard input is connected to a pipe or a file, in which case they are read from standard input, one STRING per line. It is an error to supply STRING arguments on the command line and on standard input.
.sp
Arguments beginning with \fB\-\fP are normally interpreted as switches; \fB\-\-\fP causes the following arguments not to be treated as switches even if they begin with \fB\-\fP\&. Switches and required arguments are recognized only on the command line.
.sp
Most subcommands accept a \fB\-q\fP or \fB\-\-quiet\fP switch, which suppresses the usual output but exits with the documented status.
.sp
The following subcommands are available.
.SS "collect" subcommand
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
string collect [(\-N | \-\-no\-trim\-newlines)] [STRING...]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBstring collect\fP collects its input into a single output argument, without splitting the output when used in a command substitution. This is useful when trying to collect multiline output from another command into a variable. Exit status: 0 if any output argument is non\-empty, or 1 otherwise.
.sp
If invoked with multiple arguments instead of input, \fBstring collect\fP preserves each argument separately, where the number of output arguments is equal to the number of arguments given to \fBstring collect\fP\&.
.sp
Any trailing newlines on the input are trimmed, just as with \fB"$(cmd)"\fP substitution in sh. \fB\-\-no\-trim\-newlines\fP can be used to disable this behavior, which may be useful when running a command such as \fBset contents (cat filename | string collect \-N)\fP\&.
.SS Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ echo \e"(echo one\entwo\enthree | string collect)\e"
"one
two
three
"

>_ echo \e"(echo one\entwo\enthree | string collect \-N)\e"
"one
two
three"
.ft P
.fi
.UNINDENT
.UNINDENT
.SS "escape" and "unescape" subcommands
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
string escape [(\-n | \-\-no\-quoted)] [\-\-style=xxx] [STRING...]
string unescape [\-\-style=xxx] [STRING...]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBstring escape\fP escapes each STRING in one of three ways. The first is \fB\-\-style=script\fP\&. This is the default. It alters the string such that it can be passed back to \fBeval\fP to produce the original argument again. By default, all special characters are escaped, and quotes are used to simplify the output when possible. If \fB\-n\fP or \fB\-\-no\-quoted\fP is given, the simplifying quoted format is not used. Exit status: 0 if at least one string was escaped, or 1 otherwise.
.sp
\fB\-\-style=var\fP ensures the string can be used as a variable name by hex encoding any non\-alphanumeric characters. The string is first converted to UTF\-8 before being encoded.
.sp
\fB\-\-style=url\fP ensures the string can be used as a URL by hex encoding any character which is not legal in a URL. The string is first converted to UTF\-8 before being encoded.
.sp
\fB\-\-style=regex\fP escapes an input string for literal matching within a regex expression. The string is first converted to UTF\-8 before being encoded.
.sp
\fBstring unescape\fP performs the inverse of the \fBstring escape\fP command. If the string to be unescaped is not properly formatted it is ignored. For example, doing \fBstring unescape \-\-style=var (string escape \-\-style=var $str)\fP will return the original string. There is no support for unescaping \fB\-\-style=regex\fP\&.
.SS Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ echo \e\ex07 | string escape
cg

>_ string escape \-\-style=var \(aqa1 b2\(aq\e\eu6161
a1_20b2__c_E6_85_A1
.ft P
.fi
.UNINDENT
.UNINDENT
.SS "join" and "join0" subcommands
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
string join [(\-q | \-\-quiet)] SEP [STRING...]
string join0 [(\-q | \-\-quiet)] [STRING...]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBstring join\fP joins its STRING arguments into a single string separated by SEP, which can be an empty string. Exit status: 0 if at least one join was performed, or 1 otherwise.
.sp
\fBstring join0\fP joins its STRING arguments into a single string separated by the zero byte (NUL), and adds a trailing NUL. This is most useful in conjunction with tools that accept NUL\-delimited input, such as \fBsort \-z\fP\&. Exit status: 0 if at least one join was performed, or 1 otherwise.
.SS Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ seq 3 | string join ...
1...2...3
.ft P
.fi
.UNINDENT
.UNINDENT
.SS "length" subcommand
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
string length [(\-q | \-\-quiet)] [STRING...]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBstring length\fP reports the length of each string argument in characters. Exit status: 0 if at least one non\-empty STRING was given, or 1 otherwise.
.SS Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ string length \(aqhello, world\(aq
12

>_ set str foo
>_ string length \-q $str; echo $status
0
# Equivalent to test \-n $str
.ft P
.fi
.UNINDENT
.UNINDENT
.SS "lower" subcommand
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
string lower [(\-q | \-\-quiet)] [STRING...]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBstring lower\fP converts each string argument to lowercase. Exit status: 0 if at least one string was converted to lowercase, else 1. This means that in conjunction with the \fB\-q\fP flag you can readily test whether a string is already lowercase.
.SS "match" subcommand
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
string match [(\-a | \-\-all)] [(\-e | \-\-entire)] [(\-i | \-\-ignore\-case)] [(\-r | \-\-regex)] [(\-n | \-\-index)] [(\-q | \-\-quiet)] [(\-v | \-\-invert)] PATTERN [STRING...]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBstring match\fP tests each STRING against PATTERN and prints matching substrings. Only the first match for each STRING is reported unless \fB\-a\fP or \fB\-\-all\fP is given, in which case all matches are reported.
.sp
If you specify the \fB\-e\fP or \fB\-\-entire\fP then each matching string is printed including any prefix or suffix not matched by the pattern (equivalent to \fBgrep\fP without the \fB\-o\fP flag). You can, obviously, achieve the same result by prepending and appending \fB*\fP or \fB\&.*\fP depending on whether or not you have specified the \fB\-\-regex\fP flag. The \fB\-\-entire\fP flag is simply a way to avoid having to complicate the pattern in that fashion and make the intent of the \fBstring match\fP clearer. Without \fB\-\-entire\fP and \fB\-\-regex\fP, a PATTERN will need to match the entire STRING before it will be reported.
.sp
Matching can be made case\-insensitive with \fB\-\-ignore\-case\fP or \fB\-i\fP\&.
.sp
If \fB\-\-index\fP or \fB\-n\fP is given, each match is reported as a 1\-based start position and a length. By default, PATTERN is interpreted as a glob pattern matched against each entire STRING argument. A glob pattern is only considered a valid match if it matches the entire STRING.
.sp
If \fB\-\-regex\fP or \fB\-r\fP is given, PATTERN is interpreted as a Perl\-compatible regular expression, which does not have to match the entire STRING. For a regular expression containing capturing groups, multiple items will be reported for each match, one for the entire match and one for each capturing group. With this, only the matching part of the STRING will be reported, unless \fB\-\-entire\fP is given.
.sp
If \fB\-\-invert\fP or \fB\-v\fP is used the selected lines will be only those which do not match the given glob pattern or regular expression.
.sp
Exit status: 0 if at least one match was found, or 1 otherwise.
.SS Match Glob Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ string match \(aq?\(aq a
a

>_ string match \(aqa*b\(aq axxb
axxb

>_ string match \-i \(aqa??B\(aq Axxb
Axxb

>_ echo \(aqok?\(aq | string match \(aq*\e\e?\(aq
ok?

# Note that only the second STRING will match here.
>_ string match \(aqfoo\(aq \(aqfoo1\(aq \(aqfoo\(aq \(aqfoo2\(aq
foo

>_ string match \-e \(aqfoo\(aq \(aqfoo1\(aq \(aqfoo\(aq \(aqfoo2\(aq
foo1
foo
foo2

>_ string match \(aqfoo?\(aq \(aqfoo1\(aq \(aqfoo\(aq \(aqfoo2\(aq
foo1
foo
foo2
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Match Regex Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ string match \-r \(aqcat|dog|fish\(aq \(aqnice dog\(aq
dog

>_ string match \-r \-v "c.*[12]" {cat,dog}(seq 1 4)
dog1
dog2
cat3
dog3
cat4
dog4

>_ string match \-r \(aq(\e\ed\e\ed?):(\e\ed\e\ed):(\e\ed\e\ed)\(aq 2:34:56
2:34:56
2
34
56

>_ string match \-r \(aq^(\e\ew{{2,4}})\e\eg1$\(aq papa mud murmur
papa
pa
murmur
mur

>_ string match \-r \-a \-n at ratatat
2 2
4 2
6 2

>_ string match \-r \-i \(aq0x[0\-9a\-f]{{1,8}}\(aq \(aqint magic = 0xBadC0de;\(aq
0xBadC0de
.ft P
.fi
.UNINDENT
.UNINDENT
.SS "repeat" subcommand
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
string repeat [(\-n | \-\-count) COUNT] [(\-m | \-\-max) MAX] [(\-N | \-\-no\-newline)] [(\-q | \-\-quiet)] [STRING...]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBstring repeat\fP repeats the STRING \fB\-n\fP or \fB\-\-count\fP times. The \fB\-m\fP or \fB\-\-max\fP option will limit the number of outputted char (excluding the newline). This option can be used by itself or in conjunction with \fB\-\-count\fP\&. If both \fB\-\-count\fP and \fB\-\-max\fP are present, max char will be outputed unless the final repeated string size is less than max, in that case, the string will repeat until count has been reached. Both \fB\-\-count\fP and \fB\-\-max\fP will accept a number greater than or equal to zero, in the case of zero, nothing will be outputed. If \fB\-N\fP or \fB\-\-no\-newline\fP is given, the output won\(aqt contain a newline character at the end. Exit status: 0 if yielded string is not empty, 1 otherwise.
.SS Examples
.SS Repeat Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ string repeat \-n 2 \(aqfoo \(aq
foo foo

>_ echo foo | string repeat \-n 2
foofoo

>_ string repeat \-n 2 \-m 5 \(aqfoo\(aq
foofo

>_ string repeat \-m 5 \(aqfoo\(aq
foofo
.ft P
.fi
.UNINDENT
.UNINDENT
.SS "replace" subcommand
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
string replace [(\-a | \-\-all)] [(\-f | \-\-filter)] [(\-i | \-\-ignore\-case)] [(\-r | \-\-regex)] [(\-q | \-\-quiet)] PATTERN REPLACEMENT [STRING...]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBstring replace\fP is similar to \fBstring match\fP but replaces non\-overlapping matching substrings with a replacement string and prints the result. By default, PATTERN is treated as a literal substring to be matched.
.sp
If \fB\-r\fP or \fB\-\-regex\fP is given, PATTERN is interpreted as a Perl\-compatible regular expression, and REPLACEMENT can contain C\-style escape sequences like \fB\et\fP as well as references to capturing groups by number or name as \fB$n\fP or \fB${n}\fP\&.
.sp
If you specify the \fB\-f\fP or \fB\-\-filter\fP flag then each input string is printed only if a replacement was done. This is useful where you would otherwise use this idiom: \fBa_cmd | string match pattern | string replace pattern new_pattern\fP\&. You can instead just write \fBa_cmd | string replace \-\-filter pattern new_pattern\fP\&.
.sp
Exit status: 0 if at least one replacement was performed, or 1 otherwise.
.SS Replace Literal Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ string replace is was \(aqblue is my favorite\(aq
blue was my favorite

>_ string replace 3rd last 1st 2nd 3rd
1st
2nd
last

>_ string replace \-a \(aq \(aq _ \(aqspaces to underscores\(aq
spaces_to_underscores
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Replace Regex Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ string replace \-r \-a \(aq[^\e\ed.]+\(aq \(aq \(aq \(aq0 one two 3.14 four 5x\(aq
0 3.14 5

>_ string replace \-r \(aq(\e\ew+)\e\es+(\e\ew+)\(aq \(aq$2 $1 $$\(aq \(aqleft right\(aq
right left $

>_ string replace \-r \(aq\e\es*newline\e\es*\(aq \(aq\e\en\(aq \(aqput a newline here\(aq
put a
here
.ft P
.fi
.UNINDENT
.UNINDENT
.SS "split" and "split0" subcommands
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
string split [(\-m | \-\-max) MAX] [(\-n | \-\-no\-empty)] [(\-q | \-\-quiet)] [(\-r | \-\-right)] SEP [STRING...]
string split0 [(\-m | \-\-max) MAX] [(\-n | \-\-no\-empty)] [(\-q | \-\-quiet)] [(\-r | \-\-right)] [STRING...]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBstring split\fP splits each STRING on the separator SEP, which can be an empty string. If \fB\-m\fP or \fB\-\-max\fP is specified, at most MAX splits are done on each STRING. If \fB\-r\fP or \fB\-\-right\fP is given, splitting is performed right\-to\-left. This is useful in combination with \fB\-m\fP or \fB\-\-max\fP\&. With \fB\-n\fP or \fB\-\-no\-empty\fP, empty results are excluded from consideration (e.g. \fBhello\en\enworld\fP would expand to two strings and not three). Exit status: 0 if at least one split was performed, or 1 otherwise.
.sp
See also \fBread \-\-delimiter\fP\&.
.sp
\fBstring split0\fP splits each STRING on the zero byte (NUL). Options are the same as \fBstring split\fP except that no separator is given.
.sp
\fBsplit0\fP has the important property that its output is not further split when used in a command substitution, allowing for the command substitution to produce elements containing newlines. This is most useful when used with Unix tools that produce zero bytes, such as \fBfind \-print0\fP or \fBsort \-z\fP\&. See split0 examples below.
.SS Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ string split . example.com
example
com

>_ string split \-r \-m1 / /usr/local/bin/fish
/usr/local/bin
fish

>_ string split \(aq\(aq abc
a
b
c
.ft P
.fi
.UNINDENT
.UNINDENT
.SS NUL Delimited Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ # Count files in a directory, without being confused by newlines.
>_ count (find . \-print0 | string split0)
42

>_ # Sort a list of elements which may contain newlines
>_ set foo beta alpha\e\engamma
>_ set foo (string join0 $foo | sort \-z | string split0)
>_ string escape $foo[1]
alpha\e\engamma
.ft P
.fi
.UNINDENT
.UNINDENT
.SS "sub" subcommand
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
string sub [(\-s | \-\-start) START] [(\-l | \-\-length) LENGTH] [(\-q | \-\-quiet)] [STRING...]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBstring sub\fP prints a substring of each string argument. The start of the substring can be specified with \fB\-s\fP or \fB\-\-start\fP followed by a 1\-based index value. Positive index values are relative to the start of the string and negative index values are relative to the end of the string. The default start value is 1. The length of the substring can be specified with \fB\-l\fP or \fB\-\-length\fP\&. If the length is not specified, the substring continues to the end of each STRING. Exit status: 0 if at least one substring operation was performed, 1 otherwise.
.SS Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ string sub \-\-length 2 abcde
ab

>_ string sub \-s 2 \-l 2 abcde
bc

>_ string sub \-\-start=\-2 abcde
de
.ft P
.fi
.UNINDENT
.UNINDENT
.SS "trim" subcommand
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
string trim [(\-l | \-\-left)] [(\-r | \-\-right)] [(\-c | \-\-chars CHARS)] [(\-q | \-\-quiet)] [STRING...]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBstring trim\fP removes leading and trailing whitespace from each STRING. If \fB\-l\fP or \fB\-\-left\fP is given, only leading whitespace is removed. If \fB\-r\fP or \fB\-\-right\fP is given, only trailing whitespace is trimmed. The \fB\-c\fP or \fB\-\-chars\fP switch causes the characters in CHARS to be removed instead of whitespace. Exit status: 0 if at least one character was trimmed, or 1 otherwise.
.SS Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ string trim \(aq abc  \(aq
abc

>_ string trim \-\-right \-\-chars=yz xyzzy zany
x
zan
.ft P
.fi
.UNINDENT
.UNINDENT
.SS "upper" subcommand
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
string upper [(\-q | \-\-quiet)] [STRING...]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBstring upper\fP converts each string argument to uppercase. Exit status: 0 if at least one string was converted to uppercase, else 1. This means that in conjunction with the \fB\-q\fP flag you can readily test whether a string is already uppercase.
.SS Regular Expressions
.sp
Both the \fBmatch\fP and \fBreplace\fP subcommand support regular expressions when used with the \fB\-r\fP or \fB\-\-regex\fP option. The dialect is that of PCRE2.
.sp
In general, special characters are special by default, so \fBa+\fP matches one or more "a"s, while \fBa\e+\fP matches an "a" and then a "+". \fB(a+)\fP matches one or more "a"s in a capturing group (\fB(?:XXXX)\fP denotes a non\-capturing group). For the replacement parameter of \fBreplace\fP, \fB$n\fP refers to the n\-th group of the match. In the match parameter, \fB\en\fP (e.g. \fB\e1\fP) refers back to groups.
.sp
Some features include repetitions:
.INDENT 0.0
.IP \(bu 2
\fB*\fP refers to 0 or more repetitions of the previous expression
.IP \(bu 2
\fB+\fP 1 or more
.IP \(bu 2
\fB?\fP 0 or 1.
.IP \(bu 2
\fB{n}\fP to exactly n (where n is a number)
.IP \(bu 2
\fB{n,m}\fP at least n, no more than m.
.IP \(bu 2
\fB{n,}\fP n or more
.UNINDENT
.sp
Character classes, some of the more important:
.INDENT 0.0
.IP \(bu 2
\fB\&.\fP any character except newline
.IP \(bu 2
\fB\ed\fP a decimal digit and \fB\eD\fP, not a decimal digit
.IP \(bu 2
\fB\es\fP whitespace and \fB\eS\fP, not whitespace
.IP \(bu 2
\fB\ew\fP a "word" character and \fB\eW\fP, a "non\-word" character
.IP \(bu 2
\fB[...]\fP (where "..." is some characters) is a character set
.IP \(bu 2
\fB[^...]\fP is the inverse of the given character set
.IP \(bu 2
\fB[x\-y]\fP is the range of characters from x\-y
.IP \(bu 2
\fB[[:xxx:]]\fP is a named character set
.IP \(bu 2
\fB[[:^xxx:]]\fP is the inverse of a named character set
.IP \(bu 2
\fB[[:alnum:]]\fP  : "alphanumeric"
.IP \(bu 2
\fB[[:alpha:]]\fP  : "alphabetic"
.IP \(bu 2
\fB[[:ascii:]]\fP  : "0\-127"
.IP \(bu 2
\fB[[:blank:]]\fP  : "space or tab"
.IP \(bu 2
\fB[[:cntrl:]]\fP  : "control character"
.IP \(bu 2
\fB[[:digit:]]\fP  : "decimal digit"
.IP \(bu 2
\fB[[:graph:]]\fP  : "printing, excluding space"
.IP \(bu 2
\fB[[:lower:]]\fP  : "lower case letter"
.IP \(bu 2
\fB[[:print:]]\fP  : "printing, including space"
.IP \(bu 2
\fB[[:punct:]]\fP  : "printing, excluding alphanumeric"
.IP \(bu 2
\fB[[:space:]]\fP  : "white space"
.IP \(bu 2
\fB[[:upper:]]\fP  : "upper case letter"
.IP \(bu 2
\fB[[:word:]]\fP   : "same as w"
.IP \(bu 2
\fB[[:xdigit:]]\fP : "hexadecimal digit"
.UNINDENT
.sp
Groups:
.INDENT 0.0
.IP \(bu 2
\fB(...)\fP is a capturing group
.IP \(bu 2
\fB(?:...)\fP is a non\-capturing group
.IP \(bu 2
\fB\en\fP is a backreference (where n is the number of the group, starting with 1)
.IP \(bu 2
\fB$n\fP is a reference from the replacement expression to a group in the match expression.
.UNINDENT
.sp
And some other things:
.INDENT 0.0
.IP \(bu 2
\fB\eb\fP denotes a word boundary, \fB\eB\fP is not a word boundary.
.IP \(bu 2
\fB^\fP is the start of the string or line, \fB$\fP the end.
.IP \(bu 2
\fB|\fP is "alternation", i.e. the "or".
.UNINDENT
.SS Comparison to other tools
.sp
Most operations \fBstring\fP supports can also be done by external tools. Some of these include \fBgrep\fP, \fBsed\fP and \fBcut\fP\&.
.sp
If you are familiar with these, it is useful to know how \fBstring\fP differs from them.
.sp
In contrast to these classics, \fBstring\fP reads input either from stdin or as arguments. \fBstring\fP also does not deal with files, so it requires redirections to be used with them.
.sp
In contrast to \fBgrep\fP, \fBstring\fPs \fImatch\fP defaults to glob\-mode, while \fIreplace\fP defaults to literal matching. If set to regex\-mode, they use PCRE regular expressions, which is comparable to \fBgrep\fPs \fI\-P\fP option. \fImatch\fP defaults to printing just the match, which is like \fBgrep\fP with \fI\-o\fP (use \fI\-\-entire\fP to enable grep\-like behavior).
.sp
Like \fBsed\fPs \fIs/\fP command, \fBstring replace\fP still prints strings that don\(aqt match. \fBsed\fPs \fI\-n\fP in combination with a \fI/p\fP modifier or command is like \fBstring replace \-f\fP\&.
.sp
\fBstring split somedelimiter\fP is a replacement for \fBtr somedelimiter \e\en\fP\&.
.SS string\-collect \- join strings into one
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
string collect [(\-N | \-\-no\-trim\-newlines)] [STRING...]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBstring collect\fP collects its input into a single output argument, without splitting the output when used in a command substitution. This is useful when trying to collect multiline output from another command into a variable. Exit status: 0 if any output argument is non\-empty, or 1 otherwise.
.sp
If invoked with multiple arguments instead of input, \fBstring collect\fP preserves each argument separately, where the number of output arguments is equal to the number of arguments given to \fBstring collect\fP\&.
.sp
Any trailing newlines on the input are trimmed, just as with \fB"$(cmd)"\fP substitution in sh. \fB\-\-no\-trim\-newlines\fP can be used to disable this behavior, which may be useful when running a command such as \fBset contents (cat filename | string collect \-N)\fP\&.
.SS Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ echo \e"(echo one\entwo\enthree | string collect)\e"
"one
two
three
"

>_ echo \e"(echo one\entwo\enthree | string collect \-N)\e"
"one
two
three"
.ft P
.fi
.UNINDENT
.UNINDENT
.SS string\-escape \- escape special characters
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
string escape [(\-n | \-\-no\-quoted)] [\-\-style=xxx] [STRING...]
string unescape [\-\-style=xxx] [STRING...]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBstring escape\fP escapes each STRING in one of three ways. The first is \fB\-\-style=script\fP\&. This is the default. It alters the string such that it can be passed back to \fBeval\fP to produce the original argument again. By default, all special characters are escaped, and quotes are used to simplify the output when possible. If \fB\-n\fP or \fB\-\-no\-quoted\fP is given, the simplifying quoted format is not used. Exit status: 0 if at least one string was escaped, or 1 otherwise.
.sp
\fB\-\-style=var\fP ensures the string can be used as a variable name by hex encoding any non\-alphanumeric characters. The string is first converted to UTF\-8 before being encoded.
.sp
\fB\-\-style=url\fP ensures the string can be used as a URL by hex encoding any character which is not legal in a URL. The string is first converted to UTF\-8 before being encoded.
.sp
\fB\-\-style=regex\fP escapes an input string for literal matching within a regex expression. The string is first converted to UTF\-8 before being encoded.
.sp
\fBstring unescape\fP performs the inverse of the \fBstring escape\fP command. If the string to be unescaped is not properly formatted it is ignored. For example, doing \fBstring unescape \-\-style=var (string escape \-\-style=var $str)\fP will return the original string. There is no support for unescaping \fB\-\-style=regex\fP\&.
.SS Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ echo \e\ex07 | string escape
cg

>_ string escape \-\-style=var \(aqa1 b2\(aq\e\eu6161
a1_20b2__c_E6_85_A1
.ft P
.fi
.UNINDENT
.UNINDENT
.SS string\-join \- join strings with delimiter
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
string join [(\-q | \-\-quiet)] SEP [STRING...]
string join0 [(\-q | \-\-quiet)] [STRING...]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBstring join\fP joins its STRING arguments into a single string separated by SEP, which can be an empty string. Exit status: 0 if at least one join was performed, or 1 otherwise.
.sp
\fBstring join0\fP joins its STRING arguments into a single string separated by the zero byte (NUL), and adds a trailing NUL. This is most useful in conjunction with tools that accept NUL\-delimited input, such as \fBsort \-z\fP\&. Exit status: 0 if at least one join was performed, or 1 otherwise.
.SS Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ seq 3 | string join ...
1...2...3
.ft P
.fi
.UNINDENT
.UNINDENT
.SS string\-join0 \- join strings with zero bytes
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
string join [(\-q | \-\-quiet)] SEP [STRING...]
string join0 [(\-q | \-\-quiet)] [STRING...]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBstring join\fP joins its STRING arguments into a single string separated by SEP, which can be an empty string. Exit status: 0 if at least one join was performed, or 1 otherwise.
.sp
\fBstring join0\fP joins its STRING arguments into a single string separated by the zero byte (NUL), and adds a trailing NUL. This is most useful in conjunction with tools that accept NUL\-delimited input, such as \fBsort \-z\fP\&. Exit status: 0 if at least one join was performed, or 1 otherwise.
.SS Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ seq 3 | string join ...
1...2...3
.ft P
.fi
.UNINDENT
.UNINDENT
.SS string\-length \- print string lengths
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
string length [(\-q | \-\-quiet)] [STRING...]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBstring length\fP reports the length of each string argument in characters. Exit status: 0 if at least one non\-empty STRING was given, or 1 otherwise.
.SS Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ string length \(aqhello, world\(aq
12

>_ set str foo
>_ string length \-q $str; echo $status
0
# Equivalent to test \-n $str
.ft P
.fi
.UNINDENT
.UNINDENT
.SS string\-lower \- convert strings to lowercase
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
string lower [(\-q | \-\-quiet)] [STRING...]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBstring lower\fP converts each string argument to lowercase. Exit status: 0 if at least one string was converted to lowercase, else 1. This means that in conjunction with the \fB\-q\fP flag you can readily test whether a string is already lowercase.
.SS string\-match \- match substrings
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
string match [(\-a | \-\-all)] [(\-e | \-\-entire)] [(\-i | \-\-ignore\-case)] [(\-r | \-\-regex)] [(\-n | \-\-index)] [(\-q | \-\-quiet)] [(\-v | \-\-invert)] PATTERN [STRING...]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBstring match\fP tests each STRING against PATTERN and prints matching substrings. Only the first match for each STRING is reported unless \fB\-a\fP or \fB\-\-all\fP is given, in which case all matches are reported.
.sp
If you specify the \fB\-e\fP or \fB\-\-entire\fP then each matching string is printed including any prefix or suffix not matched by the pattern (equivalent to \fBgrep\fP without the \fB\-o\fP flag). You can, obviously, achieve the same result by prepending and appending \fB*\fP or \fB\&.*\fP depending on whether or not you have specified the \fB\-\-regex\fP flag. The \fB\-\-entire\fP flag is simply a way to avoid having to complicate the pattern in that fashion and make the intent of the \fBstring match\fP clearer. Without \fB\-\-entire\fP and \fB\-\-regex\fP, a PATTERN will need to match the entire STRING before it will be reported.
.sp
Matching can be made case\-insensitive with \fB\-\-ignore\-case\fP or \fB\-i\fP\&.
.sp
If \fB\-\-index\fP or \fB\-n\fP is given, each match is reported as a 1\-based start position and a length. By default, PATTERN is interpreted as a glob pattern matched against each entire STRING argument. A glob pattern is only considered a valid match if it matches the entire STRING.
.sp
If \fB\-\-regex\fP or \fB\-r\fP is given, PATTERN is interpreted as a Perl\-compatible regular expression, which does not have to match the entire STRING. For a regular expression containing capturing groups, multiple items will be reported for each match, one for the entire match and one for each capturing group. With this, only the matching part of the STRING will be reported, unless \fB\-\-entire\fP is given.
.sp
If \fB\-\-invert\fP or \fB\-v\fP is used the selected lines will be only those which do not match the given glob pattern or regular expression.
.sp
Exit status: 0 if at least one match was found, or 1 otherwise.
.SS Examples
.SS Match Glob Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ string match \(aq?\(aq a
a

>_ string match \(aqa*b\(aq axxb
axxb

>_ string match \-i \(aqa??B\(aq Axxb
Axxb

>_ echo \(aqok?\(aq | string match \(aq*\e\e?\(aq
ok?

# Note that only the second STRING will match here.
>_ string match \(aqfoo\(aq \(aqfoo1\(aq \(aqfoo\(aq \(aqfoo2\(aq
foo

>_ string match \-e \(aqfoo\(aq \(aqfoo1\(aq \(aqfoo\(aq \(aqfoo2\(aq
foo1
foo
foo2

>_ string match \(aqfoo?\(aq \(aqfoo1\(aq \(aqfoo\(aq \(aqfoo2\(aq
foo1
foo
foo2
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Match Regex Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ string match \-r \(aqcat|dog|fish\(aq \(aqnice dog\(aq
dog

>_ string match \-r \-v "c.*[12]" {cat,dog}(seq 1 4)
dog1
dog2
cat3
dog3
cat4
dog4

>_ string match \-r \(aq(\e\ed\e\ed?):(\e\ed\e\ed):(\e\ed\e\ed)\(aq 2:34:56
2:34:56
2
34
56

>_ string match \-r \(aq^(\e\ew{{2,4}})\e\eg1$\(aq papa mud murmur
papa
pa
murmur
mur

>_ string match \-r \-a \-n at ratatat
2 2
4 2
6 2

>_ string match \-r \-i \(aq0x[0\-9a\-f]{{1,8}}\(aq \(aqint magic = 0xBadC0de;\(aq
0xBadC0de
.ft P
.fi
.UNINDENT
.UNINDENT
.SS string\-repeat \- multiply a string
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
string repeat [(\-n | \-\-count) COUNT] [(\-m | \-\-max) MAX] [(\-N | \-\-no\-newline)] [(\-q | \-\-quiet)] [STRING...]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBstring repeat\fP repeats the STRING \fB\-n\fP or \fB\-\-count\fP times. The \fB\-m\fP or \fB\-\-max\fP option will limit the number of outputted char (excluding the newline). This option can be used by itself or in conjunction with \fB\-\-count\fP\&. If both \fB\-\-count\fP and \fB\-\-max\fP are present, max char will be outputed unless the final repeated string size is less than max, in that case, the string will repeat until count has been reached. Both \fB\-\-count\fP and \fB\-\-max\fP will accept a number greater than or equal to zero, in the case of zero, nothing will be outputed. If \fB\-N\fP or \fB\-\-no\-newline\fP is given, the output won\(aqt contain a newline character at the end. Exit status: 0 if yielded string is not empty, 1 otherwise.
.SS Examples
.SS Repeat Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ string repeat \-n 2 \(aqfoo \(aq
foo foo

>_ echo foo | string repeat \-n 2
foofoo

>_ string repeat \-n 2 \-m 5 \(aqfoo\(aq
foofo

>_ string repeat \-m 5 \(aqfoo\(aq
foofo
.ft P
.fi
.UNINDENT
.UNINDENT
.SS string\-replace \- replace substrings
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
string replace [(\-a | \-\-all)] [(\-f | \-\-filter)] [(\-i | \-\-ignore\-case)] [(\-r | \-\-regex)] [(\-q | \-\-quiet)] PATTERN REPLACEMENT [STRING...]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBstring replace\fP is similar to \fBstring match\fP but replaces non\-overlapping matching substrings with a replacement string and prints the result. By default, PATTERN is treated as a literal substring to be matched.
.sp
If \fB\-r\fP or \fB\-\-regex\fP is given, PATTERN is interpreted as a Perl\-compatible regular expression, and REPLACEMENT can contain C\-style escape sequences like \fB\et\fP as well as references to capturing groups by number or name as \fB$n\fP or \fB${n}\fP\&.
.sp
If you specify the \fB\-f\fP or \fB\-\-filter\fP flag then each input string is printed only if a replacement was done. This is useful where you would otherwise use this idiom: \fBa_cmd | string match pattern | string replace pattern new_pattern\fP\&. You can instead just write \fBa_cmd | string replace \-\-filter pattern new_pattern\fP\&.
.sp
Exit status: 0 if at least one replacement was performed, or 1 otherwise.
.SS Examples
.SS Replace Literal Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ string replace is was \(aqblue is my favorite\(aq
blue was my favorite

>_ string replace 3rd last 1st 2nd 3rd
1st
2nd
last

>_ string replace \-a \(aq \(aq _ \(aqspaces to underscores\(aq
spaces_to_underscores
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Replace Regex Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ string replace \-r \-a \(aq[^\e\ed.]+\(aq \(aq \(aq \(aq0 one two 3.14 four 5x\(aq
0 3.14 5

>_ string replace \-r \(aq(\e\ew+)\e\es+(\e\ew+)\(aq \(aq$2 $1 $$\(aq \(aqleft right\(aq
right left $

>_ string replace \-r \(aq\e\es*newline\e\es*\(aq \(aq\e\en\(aq \(aqput a newline here\(aq
put a
here
.ft P
.fi
.UNINDENT
.UNINDENT
.SS string\-split \- split strings by delimiter
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
string split [(\-m | \-\-max) MAX] [(\-n | \-\-no\-empty)] [(\-q | \-\-quiet)] [(\-r | \-\-right)] SEP [STRING...]
string split0 [(\-m | \-\-max) MAX] [(\-n | \-\-no\-empty)] [(\-q | \-\-quiet)] [(\-r | \-\-right)] [STRING...]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBstring split\fP splits each STRING on the separator SEP, which can be an empty string. If \fB\-m\fP or \fB\-\-max\fP is specified, at most MAX splits are done on each STRING. If \fB\-r\fP or \fB\-\-right\fP is given, splitting is performed right\-to\-left. This is useful in combination with \fB\-m\fP or \fB\-\-max\fP\&. With \fB\-n\fP or \fB\-\-no\-empty\fP, empty results are excluded from consideration (e.g. \fBhello\en\enworld\fP would expand to two strings and not three). Exit status: 0 if at least one split was performed, or 1 otherwise.
.sp
See also \fBread \-\-delimiter\fP\&.
.sp
\fBstring split0\fP splits each STRING on the zero byte (NUL). Options are the same as \fBstring split\fP except that no separator is given.
.sp
\fBsplit0\fP has the important property that its output is not further split when used in a command substitution, allowing for the command substitution to produce elements containing newlines. This is most useful when used with Unix tools that produce zero bytes, such as \fBfind \-print0\fP or \fBsort \-z\fP\&. See split0 examples below.
.SS Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ string split . example.com
example
com

>_ string split \-r \-m1 / /usr/local/bin/fish
/usr/local/bin
fish

>_ string split \(aq\(aq abc
a
b
c
.ft P
.fi
.UNINDENT
.UNINDENT
.SS NUL Delimited Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ # Count files in a directory, without being confused by newlines.
>_ count (find . \-print0 | string split0)
42

>_ # Sort a list of elements which may contain newlines
>_ set foo beta alpha\e\engamma
>_ set foo (string join0 $foo | sort \-z | string split0)
>_ string escape $foo[1]
alpha\e\engamma
.ft P
.fi
.UNINDENT
.UNINDENT
.SS string\-split0 \- split on zero bytes
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
string split [(\-m | \-\-max) MAX] [(\-n | \-\-no\-empty)] [(\-q | \-\-quiet)] [(\-r | \-\-right)] SEP [STRING...]
string split0 [(\-m | \-\-max) MAX] [(\-n | \-\-no\-empty)] [(\-q | \-\-quiet)] [(\-r | \-\-right)] [STRING...]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBstring split\fP splits each STRING on the separator SEP, which can be an empty string. If \fB\-m\fP or \fB\-\-max\fP is specified, at most MAX splits are done on each STRING. If \fB\-r\fP or \fB\-\-right\fP is given, splitting is performed right\-to\-left. This is useful in combination with \fB\-m\fP or \fB\-\-max\fP\&. With \fB\-n\fP or \fB\-\-no\-empty\fP, empty results are excluded from consideration (e.g. \fBhello\en\enworld\fP would expand to two strings and not three). Exit status: 0 if at least one split was performed, or 1 otherwise.
.sp
See also \fBread \-\-delimiter\fP\&.
.sp
\fBstring split0\fP splits each STRING on the zero byte (NUL). Options are the same as \fBstring split\fP except that no separator is given.
.sp
\fBsplit0\fP has the important property that its output is not further split when used in a command substitution, allowing for the command substitution to produce elements containing newlines. This is most useful when used with Unix tools that produce zero bytes, such as \fBfind \-print0\fP or \fBsort \-z\fP\&. See split0 examples below.
.SS Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ string split . example.com
example
com

>_ string split \-r \-m1 / /usr/local/bin/fish
/usr/local/bin
fish

>_ string split \(aq\(aq abc
a
b
c
.ft P
.fi
.UNINDENT
.UNINDENT
.SS NUL Delimited Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ # Count files in a directory, without being confused by newlines.
>_ count (find . \-print0 | string split0)
42

>_ # Sort a list of elements which may contain newlines
>_ set foo beta alpha\e\engamma
>_ set foo (string join0 $foo | sort \-z | string split0)
>_ string escape $foo[1]
alpha\e\engamma
.ft P
.fi
.UNINDENT
.UNINDENT
.SS string\-sub \- extract substrings
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
string sub [(\-s | \-\-start) START] [(\-l | \-\-length) LENGTH] [(\-q | \-\-quiet)] [STRING...]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBstring sub\fP prints a substring of each string argument. The start of the substring can be specified with \fB\-s\fP or \fB\-\-start\fP followed by a 1\-based index value. Positive index values are relative to the start of the string and negative index values are relative to the end of the string. The default start value is 1. The length of the substring can be specified with \fB\-l\fP or \fB\-\-length\fP\&. If the length is not specified, the substring continues to the end of each STRING. Exit status: 0 if at least one substring operation was performed, 1 otherwise.
.SS Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ string sub \-\-length 2 abcde
ab

>_ string sub \-s 2 \-l 2 abcde
bc

>_ string sub \-\-start=\-2 abcde
de
.ft P
.fi
.UNINDENT
.UNINDENT
.SS string\-trim \- remove trailing whitespace
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
string trim [(\-l | \-\-left)] [(\-r | \-\-right)] [(\-c | \-\-chars CHARS)] [(\-q | \-\-quiet)] [STRING...]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBstring trim\fP removes leading and trailing whitespace from each STRING. If \fB\-l\fP or \fB\-\-left\fP is given, only leading whitespace is removed. If \fB\-r\fP or \fB\-\-right\fP is given, only trailing whitespace is trimmed. The \fB\-c\fP or \fB\-\-chars\fP switch causes the characters in CHARS to be removed instead of whitespace. Exit status: 0 if at least one character was trimmed, or 1 otherwise.
.SS Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ string trim \(aq abc  \(aq
abc

>_ string trim \-\-right \-\-chars=yz xyzzy zany
x
zan
.ft P
.fi
.UNINDENT
.UNINDENT
.SS string\-unescape \- expand escape sequences
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
string escape [(\-n | \-\-no\-quoted)] [\-\-style=xxx] [STRING...]
string unescape [\-\-style=xxx] [STRING...]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBstring escape\fP escapes each STRING in one of three ways. The first is \fB\-\-style=script\fP\&. This is the default. It alters the string such that it can be passed back to \fBeval\fP to produce the original argument again. By default, all special characters are escaped, and quotes are used to simplify the output when possible. If \fB\-n\fP or \fB\-\-no\-quoted\fP is given, the simplifying quoted format is not used. Exit status: 0 if at least one string was escaped, or 1 otherwise.
.sp
\fB\-\-style=var\fP ensures the string can be used as a variable name by hex encoding any non\-alphanumeric characters. The string is first converted to UTF\-8 before being encoded.
.sp
\fB\-\-style=url\fP ensures the string can be used as a URL by hex encoding any character which is not legal in a URL. The string is first converted to UTF\-8 before being encoded.
.sp
\fB\-\-style=regex\fP escapes an input string for literal matching within a regex expression. The string is first converted to UTF\-8 before being encoded.
.sp
\fBstring unescape\fP performs the inverse of the \fBstring escape\fP command. If the string to be unescaped is not properly formatted it is ignored. For example, doing \fBstring unescape \-\-style=var (string escape \-\-style=var $str)\fP will return the original string. There is no support for unescaping \fB\-\-style=regex\fP\&.
.SS Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ echo \e\ex07 | string escape
cg

>_ string escape \-\-style=var \(aqa1 b2\(aq\e\eu6161
a1_20b2__c_E6_85_A1
.ft P
.fi
.UNINDENT
.UNINDENT
.SS string\-upper \- convert strings to uppercase
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
string upper [(\-q | \-\-quiet)] [STRING...]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBstring upper\fP converts each string argument to uppercase. Exit status: 0 if at least one string was converted to uppercase, else 1. This means that in conjunction with the \fB\-q\fP flag you can readily test whether a string is already uppercase.
.SS suspend \- suspend the current shell
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
suspend [\-\-force]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBsuspend\fP suspends execution of the current shell by sending it a SIGTSTP signal, returning to the controlling process. It can be resumed later by sending it a SIGCONT.  In order to prevent suspending a shell that doesn\(aqt have a controlling process, it will not suspend the shell if it is a login shell. This requirement is bypassed if the \fB\-\-force\fP option is given or the shell is not interactive.
.SS switch \- conditionally execute a block of commands
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
switch VALUE; [case [WILDCARD...]; [COMMANDS...]; ...] end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBswitch\fP performs one of several blocks of commands, depending on whether a specified value equals one of several wildcarded values. \fBcase\fP is used together with the \fBswitch\fP statement in order to determine which block should be executed.
.sp
Each \fBcase\fP command is given one or more parameters. The first \fBcase\fP command with a parameter that matches the string specified in the switch command will be evaluated. \fBcase\fP parameters may contain wildcards. These need to be escaped or quoted in order to avoid regular wildcard expansion using filenames.
.sp
Note that fish does not fall through on case statements. Only the first matching case is executed.
.sp
Note that command substitutions in a case statement will be evaluated even if its body is not taken. All substitutions, including command substitutions, must be performed before the value can be compared against the parameter.
.SS Example
.sp
If the variable $animal contains the name of an animal, the following code would attempt to classify it:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
switch $animal
    case cat
        echo evil
    case wolf dog human moose dolphin whale
        echo mammal
    case duck goose albatross
        echo bird
    case shark trout stingray
        echo fish
    case \(aq*\(aq
        echo I have no idea what a $animal is
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If the above code was run with \fB$animal\fP set to \fBwhale\fP, the output
would be \fBmammal\fP\&.
.SS test \- perform tests on files and text
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
test [EXPRESSION]
[ [EXPRESSION] ]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
Tests the expression given and sets the exit status to 0 if true, and 1 if false. An expression is made up of one or more operators and their arguments.
.sp
The first form (\fBtest\fP) is preferred. For compatibility with other shells, the second form is available: a matching pair of square brackets (\fB[ [EXPRESSION ] ]\fP).
.sp
This test is mostly POSIX\-compatible.
.sp
When using a variable as an argument for a test operator you should almost always enclose it in double\-quotes. There are only two situations it is safe to omit the quote marks. The first is when the argument is a literal string with no whitespace or other characters special to the shell (e.g., semicolon). For example, \fBtest \-b /my/file\fP\&. The second is using a variable that expands to exactly one element including if that element is the empty string (e.g., \fBset x \(aq\(aq\fP). If the variable is not set, set but with no value, or set to more than one value you must enclose it in double\-quotes. For example, \fBtest "$x" = "$y"\fP\&. Since it is always safe to enclose variables in double\-quotes when used as \fBtest\fP arguments that is the recommended practice.
.SS Operators for files and directories
.INDENT 0.0
.IP \(bu 2
\fB\-b FILE\fP returns true if \fBFILE\fP is a block device.
.IP \(bu 2
\fB\-c FILE\fP returns true if \fBFILE\fP is a character device.
.IP \(bu 2
\fB\-d FILE\fP returns true if \fBFILE\fP is a directory.
.IP \(bu 2
\fB\-e FILE\fP returns true if \fBFILE\fP exists.
.IP \(bu 2
\fB\-f FILE\fP returns true if \fBFILE\fP is a regular file.
.IP \(bu 2
\fB\-g FILE\fP returns true if \fBFILE\fP has the set\-group\-ID bit set.
.IP \(bu 2
\fB\-G FILE\fP returns true if \fBFILE\fP exists and has the same group ID as the current user.
.IP \(bu 2
\fB\-k FILE\fP returns true if \fBFILE\fP has the sticky bit set. If the OS does not support the concept it returns false. See \fI\%https://en.wikipedia.org/wiki/Sticky_bit\fP\&.
.IP \(bu 2
\fB\-L FILE\fP returns true if \fBFILE\fP is a symbolic link.
.IP \(bu 2
\fB\-O FILE\fP returns true if \fBFILE\fP exists and is owned by the current user.
.IP \(bu 2
\fB\-p FILE\fP returns true if \fBFILE\fP is a named pipe.
.IP \(bu 2
\fB\-r FILE\fP returns true if \fBFILE\fP is marked as readable.
.IP \(bu 2
\fB\-s FILE\fP returns true if the size of \fBFILE\fP is greater than zero.
.IP \(bu 2
\fB\-S FILE\fP returns true if \fBFILE\fP is a socket.
.IP \(bu 2
\fB\-t FD\fP returns true if the file descriptor \fBFD\fP is a terminal (TTY).
.IP \(bu 2
\fB\-u FILE\fP returns true if \fBFILE\fP has the set\-user\-ID bit set.
.IP \(bu 2
\fB\-w FILE\fP returns true if \fBFILE\fP is marked as writable; note that this does not check if the filesystem is read\-only.
.IP \(bu 2
\fB\-x FILE\fP returns true if \fBFILE\fP is marked as executable.
.UNINDENT
.SS Operators for text strings
.INDENT 0.0
.IP \(bu 2
\fBSTRING1 = STRING2\fP returns true if the strings \fBSTRING1\fP and \fBSTRING2\fP are identical.
.IP \(bu 2
\fBSTRING1 != STRING2\fP returns true if the strings \fBSTRING1\fP and \fBSTRING2\fP are not identical.
.IP \(bu 2
\fB\-n STRING\fP returns true if the length of \fBSTRING\fP is non\-zero.
.IP \(bu 2
\fB\-z STRING\fP returns true if the length of \fBSTRING\fP is zero.
.UNINDENT
.SS Operators to compare and examine numbers
.INDENT 0.0
.IP \(bu 2
\fBNUM1 \-eq NUM2\fP returns true if \fBNUM1\fP and \fBNUM2\fP are numerically equal.
.IP \(bu 2
\fBNUM1 \-ne NUM2\fP returns true if \fBNUM1\fP and \fBNUM2\fP are not numerically equal.
.IP \(bu 2
\fBNUM1 \-gt NUM2\fP returns true if \fBNUM1\fP is greater than \fBNUM2\fP\&.
.IP \(bu 2
\fBNUM1 \-ge NUM2\fP returns true if \fBNUM1\fP is greater than or equal to \fBNUM2\fP\&.
.IP \(bu 2
\fBNUM1 \-lt NUM2\fP returns true if \fBNUM1\fP is less than \fBNUM2\fP\&.
.IP \(bu 2
\fBNUM1 \-le NUM2\fP returns true if \fBNUM1\fP is less than or equal to \fBNUM2\fP\&.
.UNINDENT
.sp
Both integers and floating point numbers are supported.
.SS Operators to combine expressions
.INDENT 0.0
.IP \(bu 2
\fBCOND1 \-a COND2\fP returns true if both \fBCOND1\fP and \fBCOND2\fP are true.
.IP \(bu 2
\fBCOND1 \-o COND2\fP returns true if either \fBCOND1\fP or \fBCOND2\fP are true.
.UNINDENT
.sp
Expressions can be inverted using the \fB!\fP operator:
.INDENT 0.0
.IP \(bu 2
\fB! EXPRESSION\fP returns true if \fBEXPRESSION\fP is false, and false if \fBEXPRESSION\fP is true.
.UNINDENT
.sp
Expressions can be grouped using parentheses.
.INDENT 0.0
.IP \(bu 2
\fB( EXPRESSION )\fP returns the value of \fBEXPRESSION\fP\&.
.UNINDENT
.INDENT 0.0
.INDENT 3.5
Note that parentheses will usually require escaping with \fB\e(\fP to avoid being interpreted as a command substitution.
.UNINDENT
.UNINDENT
.SS Examples
.sp
If the \fB/tmp\fP directory exists, copy the \fB/etc/motd\fP file to it:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
if test \-d /tmp
    cp /etc/motd /tmp/motd
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If the variable \fBMANPATH\fP is defined and not empty, print the contents. (If \fBMANPATH\fP is not defined, then it will expand to zero arguments, unless quoted.)
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
if test \-n "$MANPATH"
    echo $MANPATH
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Parentheses and the \fB\-o\fP and \fB\-a\fP operators can be combined to produce more complicated expressions. In this example, success is printed if there is a \fB/foo\fP or \fB/bar\fP file as well as a \fB/baz\fP or \fB/bat\fP file.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
if test \e( \-f /foo \-o \-f /bar \e) \-a \e( \-f /baz \-o \-f /bat \e)
    echo Success.
end.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Numerical comparisons will simply fail if one of the operands is not a number:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
if test 42 \-eq "The answer to life, the universe and everything"
    echo So long and thanks for all the fish # will not be executed
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
A common comparison is with $status:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
if test $status \-eq 0
    echo "Previous command succeeded"
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The previous test can likewise be inverted:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
if test ! $status \-eq 0
    echo "Previous command failed"
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
which is logically equivalent to the following:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
if test $status \-ne 0
    echo "Previous command failed"
end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Standards
.sp
\fBtest\fP implements a subset of the \fI\%IEEE Std 1003.1\-2008 (POSIX.1) standard\fP\&. The following exceptions apply:
.INDENT 0.0
.IP \(bu 2
The \fB<\fP and \fB>\fP operators for comparing strings are not implemented.
.IP \(bu 2
Because this test is a shell builtin and not a standalone utility, using the \-c flag on a special file descriptors like standard input and output may not return the same result when invoked from within a pipe as one would expect when invoking the \fBtest\fP utility in another shell.
.UNINDENT
.INDENT 0.0
.INDENT 3.5
In cases such as this, one can use \fBcommand\fP \fBtest\fP to explicitly use the system\(aqs standalone \fBtest\fP rather than this \fBbuiltin\fP \fBtest\fP\&.
.UNINDENT
.UNINDENT
.SS time \- measure how long a command or block takes
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
time COMMAND
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBtime\fP causes fish to measure how long a command takes and print the results afterwards. The command can be a simple fish command or a block. The results can not currently be redirected.
.sp
For checking timing after a command has completed, check $CMD_DURATION\&.
.sp
Your system most likely also has a \fItime\fP command. To use that use something like \fIcommand time\fP, as in \fIcommand time sleep 10\fP\&. Because it\(aqs not inside fish, it won\(aqt have access to fish functions and won\(aqt be able to time blocks and such.
.SS Example
.sp
(for obvious reasons exact results will vary on your system)
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ time sleep 1s

________________________________________________________
Executed in    1,01 secs   fish           external
   usr time    2,32 millis    0,00 micros    2,32 millis
   sys time    0,88 millis  877,00 micros    0,00 millis

>_ time for i in 1 2 3; sleep 1s; end

________________________________________________________
Executed in    3,01 secs   fish           external
   usr time    9,16 millis    2,94 millis    6,23 millis
   sys time    0,23 millis    0,00 millis    0,23 millis
.ft P
.fi
.UNINDENT
.UNINDENT
.SS trap \- perform an action when the shell receives a signal
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
trap [OPTIONS] [[ARG] REASON ... ]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBtrap\fP is a wrapper around the fish event delivery framework. It exists for backwards compatibility with POSIX shells. For other uses, it is recommended to define an event handler\&.
.sp
The following parameters are available:
.INDENT 0.0
.IP \(bu 2
\fBARG\fP is the command to be executed on signal delivery.
.IP \(bu 2
\fBREASON\fP is the name of the event to trap. For example, a signal like \fBINT\fP or \fBSIGINT\fP, or the special symbol \fBEXIT\fP\&.
.IP \(bu 2
\fB\-l\fP or \fB\-\-list\-signals\fP prints a list of signal names.
.IP \(bu 2
\fB\-p\fP or \fB\-\-print\fP prints all defined signal handlers.
.UNINDENT
.sp
If \fBARG\fP and \fBREASON\fP are both specified, \fBARG\fP is the command to be executed when the event specified by \fBREASON\fP occurs (e.g., the signal is delivered).
.sp
If \fBARG\fP is absent (and there is a single REASON) or \-, each specified signal is reset to its original disposition (the value it had upon entrance to the shell).  If \fBARG\fP is the null string the signal specified by each \fBREASON\fP is ignored by the shell and by the commands it invokes.
.sp
If \fBARG\fP is not present and \fB\-p\fP has been supplied, then the trap commands associated with each \fBREASON\fP are displayed. If no arguments are supplied or if only \fB\-p\fP is given, \fBtrap\fP prints the list of commands associated with each signal.
.sp
Signal names are case insensitive and the \fBSIG\fP prefix is optional.
.sp
The exit status is 1 if any \fBREASON\fP is invalid; otherwise trap returns 0.
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
trap "status \-\-print\-stack\-trace" SIGUSR1
# Prints a stack trace each time the SIGUSR1 signal is sent to the shell.
.ft P
.fi
.UNINDENT
.UNINDENT
.SS true \- return a successful result
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
true
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBtrue\fP sets the exit status to 0.
.SS type \- indicate how a command would be interpreted
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
type [OPTIONS] NAME [NAME ...]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
With no options, \fBtype\fP indicates how each \fBNAME\fP would be interpreted if used as a command name.
.sp
The following options are available:
.INDENT 0.0
.IP \(bu 2
\fB\-a\fP or \fB\-\-all\fP prints all of possible definitions of the specified names.
.IP \(bu 2
\fB\-s\fP or \fB\-\-short\fP suppresses function expansion when used with no options or with \fB\-a\fP/\fB\-\-all\fP\&.
.IP \(bu 2
\fB\-f\fP or \fB\-\-no\-functions\fP suppresses function and builtin lookup.
.IP \(bu 2
\fB\-t\fP or \fB\-\-type\fP prints \fBfunction\fP, \fBbuiltin\fP, or \fBfile\fP if \fBNAME\fP is a shell function, builtin, or disk file, respectively.
.IP \(bu 2
\fB\-p\fP or \fB\-\-path\fP prints the path to \fBNAME\fP if \fBNAME\fP resolves to an executable file in $PATH, the path to the script containing the definition of the function \fBNAME\fP if \fBNAME\fP resolves to a function loaded from a file on disk (i.e. not interactively defined at the prompt), or nothing otherwise.
.IP \(bu 2
\fB\-P\fP or \fB\-\-force\-path\fP returns the path to the executable file \fBNAME\fP, presuming \fBNAME\fP is found in \fB$PATH\fP, or nothing otherwise. \fB\-\-force\-path\fP explicitly resolves only the path to executable files in \fB$PATH\fP, regardless of whether \fB$NAME\fP is shadowed by a function or builtin with the same name.
.IP \(bu 2
\fB\-q\fP or \fB\-\-quiet\fP suppresses all output; this is useful when testing the exit status.
.UNINDENT
.sp
The \fB\-q\fP, \fB\-p\fP, \fB\-t\fP and \fB\-P\fP flags (and their long flag aliases) are mutually exclusive. Only one can be specified at a time.
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ type fg
fg is a builtin
.ft P
.fi
.UNINDENT
.UNINDENT
.SS ulimit \- set or get resource usage limits
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ulimit [OPTIONS] [LIMIT]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBulimit\fP builtin sets or outputs the resource usage limits of the shell and any processes spawned by it. If a new limit value is omitted, the current value of the limit of the resource is printed; otherwise, the specified limit is set to the new value.
.sp
Use one of the following switches to specify which resource limit to set or report:
.INDENT 0.0
.IP \(bu 2
\fB\-c\fP or \fB\-\-core\-size\fP: the maximum size of core files created. By setting this limit to zero, core dumps can be disabled.
.IP \(bu 2
\fB\-d\fP or \fB\-\-data\-size\fP: the maximum size of a process\(aq data segment.
.IP \(bu 2
\fB\-f\fP or \fB\-\-file\-size\fP: the maximum size of files created by the shell.
.IP \(bu 2
\fB\-l\fP or \fB\-\-lock\-size\fP: the maximum size that may be locked into memory.
.IP \(bu 2
\fB\-m\fP or \fB\-\-resident\-set\-size\fP: the maximum resident set size.
.IP \(bu 2
\fB\-n\fP or \fB\-\-file\-descriptor\-count\fP: the maximum number of open file descriptors (most systems do not allow this value to be set).
.IP \(bu 2
\fB\-s\fP or \fB\-\-stack\-size\fP: the maximum stack size.
.IP \(bu 2
\fB\-t\fP or \fB\-\-cpu\-time\fP: the maximum amount of CPU time in seconds.
.IP \(bu 2
\fB\-u\fP or \fB\-\-process\-count\fP: the maximum number of processes available to a single user.
.IP \(bu 2
\fB\-v\fP or \fB\-\-virtual\-memory\-size\fP The maximum amount of virtual memory available to the shell.
.UNINDENT
.sp
Note that not all these limits are available in all operating systems.
.sp
The value of limit can be a number in the unit specified for the resource or one of the special values \fBhard\fP, \fBsoft\fP, or \fBunlimited\fP, which stand for the current hard limit, the current soft limit, and no limit, respectively.
.sp
If limit is given, it is the new value of the specified resource. If no option is given, then \fB\-f\fP is assumed. Values are in kilobytes, except for \fB\-t\fP, which is in seconds and \fB\-n\fP and \fB\-u\fP, which are unscaled values. The exit status is 0 unless an invalid option or argument is supplied, or an error occurs while setting a new limit.
.sp
\fBulimit\fP also accepts the following switches that determine what type of limit to set:
.INDENT 0.0
.IP \(bu 2
\fB\-H\fP or \fB\-\-hard\fP sets hard resource limit
.IP \(bu 2
\fB\-S\fP or \fB\-\-soft\fP sets soft resource limit
.UNINDENT
.sp
A hard limit can only be decreased. Once it is set it cannot be increased; a soft limit may be increased up to the value of the hard limit. If neither \-H nor \-S is specified, both the soft and hard limits are updated when assigning a new limit value, and the soft limit is used when reporting the current value.
.sp
The following additional options are also understood by \fBulimit\fP:
.INDENT 0.0
.IP \(bu 2
\fB\-a\fP or \fB\-\-all\fP prints all current limits
.UNINDENT
.sp
The \fBfish\fP implementation of \fBulimit\fP should behave identically to the implementation in bash, except for these differences:
.INDENT 0.0
.IP \(bu 2
Fish \fBulimit\fP supports GNU\-style long options for all switches
.IP \(bu 2
Fish \fBulimit\fP does not support the \fB\-p\fP option for getting the pipe size. The bash implementation consists of a compile\-time check that empirically guesses this number by writing to a pipe and waiting for SIGPIPE. Fish does not do this because it this method of determining pipe size is unreliable. Depending on bash version, there may also be further additional limits to set in bash that do not exist in fish.
.IP \(bu 2
Fish \fBulimit\fP does not support getting or setting multiple limits in one command, except reporting all values using the \-a switch
.UNINDENT
.SS Example
.sp
\fBulimit \-Hs 64\fP sets the hard stack size limit to 64 kB.
.SS umask \- set or get the file creation mode mask
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
umask [OPTIONS] [MASK]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBumask\fP displays and manipulates the "umask", or file creation mode mask, which is used to restrict the default access to files.
.sp
The umask may be expressed either as an octal number, which represents the rights that will be removed by default, or symbolically, which represents the only rights that will be granted by default.
.sp
Access rights are explained in the manual page for the \fBchmod(1)\fP program.
.sp
With no parameters, the current file creation mode mask is printed as an octal number.
.INDENT 0.0
.IP \(bu 2
\fB\-h\fP or \fB\-\-help\fP prints this message.
.IP \(bu 2
\fB\-S\fP or \fB\-\-symbolic\fP prints the umask in symbolic form instead of octal form.
.IP \(bu 2
\fB\-p\fP or \fB\-\-as\-command\fP outputs the umask in a form that may be reused as input
.UNINDENT
.sp
If a numeric mask is specified as a parameter, the current shell\(aqs umask will be set to that value, and the rights specified by that mask will be removed from new files and directories by default.
.sp
If a symbolic mask is specified, the desired permission bits, and not the inverse, should be specified. A symbolic mask is a comma separated list of rights. Each right consists of three parts:
.INDENT 0.0
.IP \(bu 2
The first part specifies to whom this set of right applies, and can be one of \fBu\fP, \fBg\fP, \fBo\fP or \fBa\fP, where \fBu\fP specifies the user who owns the file, \fBg\fP specifies the group owner of the file, \fBo\fP specific other users rights and \fBa\fP specifies all three should be changed.
.IP \(bu 2
The second part of a right specifies the mode, and can be one of \fB=\fP, \fB+\fP or \fB\-\fP, where \fB=\fP specifies that the rights should be set to the new value, \fB+\fP specifies that the specified right should be added to those previously specified and \fB\-\fP specifies that the specified rights should be removed from those previously specified.
.IP \(bu 2
The third part of a right specifies what rights should be changed and can be any combination of \fBr\fP, \fBw\fP and \fBx\fP, representing read, write and execute rights.
.UNINDENT
.sp
If the first and second parts are skipped, they are assumed to be \fBa\fP and \fB=\fP, respectively. As an example, \fBr,u+w\fP means all users should have read access and the file owner should also have write access.
.sp
Note that symbolic masks currently do not work as intended.
.SS Example
.sp
\fBumask 177\fP or \fBumask u=rw\fP sets the file creation mask to read and write for the owner and no permissions at all for any other users.
.SS vared \- interactively edit the value of an environment variable
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
vared VARIABLE_NAME
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBvared\fP is used to interactively edit the value of an environment variable. Array variables as a whole can not be edited using \fBvared\fP, but individual list elements can.
.SS Example
.sp
\fBvared PATH[3]\fP edits the third element of the PATH list
.SS wait \- wait for jobs to complete
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
wait [\-n | \-\-any] [PID | PROCESS_NAME] ...
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBwait\fP waits for child jobs to complete.
.INDENT 0.0
.IP \(bu 2
If a pid is specified, the command waits for the job that the process with the pid belongs to.
.IP \(bu 2
If a process name is specified, the command waits for the jobs that the matched processes belong to.
.IP \(bu 2
If neither a pid nor a process name is specified, the command waits for all background jobs.
.IP \(bu 2
If the \fB\-n\fP / \fB\-\-any\fP flag is provided, the command returns as soon as the first job completes. If it is not provided, it returns after all jobs complete.
.UNINDENT
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
sleep 10 &
wait $last_pid
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
spawns \fBsleep\fP in the background, and then waits until it finishes.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
for i in (seq 1 5); sleep 10 &; end
wait
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
spawns five jobs in the background, and then waits until all of them finishes.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
for i in (seq 1 5); sleep 10 &; end
hoge &
wait sleep
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
spawns five jobs and \fBhoge\fP in the background, and then waits until all \fBsleep\fPs finish, and doesn\(aqt wait for \fBhoge\fP finishing.
.SS while \- perform a command multiple times
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
while CONDITION; COMMANDS...; end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBwhile\fP repeatedly executes \fBCONDITION\fP, and if the exit status is 0, then executes \fBCOMMANDS\fP\&.
.sp
The exit status of the while loop is the exit status of the last iteration of the \fBCOMMANDS\fP executed, or 0 if none were executed. (This matches other shells and is POSIX\-compatible.)
.sp
You can use and or or for complex conditions. Even more complex control can be achieved with \fBwhile true\fP containing a break\&.
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
while test \-f foo.txt; or test \-f bar.txt ; echo file exists; sleep 10; end
# outputs \(aqfile exists\(aq at 10 second intervals as long as the file foo.txt or bar.txt exists.
.ft P
.fi
.UNINDENT
.UNINDENT
.SH DESIGN
.sp
This is a description of the design principles that have been used to design fish. The fish design has three high level goals. These are:
.INDENT 0.0
.IP 1. 3
Everything that can be done in other shell languages should be possible to do in fish, though fish may rely on external commands in doing so.
.IP 2. 3
Fish should be user friendly, but not at the expense of expressiveness. Most tradeoffs between power and ease of use can be avoided with careful design.
.IP 3. 3
Whenever possible without breaking the above goals, fish should follow the Posix syntax.
.UNINDENT
.sp
To achieve these high\-level goals, the fish design relies on a number of more specific design principles. These are presented below, together with a rationale and a few examples for each.
.SS The law of orthogonality
.sp
The shell language should have a small set of orthogonal features. Any situation where two features are related but not identical, one of them should be removed, and the other should be made powerful and general enough to handle all common use cases of either feature.
.sp
Rationale:
.sp
Related features make the language larger, which makes it harder to learn. It also increases the size of the source code, making the program harder to maintain and update.
.sp
Examples:
.INDENT 0.0
.IP \(bu 2
Here documents are too similar to using echo inside of a pipeline.
.IP \(bu 2
Subshells, command substitution and process substitution are strongly related. \fBfish\fP only supports command substitution, the others can be achieved either using a block or the psub shellscript function.
.IP \(bu 2
Having both aliases and functions is confusing, especially since both of them have limitations and problems. \fBfish\fP functions have none of the drawbacks of either syntax.
.IP \(bu 2
The many Posix quoting styles are silly, especially $\(aq\(aq.
.UNINDENT
.SS The law of responsiveness
.sp
The shell should attempt to remain responsive to the user at all times, even in the face of contended or unresponsive filesystems. It is only acceptable to block in response to a user initiated action, such as running a command.
.sp
Rationale:
Bad performance increases user\-facing complexity, because it trains users to recognize and route around slow use cases. It is also incredibly frustrating.
.sp
Examples:
.INDENT 0.0
.IP \(bu 2
Features like syntax highlighting and autosuggestions must perform all of their disk I/O asynchronously.
.IP \(bu 2
Startup should minimize forks and disk I/O, so that fish can be started even if the system is under load.
.UNINDENT
.SS Configurability is the root of all evil
.sp
Every configuration option in a program is a place where the program is too stupid to figure out for itself what the user really wants, and should be considered a failure of both the program and the programmer who implemented it.
.sp
Rationale:
Different configuration options are a nightmare to maintain, since the number of potential bugs caused by specific configuration combinations quickly becomes an issue. Configuration options often imply assumptions about the code which change when reimplementing the code, causing issues with backwards compatibility. But mostly, configuration options should be avoided since they simply should not exist, as the program should be smart enough to do what is best, or at least a good enough approximation of it.
.sp
Examples:
.INDENT 0.0
.IP \(bu 2
Fish allows the user to set various syntax highlighting colors. This is needed because fish does not know what colors the terminal uses by default, which might make some things unreadable. The proper solution would be for text color preferences to be defined centrally by the user for all programs, and for the terminal emulator to send these color properties to fish.
.IP \(bu 2
Fish does not allow you to set the number of history entries, different language substyles or any number of other common shell configuration options.
.UNINDENT
.sp
A special note on the evils of configurability is the long list of very useful features found in some shells, that are not turned on by default. Both zsh and bash support command\-specific completions, but no such completions are shipped with bash by default, and they are turned off by default in zsh. Other features that zsh supports that are disabled by default include tab\-completion of strings containing wildcards, a sane completion pager and a history file.
.SS The law of user focus
.sp
When designing a program, one should first think about how to make an intuitive and powerful program. Implementation issues should only be considered once a user interface has been designed.
.sp
Rationale:
.sp
This design rule is different than the others, since it describes how one should go about designing new features, not what the features should be. The problem with focusing on what can be done, and what is easy to do, is that too much of the implementation is exposed. This means that the user must know a great deal about the underlying system to be able to guess how the shell works, it also means that the language will often be rather low\-level.
.sp
Examples:
\- There should only be one type of input to the shell, lists of commands. Loops, conditionals and variable assignments are all performed through regular commands.
.INDENT 0.0
.IP \(bu 2
The differences between built\-in commands and shellscript functions should be made as small as possible. Built\-ins and shellscript functions should have exactly the same types of argument expansion as other commands, should be possible to use in any position in a pipeline, and should support any I/O redirection.
.IP \(bu 2
Instead of forking when performing command substitution to provide a fake variable scope, all fish commands are performed from the same process, and fish instead supports true scoping.
.IP \(bu 2
All blocks end with the \fBend\fP built\-in.
.UNINDENT
.SS The law of discoverability
.sp
A program should be designed to make its features as easy as possible to discover for the user.
.sp
Rationale:
A program whose features are discoverable turns a new user into an expert in a shorter span of time, since the user will become an expert on the program simply by using it.
.sp
The main benefit of a graphical program over a command\-line\-based program is discoverability. In a graphical program, one can discover all the common features by simply looking at the user interface and guessing what the different buttons, menus and other widgets do. The traditional way to discover features in command\-line programs is through manual pages. This requires both that the user starts to use a different program, and then they remember the new information until the next time they use the same program.
.sp
Examples:
\- Everything should be tab\-completable, and every tab completion should have a description.
.INDENT 0.0
.IP \(bu 2
Every syntax error and error in a built\-in command should contain an error message describing what went wrong and a relevant help page. Whenever possible, errors should be flagged red by the syntax highlighter.
.IP \(bu 2
The help manual should be easy to read, easily available from the shell, complete and contain many examples
.IP \(bu 2
The language should be uniform, so that once the user understands the command/argument syntax, they will know the whole language, and be able to use tab\-completion to discover new features.
.UNINDENT
.SH TUTORIAL
.SS Why fish?
.sp
\fBfish\fP is a fully\-equipped command line shell (like bash or zsh) that is smart and user\-friendly. \fBfish\fP supports powerful features like syntax highlighting, autosuggestions, and tab completions that just work, with nothing to learn or configure.
.sp
If you want to make your command line more productive, more useful, and more fun, without learning a bunch of arcane syntax and configuration options, then \fBfish\fP might be just what you\(aqre looking for!
.SS Getting started
.sp
Once installed, just type in \fBfish\fP into your current shell to try it out!
.sp
You will be greeted by the standard fish prompt,
which means you are all set up and can start using fish:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> fish
Welcome to fish, the friendly interactive shell
Type help for instructions on how to use fish
you@hostname ~>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This prompt that you see above is the \fBfish\fP default prompt: it shows your username, hostname, and working directory.
\- to change this prompt see \fI\%how to change your prompt\fP
\- to switch to fish permanently see \fI\%switch your default shell to fish\fP\&.
.sp
From now on, we\(aqll pretend your prompt is just a \(aq\fB>\fP\(aq to save space.
.SS Learning fish
.sp
This tutorial assumes a basic understanding of command line shells and Unix commands, and that you have a working copy of \fBfish\fP\&.
.sp
If you have a strong understanding of other shells, and want to know what \fBfish\fP does differently, search for the magic phrase \fIunlike other shells\fP, which is used to call out important differences.
.SS Running Commands
.sp
\fBfish\fP runs commands like other shells: you type a command, followed by its arguments. Spaces are separators:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> echo hello world
hello world
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This runs the command \fIecho\fP with the arguments \fIhello\fP and \fIworld\fP\&.
.sp
You can include a literal space in an argument with a backslash, or by using single or double quotes:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> mkdir My\e Files
> cp ~/Some\e File \(aqMy Files\(aq
> ls "My Files"
Some File
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Commands can be chained with semicolons.
.SS Getting Help
.sp
\fBfish\fP has excellent help and man pages. Run \fBhelp\fP to open help in a web browser, and \fBman\fP to open it in a man page. You can also ask for help with a specific command, for example, \fBhelp set\fP to open in a web browser, or \fBman set\fP to see it in the terminal.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> man set
set \- handle shell variables
  Synopsis...
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Syntax Highlighting
.sp
You\(aqll quickly notice that \fBfish\fP performs syntax highlighting as you type. Invalid commands are colored red by default:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> <red>/bin/mkd</red>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
A command may be invalid because it does not exist, or refers to a file that you cannot execute. When the command becomes valid, it is shown in a different color:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> /bin/mkdir
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBfish\fP will underline valid file paths as you type them:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> cat <underline>~/somefi</underline>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This tells you that there exists a file that starts with \(aq\fBsomefi\fP\(aq, which is useful feedback as you type.
.sp
These colors, and many more, can be changed by running \fBfish_config\fP, or by modifying variables directly.
.SS Wildcards
.sp
\fBfish\fP supports the familiar wildcard \fB*\fP\&. To list all JPEG files:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> ls *.jpg
lena.jpg
meena.jpg
santa maria.jpg
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
You can include multiple wildcards:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> ls l*.p*
lena.png
lesson.pdf
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Especially powerful is the recursive wildcard ** which searches directories recursively:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> ls /var/**.log
/var/log/system.log
/var/run/sntp.log
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If that directory traversal is taking a long time, you can \fBControl+C\fP out of it.
.SS Pipes and Redirections
.sp
You can pipe between commands with the usual vertical bar:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> echo hello world | wc
      1       2      12
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
stdin and stdout can be redirected via the familiar \fI<\fP and \fI<\fP\&. stderr is redirected with a \fI2>\fP\&.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> grep fish < /etc/shells > ~/output.txt 2> ~/errors.txt
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
To redirect stdout and stderr into one file, you need to first redirect stdout, and then stderr into stdout:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> make > make_output.txt 2>&1
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Autosuggestions
.sp
\fBfish\fP suggests commands as you type, and shows the suggestion to the right of the cursor, in gray. For example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> <red>/bin/h</red><gray>ostname</gray>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
It knows about paths and options:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> grep \-\-i<gray>gnore\-case</gray>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
And history too. Type a command once, and you can re\-summon it by just typing a few letters:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> <red>r</red><gray>sync \-avze ssh . myname@somelonghost.com:/some/long/path/doo/dee/doo/dee/doo</gray>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
To accept the autosuggestion, hit \fB→\fP (right arrow) or \fBControl+F\fP\&. To accept a single word of the autosuggestion, \fBAlt+→\fP (right arrow). If the autosuggestion is not what you want, just ignore it.
.SS Tab Completions
.sp
\fBfish\fP comes with a rich set of tab completions, that work "out of the box."
.sp
Press \fBTab\fP, and \fBfish\fP will attempt to complete the command, argument, or path:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> <red>/pri</red> :kbd:\(gaTab\(ga => /private/
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If there\(aqs more than one possibility, it will list them:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> <red>~/stuff/s</red> :kbd:\(gaTab\(ga
~/stuff/script.sh  (Executable, 4.8kB)  ~/stuff/sources/  (Directory)
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Hit tab again to cycle through the possibilities.
.sp
\fBfish\fP can also complete many commands, like git branches:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> git merge pr :kbd:\(gaTab\(ga => git merge prompt_designer
> git checkout b :kbd:\(gaTab\(ga
builtin_list_io_merge (Branch) builtin_set_color (Branch) busted_events (Tag)
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Try hitting tab and see what \fBfish\fP can do!
.SS Variables
.sp
Like other shells, a dollar sign performs variable substitution:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> echo My home directory is $HOME
My home directory is /home/tutorial
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Variable substitution also happens in double quotes, but not single quotes:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> echo "My current directory is $PWD"
My current directory is /home/tutorial
> echo \(aqMy current directory is $PWD\(aq
My current directory is $PWD
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Unlike other shells, \fBfish\fP has no dedicated \fIVARIABLE=VALUE\fP syntax for setting variables. Instead it has an ordinary command: \fBset\fP, which takes a variable name, and then its value.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> set name \(aqMister Noodle\(aq
> echo $name
Mister Noodle
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
(Notice the quotes: without them, \fBMister\fP and \fBNoodle\fP would have been separate arguments, and \fB$name\fP would have been made into a list of two elements.)
.sp
Unlike other shells, variables are not further split after substitution:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> mkdir $name
> ls
Mister Noodle
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
In bash, this would have created two directories "Mister" and "Noodle". In \fBfish\fP, it created only one: the variable had the value "Mister Noodle", so that is the argument that was passed to \fBmkdir\fP, spaces and all. Other shells use the term "arrays", rather than lists.
.sp
You can erase (or "delete") a variable with \fB\-e\fP or \fB\-\-erase\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> set \-e MyVariable
> env | grep MyVariable
(no output)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Exports (Shell Variables)
.sp
Sometimes you need to have a variable available to an external command, often as a setting. For example many programs like \fIgit\fP or \fIman\fP read the \fI$PAGER\fP variable to figure out your preferred pager (the program that lets you scroll text). Other variables used like this include \fI$BROWSER\fP, \fI$LANG\fP (to configure your language) and \fI$PATH\fP\&. You\(aqll note these are written in ALLCAPS, but that\(aqs just a convention.
.sp
To give a variable to an external command, it needs to be "exported". Unlike other shells, \fBfish\fP does not have an export command. Instead, a variable is exported via an option to \fBset\fP, either \fB\-\-export\fP or just \fB\-x\fP\&.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> set \-x MyVariable SomeValue
> env | grep MyVariable
MyVariable=SomeValue
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
It can also be unexported with \fB\-\-unexport\fP or \fB\-u\fP\&.
.SS Lists
.sp
The \fBset\fP command above used quotes to ensure that \fBMister Noodle\fP was one argument. If it had been two arguments, then \fBname\fP would have been a list of length 2.  In fact, all variables in \fBfish\fP are really lists, that can contain any number of values, or none at all.
.sp
Some variables, like \fB$PWD\fP, only have one value. By convention, we talk about that variable\(aqs value, but we really mean its first (and only) value.
.sp
Other variables, like \fB$PATH\fP, really do have multiple values. During variable expansion, the variable expands to become multiple arguments:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> echo $PATH
/usr/bin /bin /usr/sbin /sbin /usr/local/bin
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Variables whose name ends in "PATH" are automatically split on colons to become lists. They are joined using colons when exported to subcommands. This is for compatibility with other tools, which expect $PATH to use colons. You can also explicitly add this quirk to a variable with \fIset \-\-path\fP, or remove it with \fIset \-\-unpath\fP\&.
.sp
Lists cannot contain other lists: there is no recursion.  A variable is a list of strings, full stop.
.sp
Get the length of a list with \fBcount\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> count $PATH
5
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
You can append (or prepend) to a list by setting the list to itself, with some additional arguments. Here we append /usr/local/bin to $PATH:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> set PATH $PATH /usr/local/bin
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
You can access individual elements with square brackets. Indexing starts at 1 from the beginning, and \-1 from the end:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> echo $PATH
/usr/bin /bin /usr/sbin /sbin /usr/local/bin
> echo $PATH[1]
/usr/bin
> echo $PATH[\-1]
/usr/local/bin
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
You can also access ranges of elements, known as "slices:"
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> echo $PATH[1..2]
/usr/bin /bin
> echo $PATH[\-1..2]
/usr/local/bin /sbin /usr/sbin /bin
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
You can iterate over a list (or a slice) with a for loop:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> for val in $PATH
    echo "entry: $val"
  end
entry: /usr/bin/
entry: /bin
entry: /usr/sbin
entry: /sbin
entry: /usr/local/bin
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Lists adjacent to other lists or strings are expanded as cartesian products unless quoted (see Variable expansion):
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> set a 1 2 3
> set 1 a b c
> echo $a$1
1a 2a 3a 1b 2b 3b 1c 2c 3c
> echo $a" banana"
1 banana 2 banana 3 banana
> echo "$a banana"
1 2 3 banana
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This is similar to \fI\%Brace expansion\fP\&.
.SS Command Substitutions
.sp
Command substitutions use the output of one command as an argument to another. Unlike other shells, \fBfish\fP does not use backticks \(ga\(ga for command substitutions. Instead, it uses parentheses:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> echo In (pwd), running (uname)
In /home/tutorial, running FreeBSD
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
A common idiom is to capture the output of a command in a variable:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> set os (uname)
> echo $os
Linux
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Command substitutions are not expanded within quotes. Instead, you can temporarily close the quotes, add the command substitution, and reopen them, all in the same argument:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> touch "testing_"(date +%s)".txt"
> ls *.txt
testing_1360099791.txt
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Unlike other shells, fish does not split command substitutions on any whitespace (like spaces or tabs), only newlines. This can be an issue with commands like \fBpkg\-config\fP that print what is meant to be multiple arguments on a single line. To split it on spaces too, use \fBstring split\fP\&.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> printf \(aq%s\en\(aq (pkg\-config \-\-libs gio\-2.0)
\-lgio\-2.0 \-lgobject\-2.0 \-lglib\-2.0
> printf \(aq%s\en\(aq (pkg\-config \-\-libs gio\-2.0 | string split " ")
\-lgio\-2.0
\-lgobject\-2.0
\-lglib\-2.0
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Separating Commands (Semicolon)
.sp
Like other shells, fish allows multiple commands either on separate lines or the same line.
.sp
To write them on the same line, use the semicolon (";"). That means the following two examples are equivalent:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
echo fish; echo chips

# or
echo fish
echo chips
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Exit Status
.sp
When a command exits, it returns a status code as a natural number. This indicates how the command fared \- 0 usually means success, while the others signify kinds of failure. For instance fish\(aqs \fBset \-\-query\fP returns the number of variables it queried that weren\(aqt set \- \fBset \-\-query PATH\fP usually returns 0, \fBset \-\-query arglbargl boogagoogoo\fP usually returns 2.
.sp
Unlike other shells, \fBfish\fP stores the exit status of the last command in \fB$status\fP instead of \fB$?\fP\&.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> false
> echo $status
1
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This indicates how the command fared \- 0 usually means success, while the others signify kinds of failure. For instance fish\(aqs \fBset \-\-query\fP returns the number of variables it queried that weren\(aqt set \- \fBset \-\-query PATH\fP usually returns 0, \fBset \-\-query arglbargl boogagoogoo\fP usually returns 2.
.sp
There is also a \fB$pipestatus\fP list variable for the exit statuses [1] of processes in a pipe.
.IP [1] 5
or "stati" if you prefer, or "statūs" if you\(aqve time\-travelled from ancient Rome or work as a latin teacher
.SS Combiners (And, Or, Not)
.sp
fish supports the familiar \fB&&\fP and \fB||\fP to combine commands, and \fB!\fP to negate them:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> ./configure && make && sudo make install
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Here, \fImake\fP is only executed if \fI\&./configure\fP succeeds (returns 0), and \fIsudo make install\fP is only executed if both \fI\&./configure\fP and \fImake\fP succeed.
.sp
fish also supports \fBand\fP, \fBor\fP, and \fBnot\fP\&. The first two are job modifiers and have lower precedence. Example usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> cp file1.txt file1_bak.txt && cp file2.txt file2_bak.txt ; and echo "Backup successful"; or echo "Backup failed"
Backup failed
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
As mentioned in \fI\%the section on the semicolon\fP, this can also be written in multiple lines, like so:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
cp file1.txt file1_bak.txt && cp file2.txt file2_bak.txt
and echo "Backup successful"
or echo "Backup failed"
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Conditionals (If, Else, Switch)
.sp
Use \fBif\fP, \fBelse if\fP, and \fBelse\fP to conditionally execute code, based on the exit status of a command.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
if grep fish /etc/shells
    echo Found fish
else if grep bash /etc/shells
    echo Found bash
else
    echo Got nothing
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
To compare strings or numbers or check file properties (whether a file exists or is writeable and such), use test, like
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
if test "$fish" = "flounder"
    echo FLOUNDER
end

# or

if test "$number" \-gt 5
    echo $number is greater than five
else
    echo $number is five or less
end

# or

if test \-e /etc/hosts # is true if the path /etc/hosts exists \- it could be a file or directory or symlink (or possibly something else).
    echo We most likely have a hosts file
else
    echo We do not have a hosts file
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fI\%Combiners\fP can also be used to make more complex conditions, like
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
if grep fish /etc/shells; and command \-sq fish
    echo fish is installed and configured
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
For even more complex conditions, use \fBbegin\fP and \fBend\fP to group parts of them.
.sp
There is also a \fBswitch\fP command:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
switch (uname)
case Linux
    echo Hi Tux!
case Darwin
    echo Hi Hexley!
case FreeBSD NetBSD DragonFly
    echo Hi Beastie!
case \(aq*\(aq
    echo Hi, stranger!
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Note that \fBcase\fP does not fall through, and can accept multiple arguments or (quoted) wildcards.
.SS Functions
.sp
A \fBfish\fP function is a list of commands, which may optionally take arguments. Unlike other shells, arguments are not passed in "numbered variables" like \fB$1\fP, but instead in a single list \fB$argv\fP\&. To create a function, use the \fBfunction\fP builtin:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> function say_hello
     echo Hello $argv
  end
> say_hello
Hello
> say_hello everybody!
Hello everybody!
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Unlike other shells, \fBfish\fP does not have aliases or special prompt syntax. Functions take their place.
.sp
You can list the names of all functions with the \fBfunctions\fP keyword (note the plural!). \fBfish\fP starts out with a number of functions:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> functions
alias, cd, delete\-or\-exit, dirh, dirs, down\-or\-search, eval, export, fish_command_not_found_setup, fish_config, fish_default_key_bindings, fish_prompt, fish_right_prompt, fish_sigtrap_handler, fish_update_completions, funced, funcsave, grep, help, history, isatty, ls, man, math, nextd, nextd\-or\-forward\-word, open, popd, prevd, prevd\-or\-backward\-word, prompt_pwd, psub, pushd, seq, setenv, trap, type, umask, up\-or\-search, vared
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
You can see the source for any function by passing its name to \fBfunctions\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> functions ls
function ls \-\-description \(aqList contents of directory\(aq
    command ls \-G $argv
end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Loops
.sp
While loops:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> while true
    echo "Loop forever"
end
Loop forever
Loop forever
Loop forever
\&... # yes, this really will loop forever. Unless you abort it with ctrl\-c.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
For loops can be used to iterate over a list. For example, a list of files:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> for file in *.txt
    cp $file $file.bak
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Iterating over a list of numbers can be done with \fBseq\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> for x in (seq 5)
    touch file_$x.txt
end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Prompt
.sp
Unlike other shells, there is no prompt variable like PS1. To display your prompt, \fBfish\fP executes a function with the name \fBfish_prompt\fP, and its output is used as the prompt.
.sp
You can define your own prompt:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> function fish_prompt
    echo "New Prompt % "
end
New Prompt %
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Multiple lines are OK. Colors can be set via \fBset_color\fP, passing it named ANSI colors, or hex RGB values:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> function fish_prompt
      set_color purple
      date "+%m/%d/%y"
      set_color FF0
      echo (pwd) \(aq>\(aq (set_color normal)
  end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
will look like
.nf
02/06/13
/home/tutorial >
.fi
.sp
.sp
You can choose among some sample prompts by running \fBfish_config prompt\fP\&. \fBfish\fP also supports RPROMPT through \fBfish_right_prompt\fP\&.
.SS $PATH
.sp
\fB$PATH\fP is an environment variable containing the directories that \fBfish\fP searches for commands. Unlike other shells, $PATH is a \fI\%list\fP, not a colon\-delimited string.
.sp
To prepend /usr/local/bin and /usr/sbin to \fB$PATH\fP, you can write:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> set PATH /usr/local/bin /usr/sbin $PATH
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
To remove /usr/local/bin from \fB$PATH\fP, you can write:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> set PATH (string match \-v /usr/local/bin $PATH)
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
For compatibility with other shells and external commands, $PATH is a path variable, and so will be joined with colons (not spaces) when you quote it:
.INDENT 0.0
.INDENT 3.5
> echo "$PATH"
/usr/local/sbin:/usr/local/bin:/usr/bin
.UNINDENT
.UNINDENT
.sp
and it will be exported like that, and when fish starts it splits the $PATH it receives into a list on colon.
.sp
You can do so directly in \fBconfig.fish\fP, like you might do in other shells with \fB\&.profile\fP\&. See \fI\%this example\fP\&.
.sp
A faster way is to modify the \fB$fish_user_paths\fP \fI\%universal variable\fP, which is automatically prepended to \fB$PATH\fP\&. For example, to permanently add \fB/usr/local/bin\fP to your \fB$PATH\fP, you could write:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> set \-U fish_user_paths /usr/local/bin $fish_user_paths
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The advantage is that you don\(aqt have to go mucking around in files: just run this once at the command line, and it will affect the current session and all future instances too. (Note: you should NOT add this line to \fBconfig.fish\fP\&. If you do, the variable will get longer each time you run fish!)
.SS Startup (Where\(aqs .bashrc?)
.sp
\fBfish\fP starts by executing commands in \fB~/.config/fish/config.fish\fP\&. You can create it if it does not exist.
.sp
It is possible to directly create functions and variables in \fBconfig.fish\fP file, using the commands shown above. For example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> cat ~/.config/fish/config.fish

set \-x PATH $PATH /sbin/

function ll
    ls \-lh $argv
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
However, it is more common and efficient to use  autoloading functions and universal variables.
.sp
If you want to organize your configuration, fish also reads commands in .fish files in \fB~/.config/fish/conf.d/\fP\&. See initialization for the details.
.SS Autoloading Functions
.sp
When \fBfish\fP encounters a command, it attempts to autoload a function for that command, by looking for a file with the name of that command in \fB~/.config/fish/functions/\fP\&.
.sp
For example, if you wanted to have a function \fBll\fP, you would add a text file \fBll.fish\fP to \fB~/.config/fish/functions\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> cat ~/.config/fish/functions/ll.fish
function ll
    ls \-lh $argv
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This is the preferred way to define your prompt as well:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> cat ~/.config/fish/functions/fish_prompt.fish
function fish_prompt
    echo (pwd) "> "
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
See the documentation for funced and funcsave for ways to create these files automatically, and $fish_function_path to control their location.
.SS Universal Variables
.sp
A universal variable is a variable whose value is shared across all instances of \fBfish\fP, now and in the future – even after a reboot. You can make a variable universal with \fBset \-U\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> set \-U EDITOR vim
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Now in another shell:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> echo $EDITOR
vim
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Switching to fish?
.sp
If you wish to use fish (or any other shell) as your default shell,
you need to enter your new shell\(aqs executable \fB/usr/local/bin/fish\fP in two places:
\- add \fB/usr/local/bin/fish\fP to \fB/etc/shells\fP
\- change your default shell with \fBchsh \-s /usr/local/bin/fish\fP
.sp
You can use the following commands for this:
.sp
Add the fish shell \fB/usr/local/bin/fish\fP
to \fB/etc/shells\fP with:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> echo /usr/local/bin/fish | sudo tee \-a /etc/shells
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Change your default shell to fish with:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> chsh \-s /usr/local/bin/fish
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
(To change it back to another shell, just substitute \fB/usr/local/bin/fish\fP
with \fB/bin/bash\fP, \fB/bin/tcsh\fP or \fB/bin/zsh\fP as appropriate in the steps above.)
.SS Ready for more?
.sp
If you want to learn more about fish, there is lots of detailed documentation, the \fI\%official gitter channel\fP, an \fI\%official mailing list\fP, and the \fI\%github page\fP\&.
.SH FREQUENTLY ASKED QUESTIONS
.SS How do I set or clear an environment variable?
.sp
Use the set command:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
set \-x key value
set \-e key
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Since fish 3.1 you can set an environment variable for just one command using the \fBkey=value some command\fP syntax, like in other shells.  The two lines below behave identically \- unlike other shells, fish will output \fBvalue\fP both times:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
key=value echo $key
begin; set \-lx key value; echo $key; end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS How do I run a command every login? What\(aqs fish\(aqs equivalent to .bashrc or .profile?
.sp
Edit the file \fB~/.config/fish/config.fish\fP, creating it if it does not exist (Note the leading period).
.SS How do I set my prompt?
.sp
The prompt is the output of the \fBfish_prompt\fP function. Put it in \fB~/.config/fish/functions/fish_prompt.fish\fP\&. For example, a simple prompt is:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function fish_prompt
    set_color $fish_color_cwd
    echo \-n (prompt_pwd)
    set_color normal
    echo \-n \(aq > \(aq
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
You can also use the Web configuration tool, fish_config, to preview and choose from a gallery of sample prompts.
.SS How do I run a command from history?
.sp
Type some part of the command, and then hit the \fB↑\fP (up) or \fB↓\fP (down) arrow keys to navigate through history matches. Additional default key bindings include \fBControl+P\fP (up) and \fBControl+N\fP (down).
.SS How do I run a subcommand? The backtick doesn\(aqt work!
.sp
\fBfish\fP uses parentheses for subcommands. For example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
for i in (ls)
    echo $i
end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS My command (pkg\-config) gives its output as a single long string?
.sp
Unlike other shells, fish splits command substitutions only on newlines, not spaces or tabs or the characters in $IFS.
.sp
That means if you run
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
echo x(printf \(aq%s \(aq a b c)x
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
It will print \fBxa b c x\fP, because the "a b c " is used in one piece. But if you do
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
echo x(printf \(aq%s\en\(aq a b c)x
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
it will print \fBxax xbx xcx\fP\&.
.sp
In the overwhelming majority of cases, splitting on spaces is unwanted, so this is an improvement.
.sp
However sometimes, especially with \fBpkg\-config\fP and related tools, splitting on spaces is needed.
.sp
In these cases use \fBstring split " "\fP like:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
g++ example_01.cpp (pkg\-config \-\-cflags \-\-libs gtk+\-2.0 | string split " ")
.ft P
.fi
.UNINDENT
.UNINDENT
.SS How do I get the exit status of a command?
.sp
Use the \fB$status\fP variable. This replaces the \fB$?\fP variable used in some other shells.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
somecommand
if test $status \-eq 7
    echo "That\(aqs my lucky number!"
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If you are just interested in success or failure, you can run the command directly as the if\-condition:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
if somecommand
    echo "Command succeeded"
else
    echo "Command failed"
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Or if you just want to do one command in case the first succeeded or failed, use \fBand\fP or \fBor\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
somecommand
or someothercommand
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
See the documentation for test and if for more information.
.SS How do I check whether a variable is defined?
.sp
Use \fBset \-q var\fP\&.  For example, \fBif set \-q var; echo variable defined; end\fP\&.  To check multiple variables you can combine with \fBand\fP and \fBor\fP like so:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
if set \-q var1; or set \-q var2
    echo either variable defined
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Keep in mind that a defined variabled could also be empty, either by having no elements (if set like \fBset var\fP) or only empty elements (if set like \fBset var ""\fP). Read on for how to deal with those.
.SS How do I check whether a variable is not empty?
.sp
Use \fBstring length \-q \-\- $var\fP\&.  For example, \fBif string length \-q \-\- $var; echo not empty; end\fP\&.  Note that \fBstring length\fP will interpret a list of multiple variables as a disjunction (meaning any/or):
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
if string length \-q \-\- $var1 $var2 $var3
    echo at least one of these variables is not empty
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Alternatively, use \fBtest \-n "$var"\fP, but remember that \fBthe variable must be double\-quoted\fP\&.  For example, \fBif test \-n "$var"; echo not empty; end\fP\&. The \fBtest\fP command provides its own and (\-a) and or (\-o):
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
if test \-n "$var1" \-o \-n "$var2" \-o \-n "$var3"
    echo at least one of these variables is not empty
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If you want to know if a variable has \fIno elements\fP, use \fBset \-q var[1]\fP\&.
.SS Why doesn\(aqt \fBset \-Ux\fP (exported universal variables) seem to work?
.sp
A global variable of the same name already exists.
.sp
Environment variables such as \fBEDITOR\fP or \fBTZ\fP can be set universally using \fBset \-Ux\fP\&.  However, if
there is an environment variable already set before fish starts (such as by login scripts or system
administrators), it is imported into fish as a global variable. The variable scopes are searched from the "inside out", which
means that local variables are checked first, followed by global variables, and finally universal
variables.
.sp
This means that the global value takes precedence over the universal value.
.sp
To avoid this problem, consider changing the setting which fish inherits. If this is not possible,
add a statement to your user initialization file (usually
\fB~/.config/fish/config.fish\fP):
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
set \-gx EDITOR vim
.ft P
.fi
.UNINDENT
.UNINDENT
.SS How do I customize my syntax highlighting colors?
.sp
Use the web configuration tool, fish_config, or alter the \fI\%fish_color family of environment variables\fP\&.
.SS How do I update man page completions?
.sp
Use the fish_update_completions command.
.SS I accidentally entered a directory path and fish changed directory. What happened?
.sp
If fish is unable to locate a command with a given name, and it starts with \(aq\fB\&.\fP\(aq, \(aq\fB/\fP\(aq or \(aq\fB~\fP\(aq, fish will test if a directory of that name exists. If it does, it is implicitly assumed that you want to change working directory. For example, the fastest way to switch to your home directory is to simply press \fB~\fP and enter.
.SS The open command doesn\(aqt work.
.sp
The \fBopen\fP command uses the MIME type database and the \fB\&.desktop\fP files used by Gnome and KDE to identify filetypes and default actions. If at least one of these environments is installed, but the open command is not working, this probably means that the relevant files are installed in a non\-standard location. Consider \fI\%asking for more help\fP\&.
.SS How do I make fish my default shell?
.sp
If you installed fish manually (e.g. by compiling it, not by using a package manager), you first need to add fish to the list of shells by executing the following command (assuming you installed fish in /usr/local):
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
echo /usr/local/bin/fish | sudo tee \-a /etc/shells
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If you installed a prepackaged version of fish, the package manager should have already done this for you.
.sp
In order to change your default shell, type:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
chsh \-s /usr/local/bin/fish
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
You may need to adjust the above path to e.g. \fB/usr/bin/fish\fP\&. Use the command \fBwhich fish\fP if you are unsure of where fish is installed.
.sp
Unfortunately, there is no way to make the changes take effect at once. You will need to log out and back in again.
.SS I\(aqm seeing weird output before each prompt when using screen. What\(aqs wrong?
.sp
Quick answer:
.sp
Run the following command in fish:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function fish_title; end; funcsave fish_title
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Problem solved!
.sp
The long answer:
.sp
Fish is trying to set the titlebar message of your terminal. While screen itself supports this feature, your terminal does not. Unfortunately, when the underlying terminal doesn\(aqt support setting the titlebar, screen simply passes through the escape codes and text to the underlying terminal instead of ignoring them. It is impossible to detect and resolve this problem from inside fish since fish has no way of knowing what the underlying terminal type is. For now, the only way to fix this is to unset the titlebar message, as suggested above.
.sp
Note that fish has a default titlebar message, which will be used if the fish_title function is undefined. So simply unsetting the fish_title function will not work.
.SS How do I change the greeting message?
.sp
Change the value of the variable \fBfish_greeting\fP or create a \fBfish_greeting\fP function. For example, to remove the greeting use:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
set fish_greeting
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Why doesn\(aqt history substitution ("!$" etc.) work?
.sp
Because history substitution is an awkward interface that was invented before interactive line editing was even possible.  Fish drops it in favor of perfecting the interactive history recall interface.  Switching requires a small change of habits: if you want to modify an old line/word, first recall it, then edit.  E.g. don\(aqt type "sudo !!" \- first press Up, then Home, then type "sudo ".
.sp
Fish history recall is very simple yet effective:
.INDENT 0.0
.IP \(bu 2
As in any modern shell, the Up arrow, \fB↑\fP recalls whole lines, starting from the last line executed.  A single press replaces "!!", later presses replace "!\-3" and the like.
.INDENT 2.0
.IP \(bu 2
If the line you want is far back in the history, type any part of the line and then press Up one or more times.  This will constrain the recall to lines that include this text, and you will get to the line you want much faster.  This replaces "!vi", "!?bar.c" and the like.
.UNINDENT
.IP \(bu 2
\fBAlt+↑,Up\fP recalls individual arguments, starting from the last argument in the last line executed.  A single press replaces "!$", later presses replace "!!:4" and the like. An alternate key binding is \fBAlt+.\fP\&.
.INDENT 2.0
.IP \(bu 2
If the argument you want is far back in history (e.g. 2 lines back \- that\(aqs a lot of words!), type any part of it and then press \fBAlt+↑,Up\fP\&.  This will show only arguments containing that part and you will get what you want much faster.  Try it out, this is very convenient!
.IP \(bu 2
If you want to reuse several arguments from the same line ("!!:3*" and the like), consider recalling the whole line and removing what you don\(aqt need (\fBAlt+D\fP and \fBAlt+Backspace\fP are your friends).
.UNINDENT
.UNINDENT
.sp
See documentation for more details about line editing in fish.
.SS How can I use \fB\-\fP as a shortcut for \fBcd \-\fP?
.sp
In fish versions prior to 2.5.0 it was possible to create a function named \fB\-\fP that would do \fBcd \-\fP\&. Changes in the 2.5.0 release included several bug fixes that enforce the rule that a bare hyphen is not a valid function (or variable) name. However, you can achieve the same effect via an abbreviation:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
abbr \-a \-\- \- \(aqcd \-\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Uninstalling fish
.sp
Should you wish to uninstall fish, first ensure fish is not set as your shell. Run \fBchsh \-s /bin/bash\fP if you are not sure.
.sp
Next, do the following (assuming fish was installed to /usr/local):
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
rm \-Rf /usr/local/etc/fish /usr/local/share/fish ~/.config/fish
rm /usr/local/share/man/man1/fish*.1
cd /usr/local/bin
rm \-f fish fish_indent
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Unicode private\-use characters reserved by fish
.sp
Fish reserves the \fI\%Unicode private\-use character range\fP from U+F600 thru U+F73F for internal use. Any attempt to feed characters in that range to fish will result in them being replaced by the Unicode "replacement character" U+FFFD. This includes both interactive input as well as any file read by fish (but not programs run by fish).
.SS Where can I find extra tools for fish?
.sp
The fish user community extends fish in unique and useful ways via scripts that aren\(aqt always appropriate for bundling with the fish package. Typically because they solve a niche problem unlikely to appeal to a broad audience. You can find those extensions, including prompts, themes and useful functions, in various third\-party repositories. These include:
.INDENT 0.0
.IP \(bu 2
\fI\%Fisher\fP
.IP \(bu 2
\fI\%Fundle\fP
.IP \(bu 2
\fI\%Oh My Fish\fP
.IP \(bu 2
\fI\%Tacklebox\fP
.UNINDENT
.sp
This is not an exhaustive list and the fish project has no opinion regarding the merits of the repositories listed above or the scripts found therein.
.SH LICENSE
.sp
\fBfish\fP Copyright © 2005\-2009 Axel Liljencrantz, 2009\-2019 fish\-shell contributors. \fBfish\fP is released under the GNU General Public License, version 2.
.sp
\fBfish\fP includes other code licensed under the GNU General Public License, version 2, including GNU \fBprintf\fP\&.
.sp
Copyright © 1990\-2007 Free Software Foundation, Inc. Printf (from GNU Coreutils 6.9) is released under the GNU General Public License, version 2.
.sp
The GNU General Public License agreement follows.
.sp
\fBGNU GENERAL PUBLIC LICENSE\fP
.sp
Version 2, June 1991
.INDENT 0.0
.INDENT 3.5
Copyright (C) 1989, 1991 Free Software Foundation, Inc.
51 Franklin Street, Fifth Floor, Boston, MA  02110\-1301, USA
.sp
Everyone is permitted to copy and distribute verbatim copies
of this license document, but changing it is not allowed.
.UNINDENT
.UNINDENT
.sp
\fBPreamble\fP
.sp
The licenses for most software are designed to take away your freedom to share and change it.  By contrast, the GNU General Public License is intended to guarantee your freedom to share and change free software \- to make sure the software is free for all its users.  This General Public License applies to most of the Free Software Foundation\(aqs software and to any other program whose authors commit to using it.  (Some other Free Software Foundation software is covered by the GNU Library General Public License instead.)  You can apply it to your programs, too.
.sp
When we speak of free software, we are referring to freedom, not price.  Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for this service if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs; and that you know you can do these things.
.sp
To protect your rights, we need to make restrictions that forbid anyone to deny you these rights or to ask you to surrender the rights. These restrictions translate to certain responsibilities for you if you distribute copies of the software, or if you modify it.
.sp
For example, if you distribute copies of such a program, whether gratis or for a fee, you must give the recipients all the rights that you have.  You must make sure that they, too, receive or can get the source code.  And you must show them these terms so they know their rights.
.sp
We protect your rights with two steps: (1) copyright the software, and (2) offer you this license which gives you legal permission to copy, distribute and/or modify the software.
.sp
Also, for each author\(aqs protection and ours, we want to make certain that everyone understands that there is no warranty for this free software.  If the software is modified by someone else and passed on, we want its recipients to know that what they have is not the original, so that any problems introduced by others will not reflect on the original authors\(aq reputations.
.sp
Finally, any free program is threatened constantly by software patents.  We wish to avoid the danger that redistributors of a free program will individually obtain patent licenses, in effect making the program proprietary. To prevent this, we have made it clear that any patent must be licensed for everyone\(aqs free use or not licensed at all.
.sp
The precise terms and conditions for copying, distribution and modification follow.
.sp
\fBTERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\fP
.INDENT 0.0
.IP \(bu 2
This License applies to any program or other work which contains a notice placed by the copyright holder saying it may be distributed under the terms of this General Public License.  The "Program", below, refers to any such program or work, and a "work based on the Program" means either the Program or any derivative work under copyright law: that is to say, a work containing the Program or a portion of it, either verbatim or with modifications and/or translated into another language.  (Hereinafter, translation is included without limitation in the term "modification".) Each licensee is addressed as "you".
.UNINDENT
.INDENT 0.0
.INDENT 3.5
Activities other than copying, distribution and modification are not covered by this License; they are outside its scope.  The act of running the Program is not restricted, and the output from the Program is covered only if its contents constitute a work based on the Program (independent of having been made by running the Program). Whether that is true depends on what the Program does.
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP 1. 3
You may copy and distribute verbatim copies of the Program\(aqs source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice and disclaimer of warranty; keep intact all the notices that refer to this License and to the absence of any warranty; and give any other recipients of the Program a copy of this License along with the Program.
.UNINDENT
.INDENT 0.0
.INDENT 3.5
You may charge a fee for the physical act of transferring a copy, and you may at your option offer warranty protection in exchange for a fee.
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP 2. 3
You may modify your copy or copies of the Program or any portion of it, thus forming a work based on the Program, and copy and distribute such modifications or work under the terms of Section 1 above, provided that you also meet all of these conditions:
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
You must cause the modified files to carry prominent notices stating that you changed the files and the date of any change.
.IP \(bu 2
You must cause any work that you distribute or publish, that in whole or in part contains or is derived from the Program or any part thereof, to be licensed as a whole at no charge to all third parties under the terms of this License.
.IP \(bu 2
If the modified program normally reads commands interactively when run, you must cause it, when started running for such interactive use in the most ordinary way, to print or display an announcement including an appropriate copyright notice and a notice that there is no warranty (or else, saying that you provide a warranty) and that users may redistribute the program under these conditions, and telling the user how to view a copy of this License. (Exception: if the Program itself is interactive but does not normally print such an announcement, your work based on the Program is not required to print an announcement.)
.UNINDENT
.sp
These requirements apply to the modified work as a whole.  If identifiable sections of that work are not derived from the Program, and can be reasonably considered independent and separate works in themselves, then this License, and its terms, do not apply to those sections when you distribute them as separate works.  But when you distribute the same sections as part of a whole which is a work based on the Program, the distribution of the whole must be on the terms of this License, whose permissions for other licensees extend to the entire whole, and thus to each and every part regardless of who wrote it.
.sp
Thus, it is not the intent of this section to claim rights or contest your rights to work written entirely by you; rather, the intent is to exercise the right to control the distribution of derivative or collective works based on the Program.
.sp
In addition, mere aggregation of another work not based on the Program with the Program (or with a work based on the Program) on a volume of a storage or distribution medium does not bring the other work under the scope of this License.
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP 3. 3
You may copy and distribute the Program (or a work based on it, under Section 2) in object code or executable form under the terms of Sections 1 and 2 above provided that you also do one of the following:
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
Accompany it with the complete corresponding machine\-readable source code, which must be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange; or,
.IP \(bu 2
Accompany it with a written offer, valid for at least three years, to give any third party, for a charge no more than your cost of physically performing source distribution, a complete machine\-readable copy of the corresponding source code, to be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange; or,
.IP \(bu 2
Accompany it with the information you received as to the offer to distribute corresponding source code.  (This alternative is allowed only for noncommercial distribution and only if you received the program in object code or executable form with such an offer, in accord with Subsection b above.)
.UNINDENT
.sp
The source code for a work means the preferred form of the work for making modifications to it.  For an executable work, complete source code means all the source code for all modules it contains, plus any associated interface definition files, plus the scripts used to control compilation and installation of the executable.  However, as a special exception, the source code distributed need not include anything that is normally distributed (in either source or binary form) with the major components (compiler, kernel, and so on) of the operating system on which the executable runs, unless that component itself accompanies the executable.
.sp
If distribution of executable or object code is made by offering access to copy from a designated place, then offering equivalent access to copy the source code from the same place counts as distribution of the source code, even though third parties are not compelled to copy the source along with the object code.
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP 4. 3
You may not copy, modify, sublicense, or distribute the Program except as expressly provided under this License. Any attempt otherwise to copy, modify, sublicense or distribute the Program is void, and will automatically terminate your rights under this License. However, parties who have received copies, or rights, from you under this License will not have their licenses terminated so long as such parties remain in full compliance.
.IP 5. 3
You are not required to accept this License, since you have not signed it. However, nothing else grants you permission to modify or distribute the Program or its derivative works.  These actions are prohibited by law if you do not accept this License.  Therefore, by modifying or distributing the Program (or any work based on the Program), you indicate your acceptance of this License to do so, and all its terms and conditions for copying, distributing or modifying the Program or works based on it.
.IP 6. 3
Each time you redistribute the Program (or any work based on the Program), the recipient automatically receives a license from the original licensor to copy, distribute or modify the Program subject to these terms and conditions. You may not impose any further restrictions on the recipients\(aq exercise of the rights granted herein. You are not responsible for enforcing compliance by third parties to this License.
.IP 7. 3
If, as a consequence of a court judgment or allegation of patent infringement or for any other reason (not limited to patent issues), conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License.  If you cannot distribute so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not distribute the Program at all. For example, if a patent license would not permit royalty\-free redistribution of the Program by all those who receive copies directly or indirectly through you, then the only way you could satisfy both it and this License would be to refrain entirely from distribution of the Program.
.UNINDENT
.INDENT 0.0
.INDENT 3.5
If any portion of this section is held invalid or unenforceable under any particular circumstance, the balance of the section is intended to apply and the section as a whole is intended to apply in other circumstances.
.sp
It is not the purpose of this section to induce you to infringe any patents or other property right claims or to contest validity of any such claims; this section has the sole purpose of protecting the integrity of the free software distribution system, which is implemented by public license practices.  Many people have made generous contributions to the wide range of software distributed through that system in reliance on consistent application of that system; it is up to the author/donor to decide if he or she is willing to distribute software through any other system and a licensee cannot impose that choice.
.sp
This section is intended to make thoroughly clear what is believed to be a consequence of the rest of this License.
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP 8. 3
If the distribution and/or use of the Program is restricted in certain countries either by patents or by copyrighted interfaces, the original copyright holder who places the Program under this License may add an explicit geographical distribution limitation excluding those countries, so that distribution is permitted only in or among countries not thus excluded.  In such case, this License incorporates the limitation as if written in the body of this License.
.IP 9. 3
The Free Software Foundation may publish revised and/or new versions of the General Public License from time to time.  Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.
.UNINDENT
.INDENT 0.0
.INDENT 3.5
Each version is given a distinguishing version number.  If the Program specifies a version number of this License which applies to it and "any later version", you have the option of following the terms and conditions either of that version or of any later version published by the Free Software Foundation.  If the Program does not specify a version number of this License, you may choose any version ever published by the Free Software Foundation.
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP 10. 3
If you wish to incorporate parts of the Program into other free programs whose distribution conditions are different, write to the author to ask for permission.  For software which is copyrighted by the Free Software Foundation, write to the Free Software Foundation; we sometimes make exceptions for this.  Our decision will be guided by the two goals of preserving the free status of all derivatives of our free software and of promoting the sharing and reuse of software generally.
.UNINDENT
.INDENT 0.0
.INDENT 3.5
\fBNO WARRANTY\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP 11. 4
BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.
.IP 12. 4
IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
.UNINDENT

.sp
.ce
----

.ce 0
.sp
.sp
\fBLicense for PCRE2\fP
.sp
\fBfish\fP contains code from the [PCRE2](\fI\%http://www.pcre.org\fP) library to support regular expressions. This code, created by Philip Hazel, is distributed under the terms of the BSD license. Copyright © 1997\-2015 University of Cambridge.
.sp
The BSD license follows.
.sp
Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
.IP \(bu 2
Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
.IP \(bu 2
Neither the name of the University of Cambridge nor the names of any contributors may be used to endorse or promote products derived from this software without specific prior written permission.
.UNINDENT
.UNINDENT
.UNINDENT
.sp
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.SH AUTHOR
fish-shell developers
.SH COPYRIGHT
2019, fish-shell developers
.\" Generated by docutils manpage writer.
.
